<!doctype linuxdoc system>

<article>
<!-- LyX 1.1 created this file. For more info see http://www.lyx.org/ -->
<title>
The Mutt E-Mail Client 
</title>
<author>
by Michael Elkins <htmlurl url="mailto:me@cs.hmc.edu" name="<me@cs.hmc.edu>">
</author>
<date>
version 1.4
</date>
<abstract>
``All mail clients suck.  This one just sucks less.'' -me, circa
 1995 
</abstract>
<toc>
<sect>
イントロダクション
<p>
Muttは小さいけれどパワフルなテキストベースの MIMEメールクライアントです。Muttは多くのことが設定可能でキーバインディング、キーボードマクロ、メールスレッド、正規表現による検索、メッセージを選択する強力なパターンマッチング言語などの高度な機能を持つ、メールのパワーユーザーに最適なプログラムです。
</p>
<sect1>
Muttのホームページ
<p>
<htmlurl url="http://www.mutt.org/" name="http://www.mutt.org/">
</p>
<sect1>
メーリングリスト
<p>
次のメーリングリストに参加するためには本文に <it>subscribe</it>と書いて
 <tt>list-name</tt><it>-request</it><it><tt></tt></it>@mutt.org</it></tt>に送ってください。
</p>
<p>
<itemize>
 <item>
<htmlurl url="mailto:mutt-announce-request@mutt.org" name="mutt-announce@mutt.org"> -- 流量の少ないアナウンス用のリスト
 <item>
<htmlurl url="mailto:mutt-users-request@mutt.org" name="mutt-users@mutt.org"> -- ヘルプ、バグリポート、機能のリクエスト等を送るユーザー用のリスト
 <item>
<htmlurl url="mailto:mutt-dev-request@mutt.org" name="mutt-dev@mutt.org"> -- 開発用のメーリングリスト
</itemize>
</p><p>
<em>注意</em>: <it>mutt-announce</it>に送られたメッセージは自動的に <it>mutt-users</it>にも送られます。そのためこの2つのリストに同時に参加する必要はありません。
</p>
<sect1>
ソフトウエア配布サイト
<p>
<itemize>
 <item>
<htmlurl url="ftp://ftp.mutt.org/pub/mutt/" name="ftp://ftp.mutt.org/pub/mutt/">
 <item>
<htmlurl url="ftp://ftp.guug.de/pub/mutt/" name="ftp://ftp.guug.de/pub/mutt/">
</itemize>
</p><p>
ミラーサイトについては<htmlurl url="http://www.mutt.org/download.html" name="http://www.mutt.org/download.html">を見てください。
</p>
<sect1>
IRC 
<p>
<htmlurl url="http://www.openprojects.net" name="OpenProjects.Net (www.openprojects.net)">のチャンネル <it>&num;mutt</it>で Muttに関する会話を楽しむことができます。
</p>
<sect1>
USENET 
<p>
ニュースグループ <htmlurl url="news:comp.mail.mutt" name="comp.mail.mutt">をみてください。
</p>
<sect1>
Copyright 
<p>
Mutt is Copyright (C) 1996-2000 Michael R. Elkins &lt;me@cs.hmc.edu&gt;
 and others
</p>
<p>
This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as published
 by the Free Software Foundation; either version 2 of the License,
 or (at your option) any later version. 
</p>
<p>
This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 License for more details. 
</p>
<p>
You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place - Suite 330, Boston, MA 02111, USA.
</p>
<p>
このプログラムはフリーソフトウェアです。Free Software Foundation
 による GNU Public License のバージョン 2 もしくは望むならばそれ以降のバージョンに従う限り自由に変更し再配布することができます。
</p>
<p>
このプログラムは役に立つことを願って配布されていますが無保証です。市場性や特定の目的に対する適合性を持つ場合に生じ得る暗黙の保証も含めていっさい保証しません。詳細は
 GNU General Public License をごらん下さい。 GNU General Public Licenseはこのプログラムといっしょに受け取ったはずです。もし持っていないなら、Free
 Software Foudation, Inc. に手紙をだして入手してください。 住所は
 59 Temple Place - Suite 330, Boston, MA 02111, USA です。
</p>
<sect>
さあ始めよう
<p>
このセクションでは Muttの使い方を簡単に説明しています。このセクションで書かれていること以外にも多くの機能があり、マニュアルの他の場所で説明されています。また
 Mutt FAQ や様々な web ページにも多くの情報があります。詳しくは <htmlurl url="http://www.mutt.org/mutt/" name="Mutt Page">を見てください。
</p>
<p>
ここで説明されているキーバインディングはデフォルトのものです。システム管理者があなたのサイトのデフォルトのキーバインドを変えている場合もあります。どのメニューの中にいても「?」を入力すると現在のキーバインドが表示されます。
</p>
<p>
まずはじめにすることはコマンドラインから muttと入力して muttを起動することです。コマンドラインのオプションについては
 muttの manページか <ref id="commandline" name="reference" >を参照してください。
</p>
<sect1>
メニュー内の移動
<p>
情報は ELMと同じようにメニューの中に表示されます。メニュー内の移動によく使われるキーを表にしておきます。
</p>
<p>
<verb>
j or Down       next-entry      次の項目へ移動
k or Up         previous-entry  前の項目へ移動
z or PageDn     page-down       次のページへ行く
Z or PageUp     page-up         前のページに行く
= or Home       first-entry     初めの項目に移動する
* or End        last-entry      最後の項目に移動する
q               quit            このメニューを終了する。
?               help            このメニューのキーバインドを表示する
</verb>
</p><sect1>
入力フィールドを編集する<label id="editing" >
<p>
Muttは e-mail アドレスやファイル名等のような簡単な入力をするためのラインエディタを内蔵しています。編集中のカーソルの移動は
 Emacsに似たものになっています。
</p>
<p>
<verb>
^A or &lt;Home&gt;    bol             行頭に移動する
^B or &lt;Left&gt;    backward-char   1文字戻る
Esc B           backward-word   1語戻る
^D or &lt;Delete&gt;  delete-char     カーソルの下の文字を消す
^E or &lt;End&gt;     eol             行末に移動する
^F or &lt;Right&gt;   forward-char    1文字前に進む
Esc F           forward-word    1語前に進む
&lt;Tab&gt;           complete        ファイル名やエイリアスを補完
^T              complete-query  クエリーによるアドレスの補完
^K              kill-eol        行末まで削除
ESC d           kill-eow        カーソルから単語の最後までを削除
^W              kill-word       カーソルの前の１語を消す
^U              kill-line       一行全部を削除
^V              quote-char      次に入力するキーに引用符をつける
&lt;Up&gt;            history-up      ヒストリーから直前の文字列を取り出す
&lt;Down&gt;          history-down    ヒストリーから次の文字列を取り出す
&lt;BackSpace&gt;     backspace       カーソルの前の文字を消す
Esc u           upcase-word     単語を大文字に変換
Esc l           downcase-word   単語を小文字に変換
Esc c           capitalize-word 単語を大文字ではじめる
^G              n/a             取消
&lt;Return&gt;        n/a             編集の終了
</verb>
</p><p>
<ref id="bind" name="bind" >コマンドを使って編集機能用のキーの割当を変える事ができます。例えば
 Deleteキーでカーソルの下の文字でなくカーソルの前の文字を消すように<tt>したいのなら、次のようにしてください。
</tt>
</p>
<p>
<tt>bind editor &lt;delete&gt; backspace</tt> 
</p>
<sect1>
メールを読む - インデックスとぺージャー
<p>
他のメールクライアントと同じようにメールを読むのに Muttには2つのモードがあります。始めのモードはメールボックスのメッセージの一覧を表示します。これを
 Muttではインデックスと呼んでいます。2番目のモードはメッセージの内容を表示します。これをぺージャーといいます。
</p>
<p>
以下のいくつかのセクションで各々のモードの機能を説明していくことにしましょう。
</p>
<sect2>
メッセージインデックス
<p>
<verb>
c               他のメールボックスへかわる
C               カーソルのあるメッセージを他のメールボックスへコピー
ESC c           フォルダーをリードオンリーモードに変える
ESC C           メッセージをデコードしフォルダーへコピー
ESC s           メッセージをデコードしフォルダーへセーブする
D               パターンにマッチするメッセージに削除マークをつける
d               カーソルのあるメッセージに削除マークをつける
F               重要なメッセージとしてマーク
l               パターンにマッチするメッセージを表示する
N               新しいメッセージとしてマークする
o               ソートの方法を変える
O               メールボックスを逆向けにソートする
q               セーブして終了
s               メッセージのセーブ
T               マッチするパターンのメッセージにタグをつける
t               メッセージのタグのオン、オフのトグル
ESC t           メッセージスレッド全体へのタグのオン、オフ
U               パターンにマッチするメッセージの削除マークを消す
u               メッセージの削除マークを消す
v               添付ファイルを見る
x               セーブせずに終了
&lt;Return&gt;        メッセージを表示
&lt;Tab&gt;           次の新しいメッセージに移動
@               完全な e-mailアドレスの表示
&dollar;               変更をメールボックスへ保存
/               検索
ESC /           逆方向へ検索
^L              画面を消して描き直す
^T               パターンにマッチするメッセージのタグを消す

</verb>
</p><sect3>
状態を表すフラグ
<p>
メッセージの送り主とサブジェクトだけでなく、簡単なメッセージの状態を表すために次のような「フラグ」がメッセージ番号の横に表示されます。
</p>
<p>
<verb>
D       削除された（削除マークのついた）メッセージ
d       削除マークのついた添付ファイルがあるメッセージ
K       PGP公開キーを含むメッセージ
N       新しいメッセージメッセージ
O       古いメッセージ
P       PGPで暗号化されたメッセージ
r       返信済みのメッセージ
S       PGPサインが入り、その署名が確かめられたメッセージ
s       PGPのサインが入ったメッセージ
!       重要であるというフラグがつけられたメッセージ
*       タグがつけられたメッセージ
</verb>
</p><p>
いくつかの状態を表すフラグは次のようにしてオン、オフすることができます。
</p>
<p>
<itemize>
 <item>
<bf>set-flag</bf> (デフォルトでは w) 
 <item>
<bf>clear-flag</bf> (デフォルトでは W)
</itemize>
</p><p>
また次のフラグはメッセージがだれ宛のものかを表します。これは
 <ref id="to_chars" name="$to_chars" >変数によって変更することができます。
</p>
<p>
<verb>
+       メッセージはあなた宛で、他の人には送られていない
T       メッセージはあなた宛だが to または cc で他の人にも送られている
C       メッセージは cc であなたに送られてきた
F       あなたが送ったメッセージ
L       購読しているメーリングリストに送られたメッセージ
</verb>
</p><sect2>
ぺージャー
<p>
デフォルトでは Muttはメッセージの内容を表示するのに内蔵されたぺージャーを使います。このぺージャーは
 Unixプログラムの <em>less</em> に似ていますが、<em>less</em>ほど多機能ではありません。
</p>
<p>
<verb>
&lt;Return&gt;        1行下に移動
&lt;Space&gt;         次のページを表示 (すでにメッセージの終りまで表示している場合は、次のメッセージを表示)
-               前のページに戻る
n               次のマッチするパターンを探す
S               引用文を飛ばす
T               引用文の表示のオン、オフのトグル
?               キーバインドを表示
/               正規表現での検索
ESC /           正規表現で後ろ向けに検索
&bsol;               検索パターンの色付けのトグル
^               メッセージの先頭にジャンプ
&dollar;               メッセージの最後にジャンプ
</verb>
</p><p>
さらに、ページャーはインデックスから多くの機能を引き継いでいます。例えばメールを削除(delete-message)したりメールをコピー(copy-message)したりする機能がそうです(これが外部ページャーではなく内蔵のページャーを使う利点の一つです)。
</p>
<p>
内蔵のページャーにはさらに2つの優れた機能があります。1つ目は内蔵のページャーは
 nroff の太字と下線という標準のシークエンスを理解できることです。太字の場合、文字-バックスペース(^H)-文字、下線つき文字の場合、文字-バックスペース-
 _ 、のシークエンスです。端末がそれらをサポートしていれば Mutt はこれらの文字列をそれぞれ太字と下線つき文字として表示しようとします。もし端末がサポートしていなければ、太字と下線つき文字のシークエンスは色をつける対象となっていますのでカラー端末なら色属性を、白黒端末なら白黒属性をそれぞれ自分でつけることができます(参照:
 <ref id="color" name="color" >色属性と白黒属性 を使う)。
</p>
<p>
もう一つは内蔵ページャーは文字属性に関する ANSI エスケープシークエンスをサポートしていることです。Mutt
 はそれらのシークエンスを正しい色と文字設定に解釈します。Mutt がサポートしているシークエンスは:
</p>
<p>
<verb>
ESC &lsqb; Ps;Ps;Ps;...;Ps m  
Psは Ps=
0    全ての属性を消す 
1    太字にする 
4    下線つきにする 
5    明滅させる 
7    色を反転表示させる 
3x   foreground の色を x にする 
4x   background の色を x にする

色は
0    黒 
1    赤 
2    緑 
3    黄 
4    青 
5    赤紫 
6    青緑 
7    白
</verb>
</p><p>
text/enriched メールを扱うのに Mutt はこれらの属性を使います。またこれらは外部の<ref id="auto_view" name="autoview" >(自動閲覧)スクリプトから色づけの目的で使うこともできます。
</p>
<p>
<bf>注意</bf>: ディスプレイの色を変えていた場合には、その色が代わりに使われます。例えば、color2に関連づけられている色を他の色に変更していた場合はその色が緑の代わりに使われます。
</p>
<sect2>
スレッドモード<label id="threads" >
<p>
メールボックスがスレッドで並べられている（<ref id="sort" name="sorted" >）場合は他にいくつかの機能がインデックスとページャーで利用できます。
</p>
<p>
<verb>
^D      delete-thread        現在のスレッドの全てのメールに削除マークをつける 
^U      undelete-thread      現在のスレッドの全ての削除マークを消す
^N      next-thread          次のスレッドの最初に移動 
^P      previous-thread      前のスレッドの最初に移動 
^R      read-thread          現在のスレッドを既読にする 
ESC d   delete-subthread     サブスレッドのメールを全てに削除マークをつける 
ESC u   undelete-subthread   サブスレッドのメールの削除マークを消す 
ESC n   next-subthread       次のサブスレッドに移動 
ESC p   previous-subthread   前のサブスレッドに移動 
ESC r   read-subthread       サブスレッドに既読のマークをつける 
ESC t   tag-thread           スレッドのタグ付けのオン/オフのトグル 
ESC v   collapse-thread      現在のスレッドを折り畳む/広げるのトグル 
ESC V   collapse-all         すべてのスレッドを折り畳む/広げるのトグル
P       parent-message       スレッドの親メッセージにジャンプする
</verb>
</p><p>
<bf>注意</bf>: スレッドを折り畳むとはスレッドの最初のメールだけ表示して残りのものは隠しておく機能のことです。一つのスレッドに多くのメールが含まれていてスクリーン上にわずかなスレッドしか見えない場合に便利です。<ref id="index_format" name="$index_format" >の設定の
 &percnt;Mを参照して下さい。例えば、<ref id="index_format" name="$index_format" >に &quot;&percnt;?M?(&num;&percnt;03M)&amp;(&percnt;4l)?&quot;を加えることでスレッドが折り畳まれている時に隠れているメールの数を表示
 させることができます。
</p>
<p>
参照: <ref id="strict_threads" name="$strict_threads" >
</p>
<sect2>
色々な機能
<p>
<bf>エイリアスの作成 / create-alias</bf><label id="create-alias" > (default: a) 
</p>
<p>
現在のメールをもとに新しいエイリアスを作成します(メールを選択してなければどのようなエイリアスを作成するかのプロンプトを表示します)。編集を終えると、いま設定した<ref id="alias" name="alias" >が後々使えるように
 <ref id="alias_file" name="$alias_file" > で指定したファイルに加えられます。<em>注意</em>: <ref id="alias_file" name="$alias_file" > を指定するだけではそこに書かれているエイリアスはエイリアスとして機能しません。<ref id="source" name="source" >
 コマンドを実行してそのファイルを読み込む必要があります。
</p>
<p>
<bf>古い方法の pgpのチェック/check-traditional-pgp</bf><label id="check-traditional-pgp" > (default: ESC
 P) 
</p>
<p>
これは読んでいるメッセージの中に正しく MIMEタグを使っていない古い方法で
 PGPを使って署名または暗号化された内容がないかどうかを調べます。技術的には
 PGPデータを含んだボディーパートの MIME content typeを一時的に変えます。
 <ref id="edit-type" name="edit-type" >機能の効果と似ています。
</p>
<p>
<bf>へッダの表示 / display-toggle-weed</bf><label id="display-toggle-weed" > (default: h) 
</p>
<p>
<ref id="ignore" name="ignore" > コマンドで指定された余分なヘッダーフィールドの表示のオン/オフ
 のトグルです。
</p>
<p>
<bf>メッセージの編集 / edit</bf><label id="edit" > (default: e) 
</p>
<p>
このコマンドは現在のメールを編集するコマンドでインデックス(index)とページャー(pager)で使うことができます。編集を終えると変更されたメールが現在いるフォルダに付け加えられ、もとのメールに削除マークがつきます。
</p>
<p>
<bf>添付ファイルの typeの編集/edit-type</bf><label id="edit-type" >(default: 添付メニュー、ぺージャー、インデックスメニューでは^E、
 メール作成(compose)メニューでは ^T) 
</p>
<p>
このコマンドは添付する物の content type を一時的に編集するのに使います。インデックスかぺージャーからこのコマンドを使うとトップレベルの
 content typeを変えることができます。また <ref id="attach_menu" name="attachment menu" >からこのコマンドを使うとすべての添付物の
 content typeを編集できます。ただし、これらの編集の効果は永続的ではなくフォルダーを変えると失われます。
</p>
<p>
このコマンドは <ref id="compose_menu" name="compose menu" >でも使うことができます。メッセージを送信するときに添付ファイルの性質を調整するのに使ってください。
</p>
<p>
<bf>コマンドの入力 / enter-command</bf><label id="enter-command" > (default: ``:'') 
</p>
<p>
このコマンドは通常は設定ファイルの中で使うコマンドを実行するのに使います。これは設定している値のチェックに使ったり、<ref id="macro" name="macros" >を使って設定をすぐに変更するのに便利です。
</p>
<p>
<bf>PGP公開鍵を取り出す / extract-keys</bf><label id="extract-keys" > (default: ^K) 
</p>
<p>
このコマンドは現在のメールもしくはタグ付けされたメールから PGP公開鍵を取り出し、それらをPGP公開鍵リングに加えるコマンドです。
</p>
<p>
<bf>パスフレーズをメモリ上から消去 / forget-passphrase</bf><label id="forget-passphrase" > (default:
 ^F)  
</p>
<p>
このコマンドは PGP パスフレーズをメモリ上から消去します。パスフレーズを書き間違えた場合などに便利です。
</p>
<p>
<bf>メーリングリストに返信 / list-reply</bf><label id="list-reply" > (default: L) 
</p>
<p>
現在のメールもしくはタグ付けつけされたメールに返信する際に <ref id="lists" name="lists or subscribe" >コマンドで指定されているアドレスにマッチするアドレスを取り出して返信するコマンドです。それだけではなく、もし
 <ref id="honor_followup_to" name="$honor_followup_to" >変数が設定されていたら <tt>Mail-Followup-To</tt>へッダが付け加えられます。メーリングリストに送信されているメールに返信する時にこのコマンドを使うことでメーリングリストと差出人に二重に送信するのを避けるのに使うことができます。
</p>
<p>
<bf>パイプ / pipe-message</bf><label id="pipe-message" > (default: |) 
</p>
<p>
外部から Unix のコマンドを呼び出し、現在のメールもしくはタグ付けつけされた
 メールをパイプに通します。<ref id="pipe_decode" name="$pipe_decode" >、<ref id="pipe_split" name="$pipe_split" >、<ref id="pipe_sep" name="$pipe_sep" >、<ref id="wait_key" name="$wait_key" >変数がこの機能の動作をコントロールします。
</p>
<p>
<bf>メッセージの再送 / resend-message</bf><label id="resend-message" > (default: ESC e) 
</p>
<p>
これを使うと mutt は現在のメッセージを新しいメッセージのテンプレートにします。つまりこれは任意のディレクトリからの転送を可能にします。この機能はもとのメールの構造を壊すことなく、MIMEメッセージを転送するのに便利です。これに含まれるへッダーの量は<ref id="weed" name="$weed" >変数に依存します。
</p>
<p>
この機能は添付メニューからも使えます。これを使えば簡単に message/rfc822
 body part として来たメッセージを再送できます。
</p>
<p>
<bf>シェルコマンドの実行 / shell-escape</bf><label id="shell-escape" > (default: !) 
</p>
<p>
外部の UNIX コマンドを呼び出し実行します。<ref id="wait_key" name="$wait_key" > でコマンドから復帰した時に
 Muttが(コマンドの出力をユーザーが読めるように)なんらかのキーが押されるのを待つかどうかをコマンドの戻り値によってコントロールできます。
</p>
<p>
<bf>引用部分を表示するかどうかのトグル / toggle-quoted</bf><label id="toggle-quoted" > (default:
 T) 
</p>
<p>
ページャーは <ref id="quote_regexp" name="$quote_regexp" >変数を使ってメールの本文を表示する時に引用部分を判断します。この機能はメールの引用部分を表示するかどうかのトグルです。返事の部分だけに興味があったり大量の引用があったりするときに役に立ちます。
</p>
<p>
<bf>引用部分をスキップ / skip-quoted</bf><label id="skip-quoted" > (default: S) 
</p>
<p>
この機能は引用されていないテキストの次の行に移動します、つまり内部ページャーで引用行と判断されるテキストをスキップするコマンドです。
</p>
<sect1>
メールを送る
<p>
次のコマンドはメールを送信する時にインデックスで利用できるコマンドです。
</p>
<p>
<verb>
m       compose      新しいメールを作成する。 
r       reply        送信者に返信する。 
g       group-reply  受信者全員に返信する。 
L       list-reply   メーリングリストのアドレスに返信する。 
f       forward      転送する。 
b       bounce       中継する。(bounce (remail) message) 
ESC k   mail-key     PGP 公開鍵を送る。
</verb>
</p><p>
メールの中継はメールをそのままの形で誰かに送り直すものです。メールの転送はコメントを加えたりなんらかの変更を加えて誰かに送り直すものです。これらに関しては次の節<ref id="forwarding_mail" name="``Forwarding and Bouncing Mail''" >「メールの転送と中継」で詳しく説明します。
</p>
<p>
Mutt はメール作成メニュー(compose menu)を表示し、受信者を To:
 ヘッダ ーフィールドに入力するように促します。次に Mutt は Subject:
 フィールドを入力するように要求します。この時、返信か転送を行おうとしていた場合はデフォルトの
 Subjectを入れます。Muttがこれらの質問をどのようにたずねるかを変えるには
 <ref id="askcc" name="$askcc" >、<ref id="askbcc" name="$askbcc" >、<ref id="autoedit" name="$autoedit" >、 <ref id="fast_reply" name="$fast_reply" >を参照してください。
</p>
<p>
それから Mutt はメールの本文を編集するために <ref id="editor" name="$editor" >で指定されたエディタを起動します。この時
 <ref id="edit_headers" name="$edit_headers" >変数が指定されていれば、エディタの上の方にヘッダーを表示し編集可能にします。メールに返信しようとしている場合はもとのメールをもとの順どおりに取り込み、<ref id="attribution" name="$attribution" >、
 <ref id="indent_string" name="$indent_string" >、<ref id="post_indent_string" name="$post_indent_string" >変数に従い適切に整形します。メールを転送する場合に <ref id="mime_forward" name="$mime_forward" >変数がセットされていなければもとのメールのコピーを本文に取り込みます。また
 <ref id="signature" name="$signature" > を指定していればそれも添えられます。
</p>
<p>
いったんメールの本文の編集を終えると再びメール作成メニュー(compose
 menu) に戻ります。ここでは次の操作が可能になります:
</p>
<p>
<verb>
a      attach-file          ファイルを添付する。 
A      attach-message       メールにメールを添付する。 
ESC k  attach-key           公開鍵を添付する。 
d      edit-description     添付ファイルの descriptionを記述します。 
D      detach-file          添付ファイルを削除します。 
t      edit-to              To フィールドを編集し直します。 
ESC f   edit-from           From フィールドを編集し直します。
r       edit-reply-to       Reply-To フィールドを編集し直します。
c      edit-cc              Cc フィールドを編集し直します。 
b      edit-bcc             Bccフィールドを編集し直します。 
y      send-message         メールを送信します。 
s      edit-subject         Subject を編集し直します。 
f      edit-fcc             Fcc するメールボックスを指定します。 
p      pgp-menu             PGP のオプションを選択します(i バージョンのみ) 
P      postpone-message     メールを送信するのを延期します。 
q      quit                 メールを送信するのを中断します。 
w      write-fcc            メールをフォルダーに書き込む 
i      ispell               スペルチェックを行います。(ispellがある場合のみ) 
^F     forget-passphrase    メモリ上から PGP パスフレーズを消去します。
</verb>
</p><p>
<bf>注意</bf>: メールを添付する機能を使うと添付しようとするメールがあるフォルダーを選択するようにプロンプトが表示されます。そこのフォルダーで添付しようとするメールにタグをつけることができます。このフォルダーにいる間は新しくメールを起稿したりメールに返信したり、メールを転送したりするような操作ができないということに注意してください。<ref id="status_format" name="$status_format" >
 変数に &percnt;rが含ま れていればそれが 'A'に変わっていまメール添付モードにいるのがわかるよう
 になっています。
</p>
<sect2>
メールのヘッダーを編集する。
<p>
送信するメールのヘッダーを編集する場合、いくつかの特別な機能を利用することができます。
</p>
<p>
もし Fcc: filename を指定していれば Mutt はメール作成メニュー(compose
 menu)で edit-fccコマ ンドを使った場合と同じように扱います。
</p>
<p>
またファイルを添付する場合、次のようにすることもできます。Attach:
 <em>filename</em> &lsqb; <em>description</em> &rsqb; ここで <em>filename</em>は添付するファイルの名前で、<em>description</em>はファイルの種類で、省略することが可能です。
</p>
<p>
あるメールに返信しようとしている時に <em>In-Reply-To:</em> フィールドを削除すれば
 Mutt は <em>Reference:</em> フィールドを作成するのを中止するので新規のメー
 ルとして(スレッドを切って)送り出すことができます。
</p>
<p>
<ref id="edit_headers" name="edit_headers" > も見てください。
</p>
<sect2>
PGPといっしょに使う
<p>
PGPを使いたい場合は 
</p>
<p>
<tt>Pgp:</tt> &lsqb; <tt>E</tt> | <tt>S</tt> | <tt>S&lt;id</tt>&gt; &rsqb; 
を設定してください。「E」は暗号化、「S」は署名、「S&lt;id&gt;」はあらかじめ
 <ref id="pgp_sign_as" name="$pgp_sign_as" >で設定しておいた鍵で署名します。
</p>
<p>
メールの暗号化を選んだ場合には、メールを送るときに鍵を選択するプロセスに入ります。メールの受取り手のメールアドレスに対応する保証付きのユーザー
 IDがある場合には mutt は何も質問せずにそれを使います。しかしメールアドレスに対応した鍵がいくつもある場合や、信用度が低い場合、メールアドレスに対応する鍵が無い場合があります。
</p>
<p>
そういう場合には、鍵のリストが表示された鍵を選択するメニューになります。そのメニューを終わるときや、muttが対応する鍵を見つけられない場合には、ユーザー
 IDを入力するように求められます。このプロンプトは他の場合と同じように
 <tt>G</tt>を使って中止することができます。中止した場合にはメール作成メニュー
 (compose menu) に戻ります。
</p>
<p>
鍵をちゃんと選ぶと、メッセージは選んだ公開鍵を使って暗号化され送信されます。
</p>
<p>
鍵選択メニューのほとんどの項目は自明でしょう（<ref id="pgp_entry_format" name="$pgp_entry_format" >も参照してください）。ここでは
 flags、capabilities、validityのフィールドを説明しておきましょう。
</p>
<p>
&percnt;fは以下のフラグのうちのどれかに展開されます。
</p>
<p>
<verb>
R   破棄され使うことができない鍵
X   有効期限が切れ使うことのできない鍵
d   自分で使用不可のマークをつけた鍵
c   未知の重要な自己署名パケットが存在
</verb>
</p><p>
2つの文字に展開される capabilities フィールド (&percnt;c) は鍵の能力を表しています。１つめの文字は暗号化能力を表します。マイナス(-)の場合は暗号化に使えないことを意味します。ドット(.)は証明に使えるが暗号化にも使えることを意味します。eは暗号化に使えることを意味します。
</p>
<p>
2つめの文字は鍵の署名能力を表しています。マイナス(-)の場合は署名に使えないことを意味します。ドット(.)はあるユーザー
 IDに暗号化するための鍵であることを示しています。s は署名に使えることを意味します。
</p>
<p>
最後に、validity フィールド (&percnt;t)は鍵の信用度を表しています。クエスチョンマーク(?)は信用度が定義されていないことを、マイナス(-)は信用できない保証を、スペース文字は部分的に信用できる保証を、プラス(+)は完全な信用度を表しています。
</p>
<sect2>
mixmasterを使った匿名メッセージの送信
<p>
muttを Mixmasterといっしょに使うように設定することもできます。Mixmasterは匿名リメイラ(remailer)です。Mixmasterはいくつかのリメイラを通して使うことでメッセージの発信元を隠してメッセージを送ることができます。muttでサポートしているのは
 mixmaster version 2.04 （beta 45 が最新のようです）と 2.03です。これ以前のバージョンと
 version 3 beta と呼ばれるもの（最新のものは 2.9b23）はサポートしていません。
</p>
<p>
Mixmasterを使うにはいくつかの制限があります。一番重要なのは、Ccと
 Bccへッダを使うことができないということです。Muttから mixmasterを使うには、まずメール作成メニューの
 max機能を使って一連のリメイラを選ぶ必要があります。
</p>
<p>
この一連のリメイラを選ぶ画面は2つの部分に分かれています。大きな上の部分は使うことのできるリメイラのリストを表示します。下の部分に今選ばれている一連のリメイラが表示されます。
</p>
<p>
この選ばれている一連のリメイラの鎖の中を <tt>chain-prev</tt>関数と <tt>chain-next</tt>関数を使って移動できます。この関数はデフォルトでは左と右の矢印キーと
 <tt>h</tt>と <tt>l</tt>キーに割り当てられています（viのキーバインドを考えてください）。新しいリメイラを鎖の中のカーソルのある位置に挿入するには、<tt>insert</tt>関数を使ってください。リメイラをカーソルの後ろに付け加えるには
 <tt>select-entry</tt>または <tt>append</tt>を使ってください。対応する関数を使って鎖の中のリメイラを消すこともできます。最後にリメイラの鎖の編集を終わるにはメニューを終えるか
 <tt>accept</tt>を選んでそれから（デフォルトでは）リターンキーを押してください。
</p>
<p>
リメイラによって能力が異なることに注意してください。それはリメイラメニューの
 &percnt;cの項目で表示されています（<ref id="mix_entry_format" name="$mix_entry_format" >を参照してください）。一番重要なのは大文字の
 M で表示される middlemanの能力です。これはそのリメイラが他の mixmasterリメイラにメッセージを送ることはできるが、リメイラの鎖の一番最後にはなれないことを意味しています。他の能力については、mixmasterのマニュアルを見てください。
</p>
<sect1>
メールの転送と中継<label id="forwarding_mail" >
<p>
メールの転送と中継を使うことでいま持っているメールをほかの受信者に送ることができます。メールの中継は
 <ref id="sendmail" name="sendmail" > コマンドを利用して、そのメールのコピーを送ろうとしようとしている相手があたかも元々の受信者であるかのようにして送ります。メールの転送はそれとは対照的に再度送信する前にメールに変更を加えて送ることができます(例えばコメントを加えるなど)。
</p>
<p>
次のキーが初期値として割り当てられています:
</p>
<p>
<verb>
f       forward         メールを転送する 
b       bounce          メールを中継する
</verb>
</p><p>
メールの転送はオリジナルのメールを(それとわかるように示す行で囲んで)新しいメールの本文に含めるか、もしくは
 MIME 添付ファイルとして含めることができ <ref id="mime_forward" name="$mime_forward" >変数の値でコントロールします。添付ファイルのデコードは(ページャーのように)、<ref id="forward_decode" name="$forward_decode" >変数と
 <ref id="mime_forward_decode" name="$mime_forward_decode" > 変数の値にそれぞれ依存しています。どちらの転送方法がよいかは転送しようとするメールの内容によります。そのため
 &dollar;mime_forward変数は quadoptionになっています、つまり ask-noという風に設定することができます。
</p>
<p>
へッダを含めるかどうかは <ref id="mime_forward" name="mime_forward" >が設定されていない限り、<ref id="weed" name="$weed" >の設定によってコントロールされます。
</p>
<p>
転送するメールの編集はメールを新たに送信したり返信したりする手続きと同じです。
</p>
<sect1>
メールの送信を延期する<label id="postponing_mail" >
<p>
すでに書き始めたメールを後で送りたい場合が時々あります。こういう場合に
 postpone-message機能をメール作成メニュー(compose menu)で使うと、メールの本文と添付ファイルは
 <ref id="postponed" name="$postponed" >変数で指定されたメールボックスに保存されます。こうすることでいったん
 Mutt を終了した後でももう一度そのメールを呼び出して編集することができるようになります。
</p>
<p>
いったんメールの送信が延期され &dollar;postponed 変数で指定されたメールボックスに保存された場合、そのメールを呼び出すにはいくつかの方法があります。コマンドラインからは
 -pオプションをつけて Muttを起動してください。またインデックスもしくはページャーで新規のメールを作成しようとすると延期したメールがある場合それを使うかどうか
 Muttが尋ねてきます。延期したメールが複数ある場合はどのメールの編集を再開するか選択できます。
</p>
<p>
<bf>注意</bf>: 返信のメールを延期したならば返信済のマーク(r)はそのメールの編集を終えて実際に送信した時につきます。また返信済のマークがきちんとつくように延期した返信のメールを送信する時は前にいたフォルダーと同一のフォルダーにいなければなりません。
</p>
<p>
<ref id="postpone" name="$postpone" > もご覧下さい。
</p>
<sect>
設定
<p>
Mutt を最適に利用できるように初期設定(選択)はなされていますが、自分の好みにあわせて設定ファイルを書き直した方がよい場合も多いでしょう。Muttを初めて起動したとき、
 -n <ref id="commandline" name="command line" >コマンドラインオプションが指定されていなければ、Muttはシステムで設定されている設定ファイルを読みにいこうとします(初期のファイルの場所はシステム管理者が指定しています)。普通この設定ファイルは
 /usr/local/share/mutt/Muttrc か /etc/Muttrcです。次に Muttはホームディレクトリーにある
 .muttrc というファイルを探しにいきます。もしこのファイルがなくてホームディレクトリーに
 .muttというサブディレクトリーがあれば .mutt/muttrc を読み込みに行こうとします。
</p>
<p>
.muttrc に<ref id="commands" name="commands" >コマンドを書き込んで Muttをユーザー独自の設定にします。
</p>
<p>
また Mutt はバージョン毎の設定ファイルを指定することができ、それを指定していた場合は上に述べた初期の設定ファイルではなくそのファイルを読み込みます。例えば
 Muttrc-0.88というファイルがシステムで設定されているディレクトリーにあって、Mutt
 のヴァージョン 0.88 を使っている場合、 Muttrc ではなくそのファイルが読み込まれます。ユーザー独自の設定ファイルに関しても同様で、ホームディレクトリーに
 .muttrc-0.88.6 というファイルをおいてバージョン 0.88.6の Mutt を走らせた場合、このファイルが
 .muttrc の代わりに読み込まれます。いま使っている Mutt がどのバージョンのものかはコマンドラインオプションで
 -v を指定するか、インデックスメニューでバー ジョンを確認する show-versionキー(初期値:
 V)を押すことで確認できます。
</p>
<sect1>
初期化ファイルの構文<label id="muttrc-syntax" >
<p>
初期化ファイルは一連のコマンドで構成され、それぞれの行は一つ以上のコマンドを含みます。一つの行に複数のコマンドを記入する場合はセミコロン(;)
 でコマンドを区切らなければなりません。
</p>
<p>
<verb>
set realname='Mutt user' ; ignore x-  
</verb>
</p><p>
ハッシュマーク、またはポンド記号( &num; )、はコメント記号として使われます。コメント記号から行の最後まではコメントとして無視されますので初期化ファイルに注釈を付けたい場合に利用できます。例えば、
</p>
<p>
<verb>
my_hdr X-Disclaimer: Why are you listening to me? &num; This is a comment  
</verb>
</p><p>
シングル引用符(')とダブル引用符(&quot;)はスペースなどの特殊な文字を含む文字列をくくるのに使います。二つの引用符の違いは多くの一般的なシェルプログラミングにおけるそれらの違いと似ています。つまり、シングル引用符が用いられた場合その中の文字列はその文字の字義のままになります(シェル変数の展開もされませんしバックスラッシュによるエスケープ&lsqb;次のパラグラフを参照&rsqb;も受けません)。一方、ダブル引用符の中の文字列はその中の文字が特殊な文字として解釈されうる場合があります。例えば、バック引用符はダブル引用符の中では解釈されますがシングル引用符の中では解釈されません。
</p>
<p>
&bsol; は、bash や zsh でそうであるように、次に来る特殊な文字を解釈されないようにエスケープします。例えばダブル引用符(&quot;)を解釈され得る特殊な文字としてではなく字義通りの意味で文字列の中で使いたい場合、
 &bsol; を使うことが できます。
</p>
<p>
<verb>
set realname=&quot;Michael &bsol;&quot;MuttDude&bsol;&quot; Elkins&quot;  
</verb>
</p><p>
&bsol; そのものを行に挿入するには &bsol;&bsol; とします。 &bsol;n
 と &bsol;r は C で持つ意味と同じで改行と復帰をそれぞれ意味します。
</p>
<p>
行末に &bsol; を置くことでコマンドを複数の行に分けて書くことができます。ただしコマンド名の途中でわけることは許されません。
</p>
<p>
初期化ファイルの中で Unix のコマンドをバック引用符(`)でくくることにより
 Unix の出力に置き換えるようにすることもできます。例えば次のようにします。
</p>
<p>
<verb>
my_hdr X-Operating-System: `uname -a`  
</verb>
</p><p>
行が解釈される前に uname -a という Unix のコマンドの出力に置き換えられます。初期化ファイルは行指向であるため
 Unix コマンドの出力は最初の行しか置き換えられないということに注意して下さい。
</p>
<p>
UNIX の環境には sh や bashのようなシェルと似た方法でアクセスすることができます。環境変数名の前に
 &quot;&dollar;&quot;を前置するのです。例えば、次のように使ってください、
</p>
<p>
<verb>
set record=+sent_on_&dollar;HOSTNAME  
</verb>
</p><p>
Muttが解釈できるコマンドは次のセクションから説明されています。コマンドの完全なリストは
 <ref id="commands" name="command reference" >を見てください。
</p>
<sect1>
エイリアスを定義/使用する<label id="alias" >
<p>
使い方: <tt>alias </tt><tt><em>key address</em> &lsqb; , </tt><tt><em>address</em>, ... &rsqb;</tt>
</p>
<p>
メールをやりとるする相手のメールアドレスを覚えておいたりタイプしたりするのは普通とても面倒です。Muttでは完全なメールアドレスの略記としてエイリアスを作成することができます。
</p>
<p>
<bf>注意</bf>: エイリアスをグループ(複数のメールアドレスを指定)に対して作成したい場合はそのアドレスをコンマ(
 , )で区切らなければなりません。
</p>
<p>
エイリアスを削除するには、
</p>
<p>
<tt>unalias</tt> &lsqb; * | <it>key</it> <it>...</it> &rsqb; 
を使ってください (*はすべてのエイリアスという意味です)。
</p>
<p>
<verb>
alias muttdude me@cs.hmc.edu (Michael Elkins)  
alias theguys manny, moe, jack 
</verb>
</p><p>
他のメーラーとは違い Mutt はエイリアスを特別のファイルに定義する必要はありません。エイリアスコマンドはそのファイルが読み込まれる(<ref id="source" name="sourced" >を参照)ならば設定ファイルの中のどこにあってもいいのです。従って、複数のエイリアスファイルを持つこともすべて
 muttrc の 中に定義することもできます。
</p>
<p>
一方、 <ref id="create-alias" name="create-alias" > という機能で扱えるファイルは <ref id="alias_file" name="$alias_file" >変数で指定される(初期の状態で
 &tilde;/.muttrc)ファイルのみです。Mutt はどのファイルにたいしてもうまくエイリアスを追加できるという意味ではこのファイルは特別なファイルではありませんが、新しいエイリアスを機能させるにはこのファイル
 を <ref id="source" name="source" > コマンドで読み込む必要があります。
</p>
<p>
例えば:
</p>
<p>
<verb>
source /usr/local/share/Mutt.aliases  
source &tilde;/.mail_aliases 
set alias_file=&tilde;/.mail_aliases 
</verb>
</p><p>
エイリアスを使うには <em>To:</em> や <em>Cc:</em> など Mutt がメールアドレスの入力を要求するところで作成したエイリアスを入力するだけです。またヘッダーを編集可能なように
 <ref id="edit_headers" name="$edit_headers" >変数をセットしている場合は適切なヘッダーに対してエイリアスを使うことができます。
</p>
<p>
さらに、メールアドレスを入力する様々な場面で TABキーを押すことで書きかけのエイリアスを完全なエイリアスに補完することができます。いくつかのエイリアスにマッチした場合マッチしたエイリアスを選択するメニューを表示します。エイリアスの完全なリストを表示させるには書きかけのエイリアスが無い状態で
 TABキーを押さなければなりません、つまり未入力の状態や複数のメールアドレスに対するエイリアスの場合はコンマの後などで
 TAB キーを押すのです。
</p>
<p>
エイリアス選択メニューでは select-entryキー(初期値: RET)を押すことで好きなだけ選択することができます。選択メニューを抜けてメールアドレスの入力に戻るには
 exitキー(初期値: q)を押します。
</p>
<sect1>
デフォルトのキーバインディングを変更する<label id="bind" >
<p>
使い方: <tt>bind </tt><tt><it>map</it> </tt><tt><it>key</it> </tt><tt><it>function</it></tt></tt></it> 
</p>
<p>
このコマンドは初期のキーバインディングを変更するコマンドです(キーを押した時に機能します)。
</p>
<p>
<em>map</em> はどのメニューに対するキーバインディングなのかを指定します。今のところ定義されている
 <em>map</em> は、
</p>
<p>
<itemize>
 <item>
generic 
 <item>
alias 
 <item>
attach 
 <item>
browser 
 <item>
editor 
 <item>
index 
 <item>
compose 
 <item>
pager 
 <item>
pgp 
 <item>
postpone 
</itemize>
</p><p>
です。
</p>
<p>
<em>key</em> はバインドしたいキー(または一続きのキー)です。コントロール文字を指定したい場合は
 &bsol;Cx という一連のキーを用います。ここで x はコントロールキーを押しながら入力する文字です(例えば
 Control-A を指定したい場合は &bsol;Ca とし ます)。x と &bsol;C が大文字であるか小文字であるかは無視されます、つまり&bsol;CA、
 &bsol;Ca、 &bsol;cA、&bsol;ca はすべて同じものを意味します。もう一つの方法は
 &bsol; を前 に置いた三桁の8進数で指定することで可能になります(例えば
 &bsol;177は &bsol;c?と同 じ意味です)。
</p>
<p>
また次のものも使うことができます:
</p>
<p>
<verb>
&bsol;t              tab  
&lt;tab&gt;           tab 
 &bsol;r             carriage return 
 &bsol;n             newline 
 &bsol;e             escape 
&lt;esc&gt;           escape 
&lt;up&gt;            up arrow 
&lt;down&gt;          down arrow 
&lt;left&gt;          left arrow 
&lt;right&gt;         right arrow 
&lt;pageup&gt;        Page Up 
&lt;pagedown&gt;      Page Down 
&lt;backspace&gt;     Backspace 
&lt;delete&gt;        Delete 
&lt;insert&gt;        Insert 
&lt;enter&gt;         Enter 
&lt;return&gt;        Return 
&lt;home&gt;          Home 
&lt;end&gt;           End 
&lt;space&gt;         Space bar 
&lt;f1&gt;            function key 1 
&lt;f10&gt;           function key 10 
</verb>
</p><p>
<em>key</em> はスペースを含まない限り引用符でくくる必要はありません。
</p>
<p>
<em>function</em> で <em>key</em> が押された時にどのような動作をするかを指定します。function
 の完全なリストは <ref id="functions" name="reference" > を参照して下さい。noop は特殊な functionでキー(一連のキー)へのバインドを外します。
</p>
<sect1>
文字セットのエイリアスを定義する <label id="charset-hook" >
<p>
使い方: <tt>charset-hook</tt> <it>alias</it> <it>charset</it> 
</p>
<p>
使い方: <tt>iconv-hook</tt> <it>charset</it> <it>local-charset</it> 
</p>
<p>
<tt>charset-hook</tt> コマンドは文字セットのエイリアスを定義します。これは
 muttが知らない文字セットを使っているメッセージを正しく表示するのに便利です。
</p>
<p>
<tt>iconv-hook</tt>コマンドは文字セットにシステム特有の名前を定義します。この機能はあなたのシステムの文字変換ライブラリが文字セットに変わったシステム特有の名前を使っている場合に便利です。
</p>
<sect1>
メールボックスに関係する変数の設定<label id="folder-hook" >
<p>
使い方: <tt>folder-hook &lsqb;!&rsqb;</tt><tt><it>regexp</it> </tt><tt><it>command</it></tt></tt></it> 
</p>
<p>
メールボックスによって設定を変更したい場合が多くあります。folder-hookコマンドを使うことで特定のメールボックスに対して設定コマンドを実行できます。<em>regexp</em>は
 commandを実行するメールボックスを指定する正規表現で、<em>command</em> はメールボックスを読み込む前に実行されます。一つのメールボックスに対していくつかの
 folder-hook がマッチした場合は muttrc に書いてある順に実行されます。
</p>
<p>
<bf>注意</bf>: <ref id="spoolfile" name="$spoolfile" >へのショートカットとして ! を pattern の最初に使いたい場合、正規表現の
 not 演算子と区別するためにダブルもしくはシングル引用符でくくらなければなりません。
</p>
<p>
メールボックスを離れた時に元の設定に戻るわけではないということに注意して下さい。例えば、読み込むメールボックスの並べ方を変更するためのコマンドの例として次のようなものがありますが:
</p>
<p>
<verb>
folder-hook mutt set sort=threads  
</verb>
</p><p>
別のメールボックスに移ったからといって前の並べ方にもどるわけではありません。default
 のコマンドを指定するには 「.」 というパターンを用いて下さい:
</p>
<p>
<verb>
folder-hook . set sort=date-sent  
</verb>
</p><sect1>
キーボードマクロ<label id="macro" >
<p>
使い方: <tt>macro </tt><tt><it>menu</it> </tt><tt><it>key</it> </tt><tt><it>sequence</it> &lsqb; </tt><tt><it>description</it> &rsqb;</tt> 
</p>
<p>
一連のアクションを一つのキーで実行したい時にマクロは便利です。ある
 <em>menu</em> で <em>key</em> を押した場合、Mutt は <em>sequence</em> を続けざまに押した時と同じように振舞います。ですから、共通して使う一連のコマンドがある場合、マクロを作成すると一つのキーでそれらのコマンドを実行できるようになります。
</p>
<p>
<em>key</em> と <em>sequence</em> はキーバインディングにおけるルール(<ref id="bind" name="key bindings" >)と基本的に同じルールで展開されますが、次のルールが追加されています。<em>sequence</em>
 においてコントロールキャラクターを入力するのに ^x という形も使うことができます。カレット(
 ^ )を入力するには ^^ と入力する必要があります。2番目はある種のキー、例えば
 Up、や関数を <it>&lt;key name&gt;</it>と <it>&lt;function name&gt;</it>というフォーマットを使って直接呼び出すことができることです。使うことのできるキーの名前は
 <ref id="bind" name="key bindings" >を参照してください。また関数は<ref id="functions" name="function reference" >に一覧表があります。
</p>
<p>
関数名を直接使う場合のメリットはマクロが現在のキーバインドに影響されないことです。したがってユーザーがどのようにキーを定義しているかに依存しません。これによってマクロがより環境に影響されにくくなり可搬性が高まります。またこれを使うことによって何人もの人が使うファイル（例えばシステム全体の
 Muttrc）の中でマクロを定義できます。
</p>
<p>
オプションとして一連のコマンドの後ろにヘルプスクリーンに表示される説明文を指定することができます。
</p>
<p>
<bf>注意</bf>: ヘルプ画面に表示されるマクロ定義は画面の広さにあわせて折り返して表示するということありません。つまり、スクリーンの広さ分しか表示されませ
 ん。
</p>
<sect1>
色属性と白黒属性を使う<label id="color" >
<p>
使い方: <tt>color </tt><tt><it>object</it> </tt><tt><it>foreground</it> </tt><tt><it>background</it> &lsqb; </tt><tt><it>regexp</it> &rsqb;</tt>
 
</p>
<p>
使い方: <tt>color index </tt><tt><it>foreground</it> </tt><tt><it>background</it> </tt><tt><it>pattern</it></tt></tt></it> 
</p>
<p>
使い方: <tt>uncolor index </tt><tt><it>pattern</it> &lsqb; </tt><tt><it>pattern</it> ...  &rsqb;</tt> 
</p>
<p>
端末がカラー表示をサポートしていれば、Muttを独自の色構成にすることで見ためをちょっと派手にすることができます。objectの色を定義するには
 foregroundの色と backgroundの色の両方を定義しなければなりません(片方だけを定義することはできません)。
</p>
<p>
<em>object</em> は次の内のどれかです:
</p>
<p>
<itemize>
 <item>
attachment
 <item>
body (regexp にマッチするメールの本文)
 <item>
bold (メールの本文の太字シークエンス)
 <item>
error (Mutt が出力するエラーメッセージ)
 <item>
header (regexp にマッチするメールのヘッダー)
 <item>
hdrdefault (pager におけるメールのヘッダーのデフォルトの色)
 <item>
index (メールインデックスにおける pattern にマッチします)
 <item>
indicator (メニューで現在のアイテムを指し示す矢印もしくはバー)
 <item>
markers (ページャーで折り返された行の最初に表示される + マーク)
 <item>
message
 <item>
normal
 <item>
quoted (メールの本文で &dollar;quote_regexp にマッチする部分)
 <item>
quoted1, quoted2, ... quotedN
 <item>
search
 <item>
signature
 <item>
status (メールボックスやメールに関するモードに関する情報を示す行)
 <item>
tilde (ページャーにおいて空行を示すのに使われる <tt>&tilde;</tt> )
 <item>
tree (インデックスとファイル添付メニューで描かれるスレッドツリー)
 <item>
underline (メールの本文の下線つき文字のシークエンス)
</itemize>
</p><p>
<em>foreground</em>と <em>background</em>は次の内のどれかです:
</p>
<p>
<itemize>
 <item>
white 
 <item>
black 
 <item>
green 
 <item>
magenta 
 <item>
blue 
 <item>
cyan 
 <item>
yellow 
 <item>
red 
 <item>
default 
 <item>
color<it>x</it> 
</itemize>
</p><p>
<em>foreground</em> に関しては先頭に bright という接頭辞を付けることにより太字にすることもできます(例えば、brightred)。
</p>
<p>
端末がサポートしていれば、基本色として default という特別な色を指定することができます。また
 brightdefault という書き方も正しい書き方です。Mutt が S-Lang ライブラリーにリンクされている場合、さらに
 COLORFGBG変数を端末の基本色として設定しておく必要があります。例えば(Bourne-like
 shells の場合):
</p>
<p>
<verb>
set COLORFGBG=&quot;green;black&quot;  
export COLORFGBG 
</verb>
</p><p>
<bf>注意</bf>: この変数を設定するときに S-Lang ライブラリーは white と
 yellow の代わりに lightgray と brown をキーワードとして使うことを要求します。
</p>
<p>
<bf>注意</bf>: uncolorコマンドは色の登録を解除するコマンドで indexの objectに関してのみ使うことができます。このコマンドを使うとき
 colorコマンドで指定したパターンと同一のパターンを指定しなければなりません。
 * という特別なパターンは indexに関する色指定をすべてまとめて解除します。
</p>
<p>
また Mutt は <em>color0, color1, ..., color</em>N-1といったキーワードも解釈できます(N
 は端末がサポートしている色の番号です)。このキーワードを使うことでディスプレイの色を変更しなおす時に楽になります(例えば、xtermの
 color2 に設定してある色を変更したりする時です)。ただしそのために色が元々の意味を失ってしまうこともあるかもしれません。
</p>
<p>
端末がカラー表示をサポートしていなくとも、monoコマンドを使うことで白黒属性を変更することはできます。
</p>
<p>
使い方: <tt>mono</tt> <it>&lt;object&gt; &lt;attribute&gt;</it> &lsqb; <it>regexp</it> &rsqb;
 
</p>
<p>
使い方: <tt>mono</tt> index <it>attribute</it> <it>pattern</it> 
</p>
<p>
使い方: <tt>unmono</tt> index <it>pattern</it> &lsqb; <it>pattern</it> ... &rsqb; 
</p>
<p>
<em>attribute</em>は次のうちのどれかです:
</p>
<p>
<itemize>
 <item>
none 
 <item>
bold 
 <item>
underline 
 <item>
reverse 
 <item>
standout 
</itemize>
</p><sect1>
不要なメールヘッダを隠す<label id="ignore" >
<p>
使い方: <tt>&lsqb;un&rsqb;ignore </tt><tt><it>pattern</it> &lsqb; </tt><tt><it>pattern</it> ... &rsqb;</tt>
 
</p>
<p>
メールにシステムから自動的につけられたたくさんのヘッダーフィールドがあることがしばしばあります、またはスクリーンに表示させてもあまり役に立ちそうにないヘッダーフィールドもあります。このコマンドを使うことで普段は隠しておきたいヘッダーフィールドを指定することができるようになります。
</p>
<p>
ヘッダーフィールドの名前を完全に指定する必要はありません。例えば、
 ignore content- としていすると content- で始まるヘッダーフィールドはすべて無視されます。
</p>
<p>
一度隠すように設定されたへッダーフィールドを隠すリストから外すには
 unignore コマンドを使って下さい。注意してほしいのは、例えば ignore
 x- としてから unignore x-mailerとしてもうまくいかないということです。unignore
 コマンドは与えられたパターンのヘッダーフィールドを表示させるコマンドではないのです。
</p>
<p>
unignore * とすると設定を隠すリストから全て外します。
</p>
<p>
例えば、
</p>
<p>
<verb>
&num; Sven's draconian header weeding  
ignore * 
unignore from date subject to cc 
unignore organization organisation x-mailer: x-newsreader: x-mailing-list: 
unignore posted-to: 
</verb>
</p><sect1>
メーリングリスト<label id="lists" >
<p>
使い方: <tt>&lsqb;un&rsqb;lists</tt> <it>address</it> &lsqb; <it>address</it> ... &rsqb;
 
</p>
<p>
使い方: <tt>&lsqb;un&rsqb;subscribe</tt> <it>address</it> &lsqb; <it>address</it> ... &rsqb;
 
</p>
<p>
Mutt にはメーリングリスト<ref id="using_lists" name="handling mailing lists" >に関する優れた機能があります。それを利用するにはどのアドレスがメーリングリストに属するのかを指定しなければなりません。それを指定すると、<ref id="list-reply" name="list-reply" >機能をすべてのメーリングリストに対して使えるようになります。そのうえ購読しているメーリングリストに送るメッセージには
 Mail-Followup-Toへッダがつき他の人の MUA (Mail User Agents)に返信をあなたの個人のメールアドレスに送らないように知らせます。Mail-Followup-Toへッダは非標準的な拡張ですべての
 MUAでサポートされているわけではないことに注意してください。またこのへッダを付け加えることはメーリングリストのメッセージの個人宛の
 CC:を受け取るのを完全に防ぐものではありません。もう一つ注意しておくと
 Mail-Followup-Toへッダの生成は <ref id="followup_to" name="followup_to" >変数によってコントロールされます。
</p>
<p>
詳しく説明すると、Muttは既知(known)のメーリングリストのリストと購読(subscribe)しているメーリングリストのリストを保持しています。すべての購読しているメーリングリストは既知です。あるメーリングリストを既知の状態にするには
 listコマンドを使います。購読の状態にするには subscribeコマンドを使います。
</p>
<p>
あいまいさをなくすために十分なアドレスを指定しましょう。例えば、Muttのメーリングリストを購読していて、<it>mutt-users@mutt.org</it>というアドレスでメールを受け取るとします。Muttにこれがメーリングリストだと教えてやるには設定ファイルに
 lists mutt-users という行を付け加えてください。これが購読しているメーリングリストだと
 Muttに教えてやるには subscribe mutt-usersという行を代わりに付け加えます。もし
 <it>mutt-users@example.com</it>というアドレスを持つ他の人からメールを受け取る可能性がある場合には実際のメーリングリストのメールに一致させるために
 lists mutt-users@mutt.orgまたは subscribe mutt-users@mutt.orgを使って下さい。
</p>
<p>
unlists コマンドは既知と購読のメーリングリストのリストからアドレスを外すコマンドです。すべての設定を解除するには
 unlists * というコマンドを使って下さ い。
</p>
<p>
購読のリストからははずすが、既知のリストには残しておく場合には
 unsubscribeを使ってください。
</p>
<sect1>
複数のスプールするメールボックスを使う<label id="mbox-hook" >
<p>
使い方: <tt>mbox-hook &lsqb;!&rsqb;</tt><tt><it>pattern</it> </tt><tt><it>mailbox</it></tt></tt></it> 
</p>
<p>
このコマンドはメールボックスを離れたり Mutt を終了させた時に既読のメールを自動的に他のメールボックスに移すのに使われます。pattern
 はスプールメールボックスとして扱うメールボックスを指定する正規表現です。mailboxは既読のメールをセーブする場所を指定します。
</p>
<p>
他のいくつかの hook コマンドとは違い、最初にマッチしたパターンだけが使われます(既読のメールを複数のメールボックスにセーブすることはできません)。
</p>
<sect1>
メールを取り込むメールボックスを定義する<label id="mailboxes" >
<p>
使い方: <tt>mailboxes &lsqb;!&rsqb;</tt><tt><it>filename</it> &lsqb; </tt><tt><it>filename</it> ... &rsqb;</tt>
 
</p>
<p>
このコマンドはどのフォルダーにメールを取り込むことができ、そして新着のメールをチェックするかを指定します。初期の設定ではステータスバーにこれらのフォルダーに何通の新着のメールがあるかが表示されています。
</p>
<p>
フォルダーを移動する時に <em>space</em> を押すと新着のメールが到着しているフォルダーを次々に表示します。
</p>
<p>
ディレクトリーブラウザーで TAB キーを押すと mailboxes コマンドで指定されたメールボックスを表示するメニューを表示します。-y
 オプション付きで Mutt が起動されると自動的にこのモードになります。
</p>
<p>
<bf>注意</bf>: 新着のメールであるかどうかは変更が加えられた時間と最後にアクセスした時間とを比べて判断していますので、biff
 や frm や他のなんらかのプログラムでメールボックスにアクセスするものを使っている場合、それらのプログラムが適切にアクセスタイムをリセットしなければ
 Mutt は新着のメールの到着を判断できません。バックアップツールもアクセスタイムを変える原因の一つです。
</p>
<p>
<bf>注意</bf>: mailboxes コマンドにおける filename はコマンドが実行される時に展開されます。そのため、これらの名前が<ref id="shortcuts" name="shortcut characters" >(
 =や ! のようなショートカット文字)や変数定義の時に使われる文字(<ref id="folder" name="$folder" >や<ref id="spoolfile" name="$spoolfile" >のような)を含んでいれば
 mailboxes コマンドが実行される前に展開されます。
</p>
<sect1>
ユーザが定義するへッダ<label id="my_hdr" >
<p>
使い方: <tt>my_hdr </tt><tt><it>string</it></tt></tt></it> 
</p>
<p>
使い方: <tt>unmy_hdr </tt><tt><it>field</it> &lsqb; </tt><tt><it>field</it> ... &rsqb;</tt> 
</p>
<p>
my_hdr コマンドを使うことで独自のヘッダーフィールドを定義することができます。またそのヘッダーフィールドは送信するメール毎に付加されます。
</p>
<p>
例えば、Organization: ヘッダーフィールドを出ていくメールすべてに付加したい場合は次のコマンドを
 .muttrc に書き加えて下さい:
</p>
<p>
<quote>
my_hdr Organization: A Really Big Company, Anytown, USA  
</quote>
</p><p>
<bf>注意</bf><em>:</em> キーワードとコロン(:)の間にスペースを入れることは許されません。電子メールの標準を定める
 RFC822 でそのスペースは許されないと定められているので Mutt でもそのルールに従っています。
</p>
<p>
全てのメールに対してではなくある一つのメールにヘッダーフィールドを付加したい場合には、そのメールの本文に伴うヘッダーを編集できるように
 <ref id="edit_headers" name="edit_headers" > 変数をセットしておくか、send-menu で edit-headers 機能 (デフォルト:
 E)を利用して下さい。
</p>
<p>
ユーザー独自のヘッダーフィールドを除くには unmy_hdr コマンドを使って下さい。全てのヘッダーフィールドを除くのにアスタリスク(*)を使うこともできます。例えば、すべての
 To と Cc ヘッダーフィールドを削除するには次のよ うにします:
</p>
<p>
<quote>
unmy_hdr to cc  
</quote>
</p><sect1>
メールを閲覧する時のヘッダの並び方を決める<label id="hdr_order" >
<p>
使い方: <tt>hdr_order </tt><tt><it>header1</it> </tt><tt><it>header2</it> </tt><tt><it>header3</it></tt></tt></it> 
</p>
<p>
このコマンドを使うことでメールを閲覧する時に Mutt が表示するヘッダーの並び方を指定することができます。
</p>
<p>
`unhdr_order * 'はオーダーリストからすべての前のヘッダーをクリアします。そのためヘッダーの並び方を削除することはシステムワイドなスタートアップファイルによる設定にも影響します。
</p>
<p>
<verb>
hdr_order From Date: From: To: Cc: Subject:  
</verb>
</p><sect1>
セーブする時のデフォルトのファイル名を指定する<label id="save-hook" >
<p>
使い方: <tt>save-hook &lsqb;!&rsqb;</tt><tt><it>pattern</it> </tt><tt><it>filename</it></tt></tt></it> 
</p>
<p>
このコマンドでメールをセーブする時に使われるデフォルトのファイル名を変えることができます。メールの
 From: が regexp にマッチするかあなた自身がメールの送信者であった場合と
 To: が regexp にマッチする場合にこのファイル名が使われます。
</p>
<p>
パターンの正確な形式に関する情報に関しては <ref id="pattern_hook" name="Message Matching in Hooks" >を参照して下さい。
</p>
<p>
例:
</p>
<p>
<verb>
save-hook me@(turing&bsol;&bsol;.)?cs&bsol;&bsol;.hmc&bsol;&bsol;.edu&dollar; +elkins  
save-hook aol&bsol;&bsol;.com&dollar; +spam 
</verb>
</p><p>
<ref id="fcc-save-hook" name="fcc-save-hook" >コマンドも参照して下さい。
</p>
<sect1>
Fcc:としてセーブするデフォルトのメールボックスを指定する<label id="fcc-hook" >
<p>
使い方: <tt>fcc-hook &lsqb;!&rsqb;</tt><tt><it>pattern</it> </tt><tt><it>mailbox</it></tt></tt></it> 
</p>
<p>
このコマンドは送信するメールを <ref id="record" name="$record" > 以外にセーブしたい場合に使います。
 Muttはメールの受信者のリストのなかに regexp にマッチするものがあった場合に
 mailbox として指定されたメールボックスを Fcc: として保存するメールボックスにします。regexp
 にマッチしなかった場合は <ref id="record" name="$record" >メールボックスに保存します。
</p>
<p>
正規表現(regexp)の正確な形式に関する情報に関しては <ref id="pattern_hook" name="Message Matching in Hooks" >を参照して下さい。
</p>
<p>
Example: <tt>fcc-hook aol.com&dollar; +spammers</tt> 
</p>
<p>
上記のようにすると送信しようとするメールのうちドメインが aol.com
 であるメールはデフォルトで +spammers メールボックスにコピーが保存されます。<ref id="fcc-save-hook" name="fcc-save-hook" >コマンドも参照して下さい。
</p>
<sect1>
セーブするファイル名のデフォルトと Fcc: するメールボックスのデフォルトを一度に指定する。<label id="fcc-save-hook" >
<p>
使い方: <tt>fcc-save-hook &lsqb;!&rsqb;</tt><tt><it>pattern</it> </tt><tt><it>mailbox</it></tt></tt></it> 
</p>
<p>
このコマンドは <ref id="fcc-hook" name="fcc-hook" >と <ref id="save-hook" name="save-hook" > を一度に指定するショートカットコマンドで mailbox
 で同じメールボックスに指定します。
</p>
<sect1>
メールの宛先によって設定を変更する<label id="send-hook" >
<p>
使い方: <tt>send-hook &lsqb;!&rsqb;</tt><tt><it>pattern</it> </tt><tt><it>command</it></tt></tt></it> 
</p>
<p>
このコマンドを使うことでメールの宛先に応じて任意のコマンドを実行できます。pattern
 は send-hook コマンドを実行したいアドレスにマッチする正規表現で、マッチした場合は
 command で指定されたコマンドが実行されます。複数の send-hook コマンドがマッチした場合には
 muttrc に書かれている順に実行 されます。
</p>
<p>
パターンの正確な形式に関する情報に関しては <ref id="pattern_hook" name="Message Matching in Hooks" >を参照して下さい。
</p>
<p>
例: <tt>send-hook mutt &quot;set mime_forward signature=''&quot;</tt>
 
</p>
<p>
他の典型的な使い方としてはメールの宛先に応じて <ref id="attribution" name="$attribution" >、 <ref id="signature" name="$signature" >、<ref id="locale" name="$locale" >変数を変更することがあります。こうすることで引用する時に示す出典の言葉と署名の言語を変更することができます。
</p>
<p>
<bf>注意</bf>: send-hook コマンドは最初に受信者のリストを Mutt が調べた時に<em>一度だけ</em>実行されます。返信操作を行った後や編集を終えた後で受信者を追加しても
 send-hookコマンドは実行されません。また受取人に関するへッダやサブジェクトを変える
 my_hdrコマンドは send-hookから実行されるメッセージには何の影響も与えません。
</p>
<sect1>
メッセージを整形する前に設定を変える<label id="message-hook" >
<p>
使い方： <tt>message-hook</tt> <tt>&lsqb;!&rsqb;</tt><tt><it>pattern</it> </tt><tt><it>command</it></tt></tt></it> 
</p>
<p>
このコマンドはメッセージを見たり、整形する前にメッセージの内容によって任意の設定コマンドを実行するのに使います。表示されるメッセージに
 <it>pattern</it>がマッチすれば <it>command</it>が実行されます。同じメッセージがいくつものパターンにマッチする場合には、muttrcに書いてある順でコマンドが実行されます。
</p>
<p>
パターンのフォーマットについての情報は <ref id="pattern_hook" name="Message Matching in Hooks" >を参照して下さい。
</p>
<p>
例： 
</p>
<p>
<verb>
message-hook &tilde;A 'set pager=builtin'  
message-hook '&tilde;f freshmeat-news' 'set pager=&quot;less  &bsol;  &quot;+/^  subject: .*&bsol; &quot;&quot;' 
</verb>
</p><sect1>
受取人の PGP キーを選ぶ<label id="pgp-hook" >
<p>
使い方: <tt>pgp-hook </tt><tt><it>pattern</it> </tt><tt><it>keyid</it></tt></tt></it> 
</p>
<p>
PGPでメールを暗号化しようとしている場合、特定のメールアドレスに対して一定の
 PGP鍵を自動的に振り当てたい場合があります。受取人の公開鍵がアドレスから推測できなかったり、なんらかの理由で
 Mutt が普通使う鍵ではないものを使いたかったりするような場合です。pgp-hook
 コマンドを使うことで特定の受取人へのメールを暗号化するときに公開鍵の
 IDを指定することができるようになります。
</p>
<sect1>
一連のキーをキーボードバッファーに加える<label id="push" >
<p>
使い方: <tt>push </tt><tt><it>string</it></tt></tt></it> 
</p>
<p>
このコマンドは名前付き文字列をキーボードバッファーに加えます。この文字列は
 <ref id="macro" name="macro" >コマンドの一連の文字列と同じようにコントロールキャラクタ、キーの名前、関数名を含むことができます。これ使って起動時や特定のフォルダに移動したときに一連のコマンドを実行することができます。
</p>
<sect1>
関数の実行<label id="exec" >
<p>
使い方: <tt>exec</tt> <it>function</it> &lsqb; <it>function</it> ... &rsqb; 
</p>
<p>
このコマンドは任意の関数を実行するのに使います。使うことのできる関数は<ref id="functions" name="Functions" >に一覧にしてあります。``exec
 function''は ``push &lt;function&gt;''と同じです。
</p>
<sect1>
メールにスコア付けする<label id="score-command" >
<p>
使い方: <tt>score </tt><tt><it>pattern</it> </tt><tt><it>value</it></tt></tt></it> 
</p>
<p>
使い方: <tt>unscore </tt><tt><it>pattern</it> &lsqb; </tt><tt><it>pattern</it> ... &rsqb; </tt>
</p>
<p>
scoreコマンドは patternにマッチするメールのスコアに <tt>value</tt>の値を加えます。pattern
 は<ref id="patterns" name="patterns" >セクションに書かれている形式の文字列です（注意: 効率が悪くなるので、インデックスで使うことのできない情報を走査するパターン、例えば<tt>&tilde;b</tt>、<tt>&tilde;B、&tilde;h</tt>等は使わない方がいいでしょう）。valueは正か負の整数です。メールの最終的なスコアは
 scoreコマンドのすべての合計です。とはいえ、value に等号記号(=)を前置して
 pattern にマッチする特定の エントリーに対するスコアの計算を止めさせることで上限を設定することもできます。スコアの下限は
 0 です。
</p>
<p>
unscore コマンドはリストから score のエントリーを外します。外す時は
 scoreコマンドで指定したのと同じパターンを指定しなければなりません。*
 という特殊なパターンは score のエントリーを全て外します。
</p>
<sect1>
変数を設定する<label id="set" >
<p>
使い方: <tt>set &lsqb;no|inv&rsqb;</tt><tt><it>variable</it>&lsqb;=</tt><tt><it>value</it>&rsqb; &lsqb;
 </tt><tt><it>variable</it> ... &rsqb;</tt> 
</p>
<p>
使い方: <tt>toggle </tt><tt><it>variable</it> &lsqb;</tt><tt><it>variable</it> ... &rsqb;</tt> 
</p>
<p>
使い方: <tt>unset </tt><tt><it>variable</it> &lsqb;</tt><tt><it>variable</it> ... &rsqb;</tt> 
</p>
<p>
使い方: <tt>reset </tt><tt><it>variable</it> &lsqb;</tt><tt><it>variable</it> ... &rsqb; </tt>
</p>
<p>
このコマンドは<ref id="variables" name="configuration variables" >変数をセットしたり外したりするのに使います。変数には
 boolean, number, string, quadoption という4つの種類があります。boolean
 変数は set (true)か unset (false)がその取り得る値で、number 変数
 はその値に正の整数を指定します。
</p>
<p>
string 変数はいくつかの文字からなり、スペースやタブを含む場合は引用符で括らなければなりません。また
 Cと同様に改行とタブはそれぞれ &bsol;n、&bsol;t というエスケープシークエンスで指定することができます。
</p>
<p>
<em>quadoption</em> 変数は何らかの操作をした時にプロンプトを表示させるかどうかをコントロールしたりプロンプトのデフォルトの答えを指定するのに使います。<em>yes</em>という値を設定するとプロンプトの質問に対して自動的に
 yes と答えたように Mutt は反応します。同様に no と設定した場合は
 no と答えたように反 応します。<em>ask-yes</em> と設定した場合はデフォルトの答えを
 yes にしてプロンプトが表示され <em>ask-no</em> と設定した場合はデフォルトの答えを
 no にしてプロンプトが表示されます。
</p>
<p>
no という前置詞を変数につけるとその変数の設定を外します。例:
 <tt>set noaskbcc</tt>
</p>
<p>
<em>boolean</em>変数に対しては <tt>inv</tt> という前置詞を変数名につけて利用することができます。<tt>inv</tt>
 という前置詞が付けられた <em>boolean</em>変数はその値が逆になります (on か
 off )。これはマクロを書く時に便利です。例: <tt>set invsmart_wrap
</tt>
</p>
<p>
<tt>toggle</tt> コマンドは指定されたすべての変数の頭に <tt>inv</tt> がつけられたようにすることができるコマンドです。
</p>
<p>
<tt>unset</tt>コマンドは自動的に指定した変数の頭に <tt>no</tt> という前置詞をつけます。
</p>
<p>
変数の値を調べるにはインデックスメニューで enter-command 機能で変数の前にクエスチョンマークを付けたものをセットすればわかります。
</p>
<p>
<verb>
set ?allow_8bit  
</verb>
</p><p>
実際には boolean 変数と quadoption変数に対してしかクエスチョンマークを付ける必要はありません。
</p>
<p>
<tt>reset</tt>コマンドは与えられたすべての変数の値をコンパイル時のデフォルトに戻します。<tt>set</tt>コマンドで変数の頭に「&amp;」をつけると
 <tt>reset</tt>コマンドと同じ振舞いをします。
</p>
<p>
reset コマンドには all という特殊な変数を設定することができ、この変数を設定するとすべての変数設定を解除してシステムのデフォルトの設定に戻すことができます。
</p>
<sect1>
他のファイルから初期化コマンドを読み込む<label id="source" >
<p>
使い方: <tt>source </tt><tt><it>filename</it></tt></tt></it> 
</p>
<p>
このコマンドを使うことで他のファイルから初期化コマンドを読み込むことができます。例えば、エイリアスファイルを
 <tt>&tilde;/.mail_aliases</tt> にわけてこちらは他の人が読めないようにし <tt>&tilde;/.muttrc</tt>は読めるようにする、ということができ
 ます。
</p>
<p>
filenameがチルド(<tt>&tilde;</tt>)で始まっていれば、チルドはあなたのホームディレクトリの絶対パスに展開されます。
</p>
<p>
filenameが垂直バー(|)で終っていればそのファイルはそこから入力を読み込む実行ファイルとみなされます。(例:
 <tt>source &tilde;bin/myscript|/</tt>)
</p>
<sect1>
フックを取り除く<label id="unhook" >
<p>
使い方: <tt>unhook</tt> &lsqb; * | <it>hook-type</it> &rsqb; 
</p>
<p>
このコマンドは設定してある hookを無効にします。すべての hookを無効にするにはアステリスク(*)を引数にしてください。<tt>unhook
 send-hook</tt>のようにして特定のタイプの hookをすべて無効にすることもできます。
</p>
<sect>
高度な使い方
<sect1>
正規表現<label id="regexp" >
<p>
複雑なパターン<ref id="patterns" name="patterns" >も含めて Mutt で文字列を検索するには POSIXで拡張された形の正規表現を指定しなければなりません。(拡張正規表現の文法は
 egrepとGNU awkでも多少採り入れられています)。この文法の簡単に説明しておきましょう。
</p>
<p>
検索パターンが一つでも大文字を含めば大文字小文字を区別して検索が行われます、それ以外は大文字小文字を区別しません。初期化コマンドの中で
 &bsol; を正規表現に使いたい場合、&bsol; は &bsol;&bsol; という風にエスケープされなければなりませ
 ん。
</p>
<p>
正規表現は文字列のセットを記述するためのパターンです。正規表現は数学の式の組み立てと似ており、小さな式を組み合わせるのに色々な演算子を使いま
 す。
</p>
<p>
正規表現を囲んだり、分けたりするのに &quot; と ' が使えます。これは正規表現が空白文字を含む場合に便利です。&quot;
 と 'がどのように処理されるかについての詳しい説明は <ref id="muttrc-syntax" name="初期化ファイルの構文" >にあります。またこれらはそのまま（特殊文字ではなく）リテラルとして正規表現に含めたい場合には前に&bsol;（バックスラッシュ）をつけてください。
</p>
<p>
基本となる単位は1つの文字にマッチする正規表現であり、アルファベットとアラビア数字の全てを含むほとんどの文字はその文字そのものがそれ自身にマッチする正規表現です。特殊な意味を持つメタキャラクターは前にバックスラッシュを付けることでエスケープします。
</p>
<p>
ピリオド(.)は任意の1文字にマッチします。カレット(^)とドル記号(&dollar;)はそれぞれ行の最初と最後という概念的な文字(行の最初にある一文字を表すのではなく行の最初という概念的なものを表す正規表現です)にマッチするメタキャラク
 ターです。
</p>
<p>
&lsqb; と &rsqb; で囲まれた文字のリストはその中にある文字のどれかにマッチします。もしリストの最初にカレット(^)があればそのリストにない文字にマッチします。例えば
 &lsqb;0123456789&rsqb;はアラビア数字のうちのどれかにマッチします。ASCII文字を指定する場合最初の文字と最後の文字の間にハイフン(-)を置くことで範囲指定することができます。ほとんどのメタキャラクターはリストの中ではその意味を失います。&rsqb;そのものをリストの中に置きたい場合はリストの最初に置きます。同様に
 ^ そのものをリストの中に置きたい場合はリストの最初以外の場所に置きます。そしてハイフン(-)を置きたい場合はリストの最後に置きます。
</p>
<p>
特定の文字クラスは前もって定義してあります。文字クラスは、&lsqb;:
 、そのクラスを表すキーワード、:&rsqb; 、で構成されます。次に示すクラスは
 POSIX 標準で定められているものです。
</p>
<p>
<descrip>
 <tag>
&lsqb;:alnum:&rsqb;</tag>アルファベットとアラビア数字
 <tag>
&lsqb;:alpha:&rsqb;</tag>アルファベット
 <tag>
&lsqb;:blank:&rsqb;</tag>スペースとタブ
 <tag>
&lsqb;:cntrl:&rsqb;</tag>制御文字
 <tag>
&lsqb;:digit:&rsqb;</tag>アラビア数字
 <tag>
&lsqb;:graph:&rsqb;</tag>印字可能かつ見える文字(スペースは印字可能であるが見えない。一方
 a は印字可能かつ見える文字)
 <tag>
&lsqb;:lower:&rsqb;</tag>アルファベットの小文字
 <tag>
&lsqb;:print:&rsqb;</tag>印字可能な文字(制御文字以外)
 <tag>
&lsqb;:punct:&rsqb;</tag>句読点(アルファベット、アラビア数字、制御文字、スペース以外の文字)
 <tag>
&lsqb;:space:&rsqb;</tag>空白文字(スペース、タブ、改ページ等)
 <tag>
&lsqb;:upper:&rsqb;</tag>アルファベットの大文字
 <tag>
&lsqb;:xdigit:&rsqb;</tag>16進数
</descrip>
</p><p>
文字クラスは角括弧で囲まれた文字リストの中でのみ有効です。文字クラス名にある角括弧は記号名の一部だということに注意して下さい。つまり、文字リストを定義する角括弧とは別に角括弧で囲まれなければなりません。例えば:
 &lsqb;&lsqb;:digit:&rsqb;&rsqb; は &lsqb;0-9&rsqb; と同義です。
</p>
<p>
文字リストの中ではさらに2つの特別なシークエンスがあり、これらで照合要素と呼ばれる複数の文字を表す一つの記号を使ったり、同じように文字を照合したりソートしたりするために等価ないくつかの文字を一つの記号で表したりすることで
 ASCII 以外の文字セットも利用できるようになっています。
</p>
<p>
<descrip>
 <tag>
照合記号</tag>照合記号は &lsqb;. と .&rsqb; で括られた複数の文字を参照する要素です。例えば、ch
 が照合要素だとすると &lsqb;&lsqb;.ch.&rsqb;&rsqb; がこの照合要素にマッチする正規表現です。一方
 &lsqb;ch&rsqb; は c か h のどちらかにマッチする正規表現です。
 <tag>
等価クラス</tag>等価クラスとは各々のロケール固有のよく似ていて同一視できる文字のリストの名前です。名前は
 &lsqb;= と =&rsqb; で括ります。例えば、e という名前がアルファベットの
 eとアクセント付の eの全てを表すものとして使われているとします。この場合
 &lsqb;&lsqb;=e=&rsqb;&rsqb; は e、アクセント付の eのどれかにマッチする正規表現です。
</descrip>
</p><p>
一つの文字にマッチする正規表現は下に示す繰り返し演算子を後に付けることができます。
</p>
<p>
<descrip>
 <tag>
?</tag>直前の正規表現が一つもないか一つ
 <tag>
*</tag>直前の正規表現の0回以上の繰り返し
 <tag>
+</tag>直前の正規表現の1回以上の繰り返し
 <tag>
&lcub;n&rcub;</tag>直前の正規表現のn回の繰り返し
 <tag>
&lcub;n,&rcub;</tag>直前の正規表現のn回以上の繰り返し
 <tag>
&lcub;,m&rcub;</tag>直前の正規表現の0回以上m回までの繰り返し
 <tag>
&lcub;n,m&rcub;</tag>直前の正規表現のn回以上m回までの繰り返し
</descrip>
</p><p>
二つの正規表現をそのままつなぐこともできます。つないでできた一つの正規表現はつなげた二つの正規表現がそれぞれマッチする二つの文字列をあわせた一つの文字列にマッチします。
</p>
<p>
二つの正規表現は選択演算子 | でつなぐことができ、二つをつないでできる一つの正規表現は二つの正規表現の内のどちらかがマッチする文字列にマッチし
 ます。
</p>
<p>
繰り返し演算子と正規表現とのつながりは正規表現同士のつながりよりも優先します。選択演算子でつながれた正規表現の後に繰り返し演算子がくると、繰り返し演算子が選択演算子に対して優先しますので、どちらかの正規表現の繰り返しを表します。正規表現同士を括弧
 () で括ってしまえば繰り返し演算子より優先させ ることができます
</p>
<p>
<bf>注意</bf>: Mutt を GNU rx パッケージと共にコンパイルしていれば次の演算子を正規
 表現の中で使うこともできます。
</p>
<p>
<descrip>
 <tag>
&bsol;&bsol;y</tag>単語の先頭か最後という概念的な文字ににマッチします
 <tag>
&bsol;&bsol;B</tag>単語内という概念的な文字にマッチします
 <tag>
&bsol;&bsol;&lt;</tag>単語の先頭という概念的な文字にマッチします
 <tag>
&bsol;&bsol;&gt;</tag>単語の最後という概念的な文字にマッチします
 <tag>
&bsol;&bsol;w</tag>単語を構成する任意の文字にマッチします(アルファベット、アラビア
 数字、アンダースコア)
 <tag>
&bsol;&bsol;W</tag>単語の成分以外の任意の文字にマッチします。
 <tag>
&bsol;&bsol;`</tag>バッファの先頭という概念的な文字列にマッチします(文字列)
 <tag>
&bsol;&bsol;'</tag>バッファの最後という概念的な文字列にマッチします
</descrip>
</p><p>
しかしながらこれらの演算子は POSIX では定められておらず、そのため様々なシステムのストックライブラリでは使えたり使えなかったりする、ということに注意して下さい。
</p>
<sect1>
パターン<label id="patterns" >
<p>
多くの Muttコマンドではマッチさせるパターンを指定することができます
 (limit、タグパターン、削除パターン、etc)。複数のメールを選択するのにもいくつかの方法があります:
</p>
<p>
<verb>
&tilde;A              全てのメール
&tilde;b EXPR         本文に EXPR を含むメール
&tilde;B EXPR         EXPR を含むメール
&tilde;c USER         CC に USER が宛てられているメール
&tilde;C EXPR         To: か Cc: に EXPR を含むメール
&tilde;D              削除マークが付けられたメール
&tilde;d &lsqb;MIN&rsqb;-&lsqb;MAX&rsqb;  送信された日付けがその範囲の中にあるメール
&tilde;E              エクスパイアされているメール
&tilde;e EXPR         Sender フィールドに EXPR を含むメール
&tilde;F              重要のマークがついているメール
&tilde;f USER         USERから出されたメール
&tilde;g              PGP 署名されているメール
&tilde;G              PGP 暗号化されているメール
&tilde;h EXPR         ヘッダーに EXPR を含むメール
&tilde;k              PGP鍵を含んだメール
&tilde;i ID           Message-ID フィールドで ID にマッチするメール
&tilde;L EXPR         EXPR から出されているか EXPR に届いているメール
&tilde;l              メーリングリストに指定されているアドレスにマッチするメール
&tilde;m &lsqb;MIN&rsqb;-&lsqb;MAX&rsqb;  MIN から MAX の範囲のメール
&tilde;n &lsqb;MIN&rsqb;-&lsqb;MAX&rsqb;  MIN から MAX の範囲のスコアのメール
&tilde;N              新着のメール
&tilde;O              古い未読メール
&tilde;p              あなたに宛てられたメール
&tilde;P              あなたが出したメール
&tilde;Q              返信済のメール
&tilde;R              既読のメール
&tilde;r &lsqb;MIN&rsqb;-&lsqb;MAX&rsqb;  受信日がその範囲にあるメール
&tilde;S              置き換えられたメール
&tilde;s SUBJECT      Subject フィールドに SUBJECT を持つメール
&tilde;T              タグ付けされたメール
&tilde;t USER         USER宛のメール
&tilde;U              未読のメール
&tilde;v              折り畳んだスレッドに含まれるメール
&tilde;x EXPR         References フィールドに EXPR を含むメール
&tilde;y EXPR         X-Labelフィールドに EXPRを持つメッセージ 
&tilde;z &lsqb;MIN&rsqb;-&lsqb;MAX&rsqb;  サイズが MIN から MAX の間のメール *)
&tilde;=             重複したメッセージ (&dollar;duplicate_threads を見てください)
</verb>
</p><p>
EXPR、USER、ID、SUBJECTは正規表現<ref id="regexp" name="regular expressions" >です。
</p>
<p>
*) &lt;&lsqb;MAX&rsqb;、 &gt;&lsqb;MIN&rsqb;i、 &lsqb;MIN&rsqb;-、-&lsqb;MAX&rsqb;
 という書き方もできます。
</p>
<sect2>
パターン修飾子
<p>
アドレスのリストに対してパターンマッチングを行う場合は（特に
 c、C、p、P、t）、リストの中に一つでもパターンにマッチするアドレスがあると、そのリスト全体が選ばれてしまうことに注意してください。もしそのリストのすべての要素がパターンにマッチするリストを選びたい場合はパターンの前に^を前置する必要があります。次の例はすべての受取人がドイツいるメールにマッチします。
</p>
<p>
<verb>
^&tilde;C &bsol;.de&dollar;  
</verb>
</p><sect2>
組み合わせて検索する
<p>
AND 検索は一つ以上の基準を記述することで行われます。例えば:
</p>
<p>
<verb>
&tilde;t mutt &tilde;f elkins  
</verb>
</p><p>
は受信者のリストに muttという単語を含み、かつ From ヘッダーフィールドに
 elkins という単語を持つメールを選択します。
</p>
<p>
Mutt では次にあげる演算子も利用でき、もっと複雑な検索パターンを指定することができます:
</p>
<p>
<itemize>
 <item>
! -- 論理 NOT 演算子
 <item>
| -- 論理 OR 演算子
 <item>
() -- 論理グループ化演算子
</itemize>
</p><p>
組合わせ検索の例をいくつか見てみましょう。次のパターンは To もしくは
 Cc フィールドに mutt を含まず、かつ From が elkins であるメールを選び出します。
</p>
<p>
<verb>
!(&tilde;t mutt|&tilde;c mutt) &tilde;f elkins  
</verb>
</p><p>
次の例は空白を正規表現に含める例です（'か &quot;をつかいます）。これはメールのサブジェクトに
 ``Junk +From +Me&dollar;''が含まれ、``Jim +Somebody''または ``Ed
 +SomeoneElse''から来たメッセージにマッチします。
</p>
<p>
<verb>
'&tilde;s &quot;^Junk +From +Me&dollar;&quot; &tilde;f (&quot;Jim +Somebody&quot;|&quot;Ed +SomeoneElse&quot;)'
</verb>
</p><sect2>
日付で検索する
<p>
Mutt は絶対的な日付と相対的な日付という二つの日付のタイプをサポートしています。
</p>
<p>
<bf>絶対的</bf>な日付。 日付は DD/MM/YY という形式で指定しなければなりません(月と年は省略することができます、省略された場合は現在の月と年とみなされます)。正しい日付の範囲指定の例を挙げます:
</p>
<p>
<verb>
Limit to messages matching: &tilde;d 20/1/95-31/10  
</verb>
</p><p>
もし選択しようとする日付の範囲の最初の日付を省略して -DD/MM/YYとだけ指定した場合その日付以前のメールが全て選択されます。最後の日付を省略して
 DD/MM/YY- とのみ指定した場合はその日付以降のメールが選択されます。ダッシュ(-)なしで一つの日付を指定した場合はその日付に送られたメールだけが選択されます。
</p>
<p>
<bf>エラーマージン</bf>  エラーマージンを絶対的な日付に加えることができます。エラーマージンは（+または-の）符号、数字、単位からなっています。使える単位は次の通りです。
</p>
<p>
<verb>
y       年  
m       月 
w       週 
d      日。この場合は特別に符号に「*」を使うことができます。これは正と負に同じだけのエラーマージンを与えます。
</verb>
</p><p>
例: 2001年1月15日前後二週間ずつのメッセージを選択するためには、次のようなパターンを使います。
</p>
<p>
<verb>
Limit to messages matching: &tilde;d 15/1/2001*2w
</verb>
</p><p>
<bf>相対的</bf>な日付。 このタイプの日付は現在の日付に対する相対的なものです。そして次のような指定の仕方ができます:
</p>
<p>
<itemize>
 <item>
&gt;offset (offset 単位よりも古いメール)
 <item>
&lt;offset (offset 単位よりも新しいメール)
 <item>
=offset (正確に offset 単位の分古いメール)
</itemize>
</p><p>
offset は次の単位が後に続く正の数です。
</p>
<p>
<verb>
y      年
m      月
w      週
d      日
</verb>
</p><p>
例: 一ヵ月以上は古くないメールを選択するには次のようにします。
</p>
<p>
<verb>
Limit to messages matching: &tilde;d &lt;1m  

</verb>
</p><p>
<bf>注意</bf>: 検索の時に使われる日付はすべてローカル時間に対する相対的なものです。ですから
 <ref id="index_format" name="$index_format" > が &percnt;&lsqb;...&rsqb; フォーマットを含むように設定を変更しない限りインデックスで表示される日付がこれにマッチするというわけではありません。
</p>
<sect1>
タグを使う
<p>
メールを一度に一通づつよりもまとめて操作をしたい場合があります。例えば、あるメーリングリスト宛てのメールを別のフォルダーに保存したり、与えた
 Subject を含む全てのメールを削除する場合などです。パターンにマッチしたメールにタグをつけるには
 tag-pattern機能を使います(デフォルトで shift-Tに割り当てられています)。もしくは
 tag-message機能(デフォルトで t に割り当てられています)を使うことで個々のメールを手動でタグをつけることもできます。パターンの文法については検索の章<ref id="patterns" name="patterns" >を参照して下さい。
</p>
<p>
いったん望むメールにタグをつけたら tag-prefix演算子(デフォルトでセミコロン(;)キー)を使います。tag-prefix
 演算子が使われると、その次の操作でタグをつけたすべてのメールに対して(その操作が正しい操作であれば)その操作が行われます。<ref id="auto_tag" name="$auto_tag" >変数がセットされていると、tag-prefix演算子を使うこと無しに次の操作が自動的にタグつけされたメールに施されます。
</p>
<sect1>
フックを使う<label id="hooks" >
<p>
フックの概念は EMACSエディターから借りてきたもので、これを使うことでなんらかの操作をする前に任意のコマンドを実行することができるようになります。例えば、読んでいるメールボックスや送るメールのあて先に応じてなんらかの設定を変えたいような場合です。Muttの世界ではフックは正規表現<ref id="regexp" name="regular expression" >かパターン<ref id="patterns" name="pattern" >と設定オプション/コマンドで構成されます。使うことができるフックコマンドの詳細は次のセクションを見てください。
</p>
<p>
<itemize>
 <item>
<ref id="folder-hook" name="folder-hook" >
 <item>
<ref id="send-hook" name="send-hook" >
 <item>
<ref id="message-hook" name="message-hook" >
 <item>
<ref id="save-hook" name="save-hook" >
 <item>
<ref id="mbox-hook" name="mbox-hook" >
 <item>
<ref id="fcc-hook" name="fcc-hook" >
 <item>
<ref id="fcc-save-hook" name="fcc-save-hook" > 
</itemize>
</p><p>
<bf>Note:</bf> もしフックが設定に変更を加えた場合には、その変更は今動かしている
 muttセッションの終りまで有効になります。これを避けて、設定をデフォルトに戻すためにはすべてフックの前にデフォルトフックを置く必要があります。次の例は
 send-hookと my_hdrを使った例です。
</p>
<p>
<verb>
send-hook . 'unmy_hdr From:'  
send-hook &tilde;Cb@b.b my_hdr from: c@c.c
</verb>
</p><sect2>
フックコマンドでメールにマッチさせる<label id="pattern_hook" >
<p>
メールに応じて実行するフックコマンド(send-hook、save-hook、fcc-hook、message-hook)は他のフックコマンドと少し違った方法で評価されます。他のタイプのフックコマンドは正規表現<ref id="regexp" name="regular expression" >で十分です。しかしメールを扱うときはもう少しきめの細かいマッチングが必要になります。というのも、さまざまな基準で、またさまざまな目的でマッチさせたい場合があるからです。
</p>
<p>
Muttではフックコマンドでメールをマッチさせるには検索パターン言語<ref id="patterns" name="search pattern" >を使うことができます。これは、メールのへッダに関する情報にマッチする演算子に制限されること以外は、メールボックスを絞り込んだり検索したりするのと全く同じように動作します。
</p>
<p>
例えば、返信先のアドレスを特定の宛先に対してセットしたい場合は次のようにすることができます:
</p>
<p>
<verb>
send-hook '&tilde;t ^me@cs&bsol;.hmc&bsol;.edu&dollar;' 'my_hdr From: Mutt User &lt;user@host&gt;'  
</verb>
</p><p>
これは me@cs.hmc.edu 宛てにメールを送るときに実行されます。
</p>
<p>
しかしながら、マッチさせるパターンを書くときに検索言語を完全な形式で書くことが要求されるわけではありません。他のフックコマンドのように単純に正規表現で指定することもできます。そうされた場合
 Mutt は <ref id="default_hook" name="$default_hook" >変数に指定されている値を元にパターンの完全な形を推測して実行します。パターンの完全な形への変換はフックコマンドが宣言されたときに行われますので、その時に有効な
 <ref id="default_hook" name="$default_hook" >の値が使われます。
</p>
<sect1>
外部にアドレスを問い合わせる<label id="query" >
<p>
Mutt は LDAP や ph/qi や bbdb や NIS といった外部のディレクトリーデータベースへ、単純なインターフェイスを使ったラッパースクリプトを通して接続できます。<ref id="query_command" name="$query_command" >変数を使って利用するラッパースクリプトを指定します。例えば:
</p>
<p>
<verb>
set query_command = &quot;mutt_ldap_query.pl '&percnt;s'&quot;  
</verb>
</p><p>
ラッパースクリプトは問い合わせをコマンドラインから受け付けるようにして一行のメッセージを返すようにしてください。マッチした応答はそれぞれ一つの行になり、それぞれの行はタブで区切られたアドレス、それから名前、それから他の付加的な情報という風に並べます。エラーが起きたりマッチしたアドレスがなかった場合は0以外のコードを返すようにして一行のエラーメッセージを返すようにしてください。
</p>
<p>
複数の応答の出力の例:
</p>
<p>
<verb>
Searching database ... 20 entries ... 3 matching:  
me@cs.hmc.edu           Michael Elkins  mutt dude 
blong@fiction.net       Brandon Long    mutt and more 
roessler@guug.de        Thomas Roessler mutt pgp 
</verb>
</p><p>
Mutt では問い合わせ機能を利用するのに2つの仕組みが用意されています。一つはインデックスメニューから問い合わせ機能(初期値:
 Q)を使う方法です。これを使うとまず問い合わせのプロンプトを表示し、それからマッチした応答のリストを問い合わせメニューに表示します。問い合わせメニューでエイリアスを作成する宛先や今からメールを出す宛先を選択することができます。また複数にメッセージを送るためにタグつけすることも、新たに問い合わせを始めることも、今の応答に加えてさらに問い合わせをすることもできます。
</p>
<p>
もう一つの問い合わせ機能を利用する仕組みはアドレスの補完で、エイリアスの補完によく似ています。アドレスを入力するすべてのプロンプトで今タイプしようとしているアドレスに基づいて問い合わせを実行し、問い合わせ補完
 (complete-query function / 初期値: ^T)を使うことができます。エイリアス
 の時と同じように Mutt は最後にスペースかコンマを打った場所まで戻ってタイプされたアドレスを検索します。問い合わせに対して一つだけの応答があった場合その場でそのアドレスが展開されます。複数の応答があった場合は問い合わせメニューを呼び出します。問い合わせメニューで一つもしくは複数のア
 ドレスを選択してプロンプトに追加することができます。
</p>
<sect1>
メールボックスの形式
<p>
Muttは mbox、MMDF、MH、Maildirの4つの異なるメールボックスの形式をサポートし、読み書きできます。メールボックスのタイプは自動的に判定されるので異なるメールボックスのタイプを指定するフラグを使う必要はありません。新しいメールボックスを作成するときは
 <ref id="mbox_type" name="$mbox_type" >変数で指定されているタイプがデフォルトとして使われます。
</p>
<p>
<descrip>
 <tag>
mbox</tag>これは UNIX でもっとも広く使われているメールボックスの形式です。すべてのメールは一つのファイルに格納されます。それぞれのメールは次の形式の行を含み、この行が区切りとなり新しいメールが始まります。
 <verb>
From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST  
 </verb>
<p>
この行はよく From_ 行と呼ばれます。
</p>
 <tag>
MMDF</tag>これは mbox 形式の変形で、それぞれのメールは ^A^A^A^A
 (4つの Ctrl-A)を含む行で囲まれます。
 <tag>
MH</tag>mbox と MMDF を大幅に革新したものです。メールボックスはディレクトリーからなりそれぞれのメールは別々のファイルに格納されます。ファイル名はメール番号を示します(しかし、この番号は
 Muttが表示する番号とは一致しない場合もあります)。削除されたメールはファイル名の先頭にコンマ(,)がつけられます。<bf>注意</bf>:
 Mutt は .mh_sequences か .xmhcache というファイルがあるかどうかで
 MHメールボックスであると判断します(これらのファイルは普通のディレクトリと
 MHメールボックスを区別するのに必要です)。これらのファイルは muttによってアップデートはされません。
 <tag>
Maildir</tag>最新のメールボックスの形式で、Qmail という MTA
 で使われています(Qmail は sendmail を置き換える MTA です)。MH とよく似ていますが、メールボックスのサブディレクトリーとして、tmp、new、curという3つのディレクトリが加えられます。ファイル名は、たとえ他のプログラムが
 NFS を通して書き込んでも唯一であるような方法でつけられます。つまりファイルをロックする必要がありません。
</descrip>
</p><sect1>
メールボックスへのショートカット<label id="shortcuts" >
<p>
特定のメールボックスを参照するために定義済みのショートカットがたくさんあります。これらのショートカットはファイルやメールボックスのパスを入力するところならばどこでも使うことができます。
</p>
<p>
<itemize>
 <item>
!  -- <ref id="spoolfile" name="$spoolfile" >メールボックスを参照します
 <item>
&gt;  -- <ref id="mbox" name="$mbox" >ファイルを参照します
 <item>
&lt; -- <ref id="record" name="$record" >ファイルを参照します
 <item>
-または!! -- 最後に訪れたファイルを参照します
 <item>
<tt>&tilde;</tt> -- ホームディレクトリを参照します
 <item>
=または + -- <ref id="folder" name="$folder" >ディレクトリを参照します
 <item>
@alias -- エイリアスのアドレスで定義される「セーブを行うデフォルトのフォルダー」<ref id="save-hook" name="default save folder" >を参照します。
</itemize>
</p><sect1>
メーリングリストを扱う<label id="using_lists" >
<p>
Muttには大量のメールを扱うための設定オプションがいくつかあります。まず第一に
 Muttにどれがメーリングリストのアドレスであるか(技術的にはメーリングリストのアドレスである必要はありませんが、そういった用途で一番よく使われます)、どれが購読しているメーリングリストであるか教えてやります。これは
 <ref id="lists" name="lists and subscribe" >コマンドを muttrc に書いて設定 します。
</p>
<p>
そうして Mutt にどれがメーリングリストであるか教えてやるといくつかのことが可能になります。まず第一にそのリスト名をインデックスメニューで表示させることができるようになります。これは個人的なメールとメーリングリスト宛てのメールが同じメールボックスにあるときに区別するのに役立ちます。それから
 <ref id="index_format" name="$index_format" >変数での &percnt;L というエスケープはメーリングリストがあった場合は
 To &lt;list&gt; という文字列を返します。そして CC フィールドにリスト名があった場合は
 Cc &lt;list&gt; という文字列を返します(そうでなければメー ルの著者の名前を返します)。
</p>
<p>
しばしばメーリングリストのメールは To と Cc フィールドが膨大になっている傾向があります。ほとんどの人はメーリングリストで返信するときにわざわざ元の著者のアドレスを削除しようとはしません。結果として二つもしくはそれ以上のコピーがその人に送られてしまうことになります。インデックスメニューとページャーでデフォルトでは
 L キーに割り当てられている list-reply 機能 はすべての受信者に返信するのではなくメーリングリストのアドレスにのみ返信することで混乱を減らすことを手助けしてくれます。（<tt>Mail-Followup-To</tt>で指定した場合は例外です。以下を見てください）。
</p>
<p>
Muttは <tt>Mail-Followup-To</tt>へッダもサポートしています。<ref id="followup_to" name="$followup_to" >変数がセットしてあれば、メールを（メーリングリストへも含めて）何人もの人へ送る場合
 Mail-Followup-Toへッダがメールに追加され、それにはすべてのそのメールの受取人が含まれますがあなたのメールアドレスは含まれません。これによってそのメールへの
 group-repliesまたは list-replies（つまり followupです）は元々のメールの受取人に送られるのですが、あなたに別に送られることはありません。あなたには、購読しているメーリングリストを通して送られます。
</p>
<p>
反対に <tt>Mail-Followup-To</tt>へッダがついているメッセージに対して group-replyまたは
 list-replyをする場合には、<ref id="honor_followup_to" name="$honor_followup_to" >変数がセットされている場合にのみこのへッダを使います。この場合には<tt>
 Mail-Followup-To</tt>の受取人のリストに含まれていなくても list-replyはメーリングリストへも返信します。
</p>
<p>
へッダの編集が可能になっている場合には、自分で <tt>Mail-Followup-To</tt>へッダをつけることができます。Muttは送信時にこのへッダが無い場合のみ、このへッダを自動生成します。
</p>
<p>
もう一つの方法は Reply-To フィールドをメールの著者に設定するのではなく、メーリングリストのアドレスに設定することです。いくつかのメーリングリストの管理者はこの方法を採用しています。この方法はメールの著者に個人的に返信しようとするときに問題が生じます。というのはほとんどのメールクライアントは返信の動作を行うときには自動的に
 Reply-To フィールドに設定してあるアドレスを拾ってくるからです。Mutt
 では <ref id="reply_to" name="$reply_to" >変数を利用することでどのアドレスに返信するかどうかを決めるのを楽にすることができます。もしセットされていれば
 Reply-Toフィールドに指定されているアドレスに返信するか、 Fromフィールドのアドレスに返信するかを問い合わせてくれます。セットされていない場合は
 Reply-Toフィールドがあればそれが使われます。
</p>
<p>
X-Labelフィールドを使ってさらにメーリングリストや話題を特定することができます。<ref id="index_format" name="$index_format" >変数の
 &percnt;yと &percnt;Yは X-Label:フィールドをインデックスに展開するのに使えます。また
 Muttの正規表現を使ったパターンマッチは標準的なへッダフィールドにしか使えませんが、procmailなどのメールフィルタを使えば簡単に標準的なフィールドに挿入できます。
</p>
<p>
最後に、Muttはメールボックスをスレッド<ref id="threads" name="threads" >でソート<ref id="sort" name="sort" >することができます。一つのスレッドは同じ主題で関連するすべてのメールの一まとまりです。普通は一つのメールとそれに返信したすべてのメールが図形的に木のような構造で構成されます。もしスレッド機能を持ったニュースクライアントを使ったことがあるならばわかると思いますがそれと同じコンセプトです。これを利用すると、興味のない話題はスレッド毎に削除でき、また素早く話題の重要性を判断できるのでかなりの流量があるメーリングリストを簡単に扱えるようになります。
</p>
<sect1>
配送状態の通知(DSN)のサポート
<p>
RFC1894 では電子メールのメッセージの状態に関する情報の伝えるための
 MIME コンテントタイプが定められています。これらは「受取証が戻ってくる」と考えることができます。バークレー
 sendmail 8.8.x はメールクライアントがどのタイプの状態メッセージを返させるか要求できるようにいくつかのコマンドラインオプションを備えています。
</p>
<p>
これをサポートするために二つの変数が用意されています。 <ref id="dsn_notify" name="$dsn_notify" >は通常と異なったことが起ったことを通知する受取証を要求するのに使われます(メールが失敗した旨の通知、メールが配送された旨の通知等々)。
 <ref id="dsn_return" name="$dsn_return" >は受取証とともに戻ってくる元のメールの量を限定するように要求できます(ヘッダーもしくはすべてのメール)。DSN
 に関するさらに詳しい情報に関しては sendmailの man ページをご覧下さい。
</p>
<sect1>
POP3 サポート(オプション)
<p>
Mutt が POP3 のサポート付きでコンパイルされていた場合(configure
 スクリプトを --enable-pop フラグをつけて走らせていた場合)、リモート
 POP3サーバーにあるメールボックスを操作し、またローカルで閲覧するためにこちらにメッセージを取得することができるようになります。
</p>
<p>
フォルダ <tt>pop://popserver/</tt>を選択するとリモート POP3メールボックスにアクセスできます。
</p>
<p>
通常とちがうポートを使っている場合にはサーバとともにポートも指定します。つまり
 <tt>pop://popserver:port/</tt>という形です。
</p>
<p>
各々のフォルダにちがうユーザ名でアクセスすることもできます。<tt>pop://username@popserver&lsqb;:port&rsqb;/</tt>としてください。
</p>
<p>
新しいメールが届いているかどうかを確かめるのは POP3経由ではローカルの場合よりも資源を使います。このため
 Muttはリモートでメールチェックする間隔を <ref id="pop_checkinterval" name="$pop_checkinterval" >変数でコントロールします。デフォルトは60秒です。
</p>
<p>
もし Muttが SSLサポートつきでコンパイルされていた場合（<it>--with-ssl</it>フラグをつけて
 <it>configure</it>スクリプトを走らせます）、POP3サーバへの接続を暗号化できます。フォルダに
 POP3/SSLでアクセスするには popsという接頭辞をつけます。<tt>pops://&lsqb;username@&rsqb;popserver&lsqb;:port&rsqb;/
 としてください。</tt>
</p>
<p>
これ以外の POP3メールにアクセスする方法は <it>fetch-mail</it>機能（デフォルトでは
 Gに割り当てられています）です。これは<ref id="pop_host" name="pop_host" >で指定されているホストに接続して、すべての新着メールを取ってきてそれをローカルの<ref id="spoolfile" name="spoolfile" >に格納します。この後
 Mutt はメールがずっとローカルにあったかのように正確に振る舞うことができるようになります。
</p>
<p>
<bf>注意</bf>: もしすべてのメッセージをローカルメールボックスに持ってきたいだけなら、<htmlurl url="http://www.ccil.org/~esr/fetchmail" name="fetchmail">などのそれに特化したプログラムを使うことを考えた方がいいでしょう。
</p>
<sect1>
IMAP サポート(オプション)
<p>
Muttが IMAPサポート付きでコンパイルされていれば(configure スクリプトを
 --enable-imap フラグをつけて走らせていた場合)、リモート IMAP サーバー上にあるフォルダーを扱うことができるようになります。
</p>
<p>
<tt>imap://imapserver/INBOX</tt> フォルダーを選択することでリモートのインボックスにアクセスすることができます。ここで
 <tt>imapserver</tt> は IMAP サーバーの名前で <tt>INBOX</tt> は IMAP サーバーのスプールメールボックスの特別な名前です。もし
 IMAP サーバー上の他のメールフォルダーにアクセスしたい場合は、 <tt>imap://imapserver/path/to/folder</tt>
 と指定しなければなりません。ここで path/to/folder はアクセスしたいフォルダのバスです。
</p>
<p>
デフォルトではないポートを選ぶこともできます。<tt>imap://imapserver:port/INBOX
 </tt>のように指定してください。
</p>
<p>
また各々のフォルダを別のユーザー名でアクセスすることもできます。次のように指定してください。<tt>imap://username@imapserver&lsqb;:port&rsqb;/INBOX</tt>.
 
</p>
<p>
SSLのサポートつきで Muttをコンパイルした場合（<it>configure</it>スクリプトに
 <it>--enable-ssl</it>フラグをつけた場合）IMAPサーバへの接続を暗号化できます。当然サーバ側も
 SSLで暗号化した接続をサポートしている必要があります。IMAP/SSLを使ってフォルダにアクセスする場合はフォルダパスに
 <tt>imaps://&lsqb;username@&rsqb;imapserver&lsqb;:port&rsqb;/path/to/folder</tt>と指定しなければなりません。
</p>
<p>
Pineの場合と同じ書き方も使うことができます。<tt>&lcub;&lsqb;username@&rsqb;imapserver&lsqb;:port&rsqb;&lsqb;/ssl&rsqb;&rcub;path/to/folder
 というような書き方です。</tt>
</p>
<p>
すべてのサーバで / が階層を分けるのに使われているわけではないことに注意してください。Muttはサーバで使われているセパレータが何かを認識してそれに応じてフォルダパスを変換してくれるはずです。
</p>
<p>
一つの IMAPサーバ上のフォルダを見る場合、購読しているフォルダだけを見ることもすべてのフォルダを見ることも
 <it>toggle-subscribed</it>コマンドを使ってできます。<ref id="imap_list_subscribed" name="$imap_list_subscribed" >変数も参照してください。
</p>
<p>
新しいメールが来たかどうかを IMAPを通して確かめるのはかなりの遅れが生じます。そのために
 <ref id="mail_check" name="$mail_check" >変数と<ref id="timeout" name="$timeout" >変数を注意深く設定する必要があるかもしれません。私は個人的には
</p>
<p>
<verb>
set mail_check=90  
set timeout=15 
</verb>
</p><p>
という設定を遅い電話線経由で使ってますが、まあまあよい結果を得ています。
</p>
<p>
UWサーバの v12.250より前のバージョンでメールを保存するのに mboxを使っている場合には他のクライアントが同じフォルダを選ぶと今そのフォルダを使っているクライアントの接続を切るようにサーバに通知されます。注意してください。
</p>
<sect2>
フォルダブラウザ
<p>
Muttはバージョン 1.2から IMAPサーバ上のメールボックスのブラウズをサポートしました．これはほとんどローカルの場合と同じですが、以下のような違いがあります。
</p>
<p>
<itemize>
 <item>
ファイルの属性の代わりに IMAPという文字列を表示します。これの後ろにプラス(+)サインがつく場合がありますが、これはこの中にメッセージとサブフォルダの両方が含まれていることを意味します。Cyrus
 またはそれに似たサーバの場合にはしばしばフォルダの中にメッセージとサブフォルダが入っています。
 <item>
フォルダにメッセージとサブフォルダの両方が含まれている場合には、（デフォルトでは<tt>
 enter</tt>に割り当てられている）selectionキーを押すとその下のサブフォルダに入ります。もしそのフォルダのメッセージを見たい場合には（デフォルトでは
 <tt>space</tt>に割り当てられている）<tt>view-file</tt>を使わなければなりません。
 <item>
メールボックスを消すには <tt>delete-mailbox</tt>コマンド（デフォルトでは
 d）を使います。<tt>subscribe、unsubscribeコマンドを使ってメールボックスの購読、購読の取り消しができます。デフォルトではこれらのコマンドは
 sと uに割り当てられています。</tt>
</itemize>
</p><sect2>
認証
<p>
Muttは IMAPサーバの認証形式として SASL、GSSAPI、CRAM-MD5、 LOGINをサポートしています（Grant
 Edwardsがかわいそうな exchange ユーザのために NTLM認証を加えるパッチを書いてくれましたが、まだメインツリーには統合されていません
 ）。また疑似プロトコル ANONYMOUSもサポートしています。これは自分のアカウントがない公開
 IMAPサーバにログインするためのもので、ANONYMOUSを使うにはユーザ名を空白、または
 anonymousにしてください。
</p>
<p>
SASLは特別な認証形式で、これはあなたのホストとサーバで利用可能ないくつかのプロトコル（GSSAPI、CRAM-MD5、ANONYMOUS、
 DIGEST-MD5を含みます）の中から一番安全な方法を選びます。これらのうちのいくつかの方法（DIGEST-MD5と多分
 GSSAPI）では、セッション全体が暗号化され通信を覗かれても大丈夫になります。SASLが使えるならできるだけこれを使いましょう。これを使うには
 Cyrus SASLライブラリが必要で、muttをコンパイルするときに <it>--with-sasl</it>フラグをつけてください。
</p>
<p>
Muttは SASL、 ANONYMOUS、 GSSAPI、 CRAM-MD5、 LOGINの順番でどの方法が利用可能なのかを調べます。
</p>
<p>
認証形式をコントロールするいくつかの変数があります。
</p>
<p>
<itemize>
 <item>
<ref id="imap_user" name="$imap_user" > - すべての認証形式で認証に使うユーザ名です。この設定よりもメールボックスのパスに明示的に含まれるユーザ名（<tt>つまり
 &lcub;user@host&rcub;</tt>の形のメールボックスの指定です）の方が優先します。
 <item>
<ref id="imap_pass" name="$imap_pass" > - パスワードを必要とするすべての認証形式で認証に使うパスワードを設定します。
 <item>
<ref id="imap_authenticators" name="$imap_authenticators" > - コロンで区切られた IMAPサーバへの認証方法のリストです。この順に認証方法を試していきます。この変数が設定されている場合は
 muttのデフォルト（上で書いた順序ですべての方法で試す）を上書きします。
</itemize>
</p><sect1>
複数の IMAP/POP アカウントを使う (OPTIONAL)<label id="account-hook" >
<p>
いくつもの IMAPや POPサーバにアカウントを持っていると、認証のための設定が面倒で間違いを起こしやすくなります。そんなときは、account-hookを使えばいいでしょう。account-hookコマンドは
 folder-hookコマンドと同じように働きますが、メールボックスを開くときだけでなく、リモートのメールボックスにアクセスするときはいつも呼び出されます（フォルダブラウザ内も含みます）。
</p>
<p>
いくつかの例を見てください。
</p>
<p>
<verb>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'  
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo' 
account-hook imap://host2/ 'set tunnel=&quot;ssh host2 /usr/libexec/imapd&quot;' 
</verb>
</p><sect1>
WWW ブラウザーを起動して URL の場所に行く<label id="urlview" >
<p>
メールに URL(<em>unified resource locator</em> = http://www.mutt.org/
 のような WWW空間の住所)が含まれている場合は、それらすべての URL を含むメニューを表示させてそこから一つ選んで
 WWW ブラウザーを起動してそこに行くのが効率的ですよね。この機能は外部の
 urlviewプログラムによって提供されます。 urlviewプログラムは <htmlurl url="ftp://ftp.guug.de/pub/mutt/contrib/" name="ftp://ftp.guug.de/pub/mutt/contrib/">で手に入れることができます。またこれを使うための設定コマンドは:
</p>
<p>
<verb>
macro index &bsol;cb |urlview&bsol;n  
macro pager  &bsol;cb |urlview&bsol;n
</verb>
</p><p>
です。
</p>
<sect>
Mutt の MIME サポート
<p>
Mutt を最高のテキストベースの MIME MUA にするための多大な努力が払われてきました。すべての努力は眼識のある
 MIMEユーザーの要望を実装するように、また可能な限り標準に従うようにするために払われてきました。MIMEの設定を
 Muttで行うために Muttが使う2つの別のタイプのファイルがあります。一つは
 mime.types ファイルでこのファイルはファイルの拡張子と IANA MIME タイプとの対応付けが書かれています。もう一つは
 mailcap ファイルでこれは特定の MIME タイプを扱うのにどの外部コマンドを利用するかを指
 定します。
</p>
<sect1>
Mutt で MIME を使う
<p>
Mutt には MIME を扱う3つの場所/メニューがあります。ページャー(メールを閲覧する間)、ファイル添付メニュー、メール作成メニューです。
</p>
<sect2>
ページャーで MIME メールを閲覧する
<p>
インデックスでメールを選択してページャーで閲覧するときに Mutt
 はメールをテキストとして表示するようにデコードします。Mutt は自身でいくつかの
 MIMEタイプをサポートしています。text/plain、text/enriched、message/rfc822、
 message/news に加え、輸出管理されたバージョンの Mutt では PGP/MIME
 と application/pgp を含めさまざまな PGP MIME タイプを理解できます。
</p>
<p>
Mutt は添付ファイルをそれらを記述する二つの行とともに示します。これらの行は次の形式です:
</p>
<p>
<verb>
&lsqb;-- Attachment &num;1: Description --&rsqb;  
&lsqb;-- Type: text/plain, Encoding: 7bit, Size: 10000 --&rsqb; 
</verb>
</p><p>
Descriptionは添付ファイルに関する説明やファイル名です。Encodingは
 7bit、8bit、quoted-printable、base64、binary のうちのどれかです。
</p>
<p>
もし Mutt がある MIME タイプを自分自身では扱うことができない場合次のようなメッセージが表示されます:
</p>
<p>
<verb>
&lsqb;-- image/gif is unsupported (use 'v' to view this part) --&rsqb;  
</verb>
</p><sect2>
添付ファイルメニュー<label id="attach_menu" >
<p>
添付ファイルを見る機能(view-attachments)へのデフォルトのキー割り当ては
 `v' でそのメールの添付ファイルメニューを表示します。添付ファイルメニューはメールの添付ファイルのリストを表示し、そこから添付ファイルを保存したり印刷したりパイプに通したり削除したり閲覧したりできます。tag-prefix
 演算子を用いて複数の添付ファイルに対してタグつけを行い、これらの操作を複数の添付ファイルにたいして一度にまとめて行うこともできます。また、このメニューで読んでいるメールに対して返事を書くこともでき、その場合はカーソルのある(もしくはタグ付けされている)添付ファイルのみが返事の中で引用されます。添付ファイルをテキストとして閲覧でき、メイルキャップを使ってビューワーを定義して閲覧することもできます。
</p>
<p>
また、添付ファイルのタイプが <tt>message/rfc822</tt>なら（<ref id="resend-message" name="resend-message" >、リプライ、転送機能のような）普通のメッセージに関連する機能が使えます
</p>
<p>
詳しい情報に関しては添付ファイルメニューでのヘルプをご覧下さい。
</p>
<sect2>
メール作成メニュー<label id="compose_menu" >
<p>
メール作成メニューはメールを送る前に現れるメニューのことです。このメニューではそのメールに関する受信者のリストを編集したりサブジェクトを編集したりそして他のものも編集することができます。本文やメールの添付ファイルのリストを編集することもできます。印刷したり、フィルターをかけたり、パイプに通したり、編集したり、作成したり、もう一度確認のために閲覧したり、一つの添付ファイルもしくはタグ付けされた添付ファイルのリストの名前を変更したりすることが可能です。また添付ファイルに関する情報(特にタイプ、エンコード方式、属性)を変更することもできます。
</p>
<p>
添付ファイルは次のよう表示されます。
</p>
<p>
<verb>
-   1 &lsqb;text/plain, 7bit, 1K&rsqb;             /tmp/mutt-euler-8082-0 &lt;no description&gt;  
    2 &lsqb;applica/x-gunzip, base64, 422K&rsqb;   &tilde;/src/mutt-0.85.tar.gz &lt;no description&gt; 
</verb>
</p><p>
'-' はメールを送信(または送信の延期、キャンセル)した後に Mutt
 がそのファイルを削除することを示してい ます。リンクを外す/つなぐを切り替える(toggle-unlink/初期値:
 u)コマンドを使うことで '-' のオン/オフを切り替えることができます。次のフィールド
 は MIMEのコンテントタイプを示しておりこれはタイプを編集する(edit-type/
 初期値: ^T)コマンドで変更することができます。次のフィールドはファイルのエンコード方式を示しており、バイナリーメールを
 7bit で配送するためにエンコードすることができます。エンコード方式を変更する(edit-encoding/初期値:
 ^E)コマンドを使って変更することができます。次のフィールドはファイルサイズでキロバイトかメガバイトに切り捨てられて表示されます。次のフィールドはファイル名でファイル名を変更する
 (rename-file/初期値: R)コマンドで変更することができます。最後のフィールドは添付ファイルの説明で、説明を編集する(edit-description/初期値:
 d)コマンドで変更することができます。
</p>
<sect1>
mime.typesファイルを使って MIME タイプの設定を行う
<p>
メールにファイルの添付を行った場合、Muttは MIMEタイプファイルを
 <tt>&dollar;&lcub;HOME&rcub;/.mime.types</tt>に探しに行きそれからシステムの
 MIMEタイプファイルを <tt>/usr/local/share/mutt/mime.types</tt> か <tt>/etc/mime.types</tt>
 に探しに行きます
</p>
<p>
MIME タイプファイルは MIME タイプとスペースで隔てられた拡張子のリストか
 らなる行で構成されます。例えば:
</p>
<p>
<verb>
application/postscript          ps eps  
application/pgp                 pgp 
audio/x-aiff                    aif aifc aiff 
</verb>
</p><p>
MIMEタイプファイルのサンプルは Muttの配布物に含まれており、使いたい
 MIME タイプのほとんどは含まれているはずです。
</p>
<p>
Muttが添付されたファイルの拡張子から MIMEタイプを判断できなければ実際にファイルを見て確認します。ファイルがバイナリーの情報を含んでいなければ
 Muttはファイルをプレインテキストだとみなし、text/plainとマークします。ファイルがバイナリーの情報を含んでいれば
 application/octet-streamとマークします。Mutt が割り振る添付ファイルの
 MIME タイプを <tt>edit-type</tt>コマンド(初期値: T)を使って変更することができます。MIMEタイプはメジャー
 MIMEタイプとサブタイプが /で区切られてできています。application、
 text、 image、 video、 audio、それにインターネットでの議論の末あとから加えられた
 modelが6つのメジャータイプです。Muttはこれらすべてを mine.typesファイルに適当な項目があるかぎり認識します。またこれ以外のメジャータイプも認識します。例えば
 chemicalタイプは様々なフォーマットの分子データを色々な分子ビューアに渡すために分子モデルを作る集団ではよく使われています。ただし非標準的な
 MIMEタイプを使うのはメッセージの受取り手がそのような添付ファイルがくるとわかっている場合だけにしてください。
</p>
<sect1>
メールキャップファイルを編集して MIME ビューワーを設定する
<p>
Muttは RFC 1524の MIMEコンフィギュレーションを特に Unixに特有のフォーマットとして
 RFC 1524の Appendix Aで定義されるものに関してサポートしています。このファイルフォーマットは一般にメールキャップフォーマットと呼ばれます。多くの
 MIME 対応プログラムはメールキャップフォーマットを利用しており、すべてのプログラムでのすべてのMIME
 タイプの扱いを一か所で指定することができるようになっています。Netscape、XMosaic、lynx、metamail等がこのフォーマットを使っています。
</p>
<p>
Mutt が内部で扱うことができない様々な MIME タイプを扱うために
 Mutt は一連の外部のコンフィギュレーションファイルを解析して、扱うことができる外部のプログラムを探します。デフォルトのこれらのファイルを検索するための文字列はコロンで分けられたリストで次のようにセットされています。
</p>
<p>
<verb>
&dollar;&lcub;HOME&rcub;/.mailcap:/usr/local/share/mutt/mailcap:/etc/mailcap:&bsol;
/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap
</verb>
</p><p>
&dollar;HOME はホームディレクトリです。
</p>
<p>
特に、metamailの配布物にはメールキャップファイルが含まれており、普通
 は /usr/local/etc/mailcapにインストールされ、これにはいくつかの基本的なエントリーが含まれています。
</p>
<sect2>
メールキャップファイルの基本
<p>
メールキャップファイルはコメント行、空行、定義行からなる一連の行で構成されます。
</p>
<p>
コメント行は &num; 文字とそれに続く任意の文字で構成されます。
</p>
<p>
空行は空の行です。
</p>
<p>
定義行はコンテントタイプ、閲覧コマンド、任意の数のオプショナルなフィー
 ルドから構成されます。定義行のそれぞれのフィールドはセミコロン(;)文字で分けられます。
</p>
<p>
コンテントタイプは MIME で標準的な タイプ/サブタイプ 方式で指定します。例えば、text/plain、text/html、image/gif等とします。さらに、メールキャップの形式はワイルドカードを二つの形式で記述することができます。一つは
 '*' サブタイプを使う方法でもう一つはメジャータイプのみを記述する方法です。例えば、image/*
 もしくは video はすべての画像タイプとビデオタイプにそれぞれマッチします。
</p>
<p>
閲覧コマンドは指定されたタイプを閲覧するための Unixコマンドです。2つの異なるタイプのコマンドがサポートされています。デフォルトでは
 MIMEメッセージのボディー部をコマンドに標準入力として渡します。閲覧コマンドの変数に
 &percnt;sを使うことでこの動作を変更することができます。&percnt;sを使うと
 Muttは MIMEメッセージのボディー部を一時的なファイルに保存し、それから閲覧コマンドを呼び出します。この時
 &percnt;s は一時的なファイルの名前で置き換えられます。どちらの場合でも
 Mutt は閲覧プログラムが終了するまでそのプログラムに端末を渡します。閲覧プログラムが終了したときに一時的なファイ
 ルも(存在すれば)削除されます。
</p>
<p>
一番単純な形では、text/plain のメールを外部ページャープログラムの
 more に標準入力として渡すことができます:
</p>
<p>
<verb>
text/plain; more  
</verb>
</p><p>
もしくは、メールを一つのファイルとして渡すこともできます:
</p>
<p>
<verb>
text/plain; more &percnt;s  
</verb>
</p><p>
たぶん text/html のメールを閲覧するのに lynx を呼び出したいでしょう:
</p>
<p>
<verb>
text/html; lynx &percnt;s  
</verb>
</p><p>
この場合 lynx は標準入力からファイルを閲覧することをサポートしてませんから
 &percnt;s 構文を使わなければなりません。
</p>
<p>
<bf>注意</bf>: いくらか古いバージョンの lynx には text/html ファイルを閲覧するためにメールキャップファイルをチェックするところにバグがありました。これらのバージョンでは
 lynx を呼び出す行を探してそれを実行します。このため対象を閲覧するために絶え間なく自分自身を起動していたのです。
</p>
<p>
一方、lynx を対話的には使いたいのではなく、単に text/html を
 text/plain に変換したいだけかもしれません。そうであれば次のようにしてください:
</p>
<p>
<verb>
text/html; lynx -dump &percnt;s | more  
</verb>
</p><p>
あるいは text/html ファイルを閲覧する場合は lynx を使って、そのほかのテキスト形式を閲覧するにはページャーを使いたいと思うかもしれません。そうであれば次のようにしてください:
</p>
<p>
<verb>
text/html; lynx &percnt;s  
text/*; more 
</verb>
</p><p>
これはメールキャップファイルのもっとも単純な形式です。
</p>
<sect2>
メールキャップの安全な使い方
<p>
MIMEパラメータの中にあるシェルのメタキャラクタの解釈は一般にセキュリティの問題を引き起こす可能性があります。Muttは
 &percnt;s構文の展開で正しくパラメータを引用して危険な文字を代替して取り除こうとします。<ref id="mailcap_sanitize" name="mailcap_sanitize" >変数を見てください。
</p>
<p>
Muttはメールキャップからプログラムを実行するのに安全な方法をとっているのですが、他のメールキャップを使うプログラムはそれほど安全性に気をつけていないかも知れません。したがって次のようなことに注意する必要があります。
</p>
<p>
<bf>&percnt;変数を引用符で囲まないこと</bf><em>。</em>引用符(' )、ダブルクオート(&quot;)で&percnt;変数を囲まないでください。Muttがメールキャップを使う他のプログラムと同様に正しい方法で行ないます。またバッククオートを使った展開も使わないでください。eval
 文を使うときには特に注意して使うこと。できれば使わないでください。問題を直そうと思ってクオートを導入すると別の問題を引き起こします。
</p>
<p>
もし&percnt;変数の値がクオートやバッククオートの中に入れなければならない場合は、その値をシェル変数に代入して必要ならその変数を使うようにしてください。次の例では
 &dollar;charsetというシェル変数に代入して、それをバッククオートの中で使ってます。こうするとそれ自身がそれ以上の展開の対象にならないので安全です。
</p>
<p>
<verb>
text/test-mailcap-bug; cat &percnt;s; copiousoutput; test=charset=&percnt;&lcub;charset&rcub; &bsol;   
        &amp;&amp; test &quot;`echo &dollar;charset | tr '&lsqb;A-Z&rsqb;' '&lsqb;a-z&rsqb;'`&quot; != iso-8859-1 
</verb>
</p><sect2>
メールキャップの進んだ使い方
<sect3>
オプショナルフィールド
<p>
コンテントタイプと閲覧コマンドのフィールドは最低限必要ですが、それに加えてセミコロン
 ';' で区切られたフィールドをフラグをセットしたり他のオプションをセットするのに加えることができます。Mutt
 は次のフィールドをサポートしています:
</p>
<p>
<descrip>
 <tag>
copiousoutput</tag>このフラグは Mutt にそのコマンドがたくさんの量のテキストを標準出力に渡し得るということを教えます。これによって
 Mutt は閲覧コマンドの出力に対してページャーを起動します(内蔵のページャーを使うか外部のページャーを使うかは
 pager 変数の設定によります)。もしこのフラグがなければ Mutt はそのコマンドが対話的な操作が必要だと判断します。これは基本セクションで示した
 lynx -dump の例での more コマンドへのパ イプを置き換えることができます:
 <verb>
text/html; lynx -dump &percnt;s ; copiousoutput  
 </verb>
</descrip>
</p><p>
こうすることで lynx は text/html の出力を text/plain の形式に変換し、
 Mutt はその結果を表示するのに標準のページャーを用います。
</p>
<p>
<descrip>
 <tag>
needsterminal</tag>Mutt は自動閲覧機能<ref id="auto_view" name="autoview" >で添付ファイルを閲覧する時に
 <ref id="wait_key" name="$wait_key" >変数の設 定を使うかどうかを決定するためにこのフラグを使います。もし対話的なプログラムを使って添付ファイルを閲覧し、そして対応するメールキャップエントリーに
 needsterminal フラグがあれば、Mutt は <ref id="wait_key" name="$wait_key" >変数を使い、そして外部プログラムを終了するときに終了状態によって何かのキーを押すように要求するかどうかを決めます。そのほかのすべての場合では何かのキーを押すように促したりはしません。
 <tag>
compose=&lt;command&gt;</tag>このフラグは指定した MIME タイプで新たな添付ファイルを作成する時のコマンドを指定します。Mutt
 はこれをメール作成メニューでサポートしています。
 <tag>
composetyped=&lt;command&gt;</tag>このフラグは指定した MIME
 タイプで新たな添付ファイルを作成する時のコマンドを指定します。composeコマンドとの違いはこのコマンドでは
 Muttがそのデータに標準的な MIMEタイプを期待することです。これは特定のパラメーターやファイル名や説明書きなどで使うことができます。
 Muttはこれをメール作成メニューでサポートしています。
 <tag>
print=&lt;command&gt;</tag>このフラグは指定した MIMEタイプを印刷するときに使うコマンドを指定します。Muttはこのコマンドをファイル添付メニューとメール作成メニューでサポートしています。
 <tag>
edit=&lt;command&gt;</tag>このフラグは指定した MIME タイプを編集する時に使うコマンドを指定します。Mutt
 はこのコマンドをメール作成メニューでサポートしており、また新しい添付ファイルを作成する時にそれを使います。Muttはここで定義されたエディタをテキストの添付ファイルのためのデフォルトにします。
 <tag>
nametemplate=&lt;template&gt;</tag>このフィールドはコマンドフィールドで
 &percnt;sで示されるファイルの形式を指定します。なんらかのプログラムは、例えば正しく閲覧するのに特定の拡張子を持つファイルであることを要求します。例えば、lynx
 はファイルが .html で終わっている場合のみファイルを text/html として解釈します。ですから
 lynx を text/html を閲覧するコマンドに指定する場合 はメールキャップファイルに次のようにします:
 <verb>
text/html; lynx &percnt;s; nametemplate=&percnt;s.html  
 </verb>
 <tag>
test=&lt;command&gt;</tag>このフィールドは使おうとするメールキャップエントリーを本当に使うべきかどうかを試すコマンドを指定します。コマンドは次のセクションで定義されているコマンド展開ルールで定義します。コマンドが0を返した場合はテストに通ったとされ、Mutt
 はそのエントリーを使います。もしコマンドが0以外の値を返した場合はテストに通らなかったとされ、Mutt
 は正しいエントリーを探し続けます。<bf>注意</bf>: まずコンテントタイプがマッチしていた場合のみにテストは実行されます。例えば:
 <verb>
text/html; netscape -remote 'openURL(&percnt;s)' ; test=RunningX  
text/html; lynx &percnt;s 
 </verb>
</descrip>
</p><p>
この例では Muttは RunningXプログラムを走らせます。このプログラムは
 X Window managerが起動していれば0を返し、そうでなければ0以外の値を返します。RunningX
 が0を返せば Mutt は text/html オブジェクトを表示するのに Netscapeを呼び出し、0以外の値を返せば
 Mutt は次のエントリーに行き、text/html オブジェクトを表示するのに
 lynx を使います。
</p>
<sect3>
検索順序
<p>
メールキャップファイルの中のエントリーを検索する時、Muttはもっとも目的にかなったエントリーを探します。例えば、もし
 image/gif を印刷しようとしていて次のようなエントリーがメールキャップファイルにあれば
 Mutt は printコマンドを含んでいるエントリーを検索します:
</p>
<p>
<verb>
image/*;        xv &percnt;s  
image/gif;      ; print= anytopnm &percnt;s | pnmtops | lpr;  &bsol;   
                nametemplate=&percnt;s.gif 
</verb>
</p><p>
Mutt は image/* エントリーをスキップして print コマンドを含む
 image/gif エントリーを使います。
</p>
<p>
また、添付ファイルを閲覧するために2つのコマンドを指定することでこれを自動閲覧機能<ref id="auto_view" name="Autoview" >といっしょに使うことができます。1つは自動的に閲覧するためのコマンドでもう1つは添付ファイルメニューで対話的に閲覧するためのコマンドです。さらにそれから
 test 機能を利用することで環境にあわせて対話的にビューワー を決めることができます。
 
</p>
<p>
<verb>
text/html;      netscape -remote 'openURL(&percnt;s)' ; test=RunningX  
text/html;      lynx &percnt;s; nametemplate=&percnt;s.html 
text/html;      lynx -dump &percnt;s; nametemplate=&percnt;s.html; copiousoutput 
</verb>
</p><p>
copiousoutput タグがついているので自動閲覧<ref id="auto_view" name="Autoview" >するのに Mutt は3番目のエントリーを選択します。対話的に閲覧するのに
 Mutt はまず1番目のエントリーを使うべきかどうか RunningX プログラムを走らせ、もし0以外の値をプログラムが
 返せば2番目のエントリーを使います。
</p>
<sect3>
コマンドの展開
<p>
メールキャップファイルで定義されている様々なコマンドは system()
 関数を通して /bin/sh シェルに渡されます。コマンドが /bin/sh -c に渡される前に情報を持つ様々な特殊なパラメーターは
 Mutt によって展開されます。Muttが展開するキーワードは:
</p>
<p>
<descrip>
 <tag>
&percnt;s</tag>メールキャップファイルの基本の章でみたように、この変数は呼び出すプログラムによって指定されたファイル名に展開されます。このファイルは閲覧/印刷/編集するメッセージのボディを含んでおり、もしくは作成プログラムが作成結果に置き換えるメッセージのボディを含んでいます。さらに、このキーワードを使うことで
 Mutt がメッセージのボディを閲覧/印刷/編集するプログラムに標準入力として渡さないようにすることができます。
 <tag>
&percnt;t</tag>Mutt は &percnt;t をメッセージのコンテントタイプのテキスト表示に置き換えます。形式はメールキャップ定義行の始めのパラメーターと同じで、
 text/htmlとか image/gif とかです。
 <tag>
&percnt;&lcub;&lt;parameter&gt;&rcub;</tag>Mutt はこれをメールの
 Content-Type: 行の中の指定されたパラメータの値に展開します。例えば、メールが次の行を含んでいると:
 <verb>
Content-Type: text/plain; charset=iso-8859-1  
 </verb>
</descrip>
</p><p>
Mutt は &percnt;&lcub;charset&rcub; を iso-8859-1 に展開します。デフォルトの
 metamail のメールキャップファイルはこの機能をメールを閲覧するのに正しい文字セットを使って
 xterm を起動するために文字セットをチェックするのに使っています。
</p>
<p>
<descrip>
 <tag>
&bsol;&percnt;</tag>は &percnt; に置き換えられます。 Mutt は今のところ
 RFC 1524 で定義されている &percnt;F と &percnt;n キーワードはサポートしていません。これらパラメーターの主な目的は
 Mutt の内部でマルチパートメールを扱うことです。
</descrip>
</p><sect2>
メールキャップファイルの例
<p>
このメールキャップファイルはかなり単純でそして標準的なものです:
</p>
<p>
<code>
&num; 常に X を起動しています :)
video/*;        xanim &percnt;s &gt; /dev/null 
image/*;        xv &percnt;s &gt; /dev/null 
&num; 常に Netscape を起動しています(多くのメモリーがある場合だけでしょう)
text/html;      netscape -remote 'openURL(&percnt;s)'  
</code>
</p><p>
このメールキャップファイルはたくさんの例を示しています:
</p>
<p>
<code>
&num; すべてのビデオを閲覧するのに xanim を使い、xanim が起動時に生成するヘ 
&num; ッダーをみたくないのでそれを /dev/null に送ります。 
video/*; xanim &percnt;s &gt; /dev/null 
&num; HTML をリモートを使って動いている Netscape に送ります。 
text/html; netscape -remote 'openURL(&percnt;s)'; test=RunningNetscape 
&num; X は起動していても Netscape は起動していない場合は Netscape を起動して 
&num; オブジェクトを閲覧します。 
text/html; netscape &percnt;s; test=RunningX 
&num; それ以外は lynx を使ってテキストとして閲覧します。 
text/html; lynx &percnt;s 
&num; この書き方では text/html を text/plain に変換します。 
text/html; lynx -dump &percnt;s; copiousoutput
&num; enriched.sh は text/enriched を text/html に変換します。それから lynx 
&num; -dump を使って text/plain に変換します。 
text/enriched; enriched.sh ; copiousoutput
&num; テキストを印刷するのに enscript コマンドを使って1ページを2列にします
text/*; more &percnt;s; print=enscript -2Gr &percnt;s
&num; Netscape は JPEG を内部で閲覧するためにフラグを加えます。 
image/jpeg;xv &percnt;s; x-mozilla-flags=internal
&num; X を起動していれば画像を閲覧するのに xv を使います。 
&num; さらに &bsol; を使って行を分割し、画像を編集するコマンドを指定しています。 
image/*;xv &percnt;s; test=RunningX; &bsol; 
edit=xpaint &percnt;s
&num; 画像を netpbm ツールを使ってテキストに変換しています。 
image/*; (anytopnm &percnt;s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |  
pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput
&num; Excel のスプレッドシートを NT に送っています。 
application/ms-excel; open.pl &percnt;s
</code>
</p><sect1>
MIME 自動閲覧<label id="auto_view" >
<p>
メールキャップファイルで添付ファイルを閲覧するための MIME 閲覧コマンドを
 Mutt に明示的に教えてやる他に、Mutt はページャーの中で MIME 添付ファイルを自動的に閲覧する機能を備えています。
</p>
<p>
機能させるにはメールキャップファイルの中で、対話的でないコマンドであることを示す
 copiousoutput オプションを含む閲覧コマンドを指定しなければなりません。また一般的には、ページャーで閲覧できるように添付ファイルをテキスト表示に変換するエントリーを指定することになります。
</p>
<p>
それから muttrc で auto_view コマンドを使って自動的に閲覧したいコンテントタイプをリストします。
</p>
<p>
例えば、次のように auto_view を指定していると:
</p>
<p>
<verb>
auto_view text/html text/enriched application/x-gunzip applic
ation/postscript image/gif application/x-tar-gz  
</verb>
</p><p>
Mutt は(もしあれば)次のようなメールキャップエントリーをこれらのタイプの添付ファイルを自動的に閲覧するのに使います。
</p>
<p>
<verb>
text/html;      lynx -dump &percnt;s; copiousoutput; nametemplate=&percnt;s.html  
text/enriched;  enriched.sh  ; copiousoutput 
image/*;        anytopnm &percnt;s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | pgmtopbm | pbmtoascii ; copiousoutput 
application/x-gunzip;   gzcat; copiousoutput 
application/x-tar-gz; gunzip -c &percnt;s | tar -tf - ; copiousoutput 
application/postscript; ps2ascii &percnt;s; copiousoutput 
</verb>
</p><sect1>
MIME Multipart/Alternative<label id="alternative_order" >
<p>
Mutt は multipart/alternative タイプの添付ファイルを表示するのにいくらか発見的な手法を用いています。まず第一に
 Mutt alternative_order リストをチェックして可能なタイプのうちの一つが設定されていればそれに決めます。alternative_orderはたくさんの
 MIMEタイプを順に並べたリストで、明示的/暗示的なワイルドカードのサポートも含みます。例:
</p>
<p>
<verb>
alternative_order text/enriched text/plain text application/postscript image/*  
</verb>
</p><p>
次に Mutt はタイプが <ref id="auto_view" name="auto_view" >のうちのどれかのタイプで定義されていないかどうかをチェックし、それを使います。それに失敗すると
 Muttはなんらかのテキストタイプを探します。最後に Muttはそれを扱うことができるなんらかのタイプを探そうとします。
</p>
<sect>
Reference 
<sect1>
コマンドラインオプション<label id="commandline" >
<p>
引数なしに <tt>mutt</tt>を実行すると Mutt はスプールメールボックスを読みに行きます。しかし、コマンドラインから指定してやることで他のメールボックスを読んだりコマンドラインから直接メールを送ったりすることも可能です。
</p>
<p>
<verb>
-a      メールにファイルを添付する 
-b      BCCのアドレスを指定
-c      カーボンコピー (Cc) の宛先を指定する 
-e      初期化ファイルが読まれた後に実行する設定コマンドを指定 
-f      読み込むメールボックスを指定 
-F      指定したファイルから初期化コマンドを読み込む 
-h      コマンドラインオプションについてのヘルプを表示 
-H      ドラフトとしてヘッダと本文を読み出すファイルを指定 
-i      メッセージ作成時に取り込むファイルを指定 
-m      デフォルトのメールボックスの種類を指定 
-n      システムの Muttrc を読まない 
-p      延期していたメールを呼び出す 
-R      メールボックスを読み取り専用で開く 
-s      subject を指定 (空白を含むときは引用符で囲む) 
-v      バージョンとコンパイル時の定義を表示 
-x      mailx(1) の作成モードを真似る 
-y      mailboxes コマンドで指定されたファイルを含んだメニューを表示させる 
-z      メールボックスにメッセージが存在しないなら直ちに終了する 
-Z      新しいメッセージのある最初のフォルダを開く、無いなら直ちに終了する
</verb>
</p><p>
メールボックス内のメッセージを読むには
</p>
<p>
<tt>mutt</tt> &lsqb; -nz &rsqb; &lsqb; -F <it>muttrc</it> &rsqb; &lsqb; -m <it>type</it>
 &rsqb; &lsqb; -f <it>mailbox</it> &rsqb;  
</p>
<p>
新規にメッセージを作成するには
</p>
<p>
<tt>mutt</tt> &lsqb; -n &rsqb; &lsqb; -F <it>muttrc</it> &rsqb; &lsqb; -a <it>file</it>
 &rsqb; &lsqb; -c <it>address</it> &rsqb; &lsqb; -i <it>filename</it> &rsqb; &lsqb;
 -s <it>subject</it> &rsqb; <it>address</it> &lsqb; <it>address</it> ... &rsqb;  
</p>
<p>
Mutt は準備されたメッセージを送信する batch モードにも対応しています。単に、送信したいファイルから入力をリダイレクトしてください。例えば、
</p>
<p>
<tt>mutt -s &quot;data set for run &num;2&quot; professor@bigschool.edu
 &lt; /run2.dat</tt> 
</p>
<p>
このコマンドにより data set for run &num;2 という subjectのメールが
 professor@bigschool.edu宛に送信されます。そのメッセージの本文はファ
 イル &tilde;/run2.dat の内容になります。
</p>
<sect1>
設定コマンド<label id="commands" >
<p>
mutt は以下のようなコマンドを理解します。
</p>
<p>
<itemize>
 <item>
<tt><ref id="account-hook" name="account-hook" ></tt> <it>pattern</it> <it>command</it>
 <item>
<tt><ref id="alias" name="alias" ></tt> <it>key</it> <it>address</it> &lsqb; , <it>address</it>, ... &rsqb; 
 <item>
<tt><ref id="alias" name="unalias" ></tt> &lsqb; * | <it>key</it> ... &rsqb; 
 <item>
<tt><ref id="alternative_order" name="alternative_order" ></tt> <it>mimetype</it> &lsqb; <it>mimetype</it> ... &rsqb; 
 <item>
<tt><ref id="auto_view" name="auto_view" ></tt> <it>mimetype</it> &lsqb; <it>mimetype</it> ... &rsqb; 
 <item>
<tt><ref id="bind" name="bind" ></tt> <it>map</it> <it>key</it> <it>function</it> 
 <item>
<tt><ref id="charset-hook" name="charset-hook" ></tt> <it>alias</it> <it>charset</it>
 <item>
<tt><ref id="color" name="color" ></tt> <it>object</it> <it>foreground</it> <it>background</it> &lsqb; <it>regexp</it> &rsqb; 
 <item>
<tt><ref id="color" name="uncolor" ></tt> <it>index</it> <it>pattern</it> &lsqb; <it>pattern</it> ... &rsqb;
 <item>
<tt><ref id="exec" name="exec" ></tt> <it>function</it> &lsqb; <it>function</it> ... &rsqb; 
 <item>
<tt><ref id="fcc-hook" name="fcc-hook" ></tt> <it>pattern</it> <it>mailbox</it> 
 <item>
<tt><ref id="fcc-save-hook" name="fcc-save-hook" ></tt> <it>pattern</it> <it>mailbox</it>
 <item>
<tt><ref id="folder-hook" name="folder-hook" ></tt> <it>pattern</it> <it>command</it> 
 <item>
<tt><ref id="hdr_order" name="hdr_order" ></tt> <it>header</it> &lsqb; <it>header</it> ... &rsqb; 
 <item>
<tt><ref id="hdr_order" name="unhdr_order" ></tt> <it>header</it> &lsqb; <it>header</it> ... &rsqb; 
 <item>
<tt><ref id="charset-hook" name="iconv-hook" ></tt> <it>charset</it> <it>local-charset</it> 
 <item>
<tt><ref id="ignore" name="ignore" ></tt> <it>pattern</it> &lsqb; <it>pattern</it> ... &rsqb; 
 <item>
<tt><ref id="ignore" name="unignore" ></tt> <it>pattern</it> &lsqb; <it>pattern</it> ... &rsqb;
 <item>
<tt><ref id="lists" name="lists" ></tt> <it>address</it> &lsqb; <it>address</it> ... &rsqb;  
 <item>
<tt><ref id="lists" name="unlists" ></tt> <it>address</it> &lsqb; <it>address</it> ... &rsqb;  
 <item>
<tt><ref id="macro" name="macro" ></tt> <it>menu</it> <it>key</it> <it>sequence</it> &lsqb; <it>description</it> &rsqb; 
 <item>
<tt><ref id="mailboxes" name="mailboxes" ></tt> <it>filename</it> &lsqb; <it>filename</it> ... &rsqb; 
 <item>
<tt><ref id="mbox-hook" name="mbox-hook" ></tt> <it>pattern</it> <it>mailbox</it> 
 <item>
<tt><ref id="message-hook" name="message-hook" ></tt> <it>pattern</it> <it>command</it>
 <item>
<tt><ref id="color" name="mono" ></tt> <it>object attribute</it> &lsqb; <it>regexp</it> &rsqb; 
 <item>
<tt><ref id="color" name="unmono" ></tt> <it>index</it> <it>pattern</it> &lsqb; <it>pattern</it> ... &rsqb; 
 <item>
<tt><ref id="my_hdr" name="my_hdr" ></tt> <it>string</it> 
 <item>
<tt><ref id="my_hdr" name="unmy_hdr" ></tt> <it>field</it> &lsqb; <it>field</it> ... &rsqb; 
 <item>
<tt><ref id="pgp-hook" name="pgp-hook" ></tt> <it>pattern</it> <it>key-id</it> 
 <item>
<tt><ref id="push" name="push" ></tt> <it>string</it> 
 <item>
<tt><ref id="set" name="reset" ></tt> <it>variable</it> &lsqb;<it>variable</it> ... &rsqb; 
 <item>
<tt><ref id="save-hook" name="save-hook" ></tt> <it>regexp</it> <it>filename</it> 
 <item>
<tt><ref id="score-command" name="score" ></tt> <it>pattern</it> <it>value</it> 
 <item>
<tt><ref id="score-command" name="unscore" ></tt> <it>pattern</it> &lsqb; <it>pattern</it> ... &rsqb; 
 <item>
<tt><ref id="send-hook" name="send-hook" ></tt> <it>regexp</it> <it>command</it> 
 <item>
<tt><ref id="set" name="set" ></tt> &lsqb;no|inv&rsqb;<it>variable</it>&lsqb;=<it>value</it>&rsqb; &lsqb; <it>variable</it>
 ... &rsqb; 
 <item>
<tt><ref id="source" name="source" ></tt> <it>filename</it> 
 <item>
<tt><ref id="lists" name="subscribe" ></tt> <it>address</it> &lsqb; <it>address</it> ... &rsqb;  
 <item>
<tt><ref id="lists" name="unsubscribe" ></tt> <it>address</it> &lsqb; <it>address</it> ... &rsqb;  
 <item>
<tt><ref id="set" name="toggle" ></tt> <it>variable</it> &lsqb;<it>variable</it> ... &rsqb;
 <item>
<tt><ref id="unhook" name="unhook" ></tt> <it>hook-type</it>
</itemize>
</p><sect1>
設定用変数<label id="variables" >
<sect2>
abort_nosubject<label id="abort_nosubject" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
yes にセットしてあると、メッセージ作成時に subjectプロンプトで
 subjectを与えなかった場合、作成を中断します。 no に設定してあると中断されません。
</p>
<sect2>
abort_unmodified<label id="abort_unmodified" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
yesにセットされていると、メッセージの本文の編集を終えたときに何も変更が加えられていなかった場合、作成は自動的に破棄されます(そのファイルの編集を行った最初の時にのみチェックされます)。no
 にセットされていると変更を加えていない場合にも作成は破棄されません。
</p>
<sect2>
alias_file<label id="alias_file" >
<p>
<verb>
Type: path 
Default: &quot;&tilde;/.muttrc&quot;
</verb>
</p><p>
<ref id="create-alias" name="create-alias" >機能で生成されたエイリアスを保存するデフォルトファイル
</p>
<p>
<bf>注意</bf>: Mutt はこのファイルを自動的には読み込みません。実行するには明示的に
 <ref id="source" name="source" >コマンドを用いてください。
</p>
<sect2>
alias_format<label id="alias_format" >
<p>
<verb>
Type: string 
Default: &quot;&percnt;4n &percnt;2f &percnt;t &percnt;-10a   &percnt;r&quot; 
</verb>
</p><p>
alias メニューで表示されるデータの書式を設定します。以下の printf(3)
 スタイルのシークエンスが使用可能です。
</p>
<p>
<verb>
&percnt;a      エイリアス名 
&percnt;f      フラグ - 今のところ d は削除マークをつけられたエイリアス
&percnt;n      インデックス番号 
&percnt;r      展開されるアドレス 
&percnt;t      選択されたエイリアスを示す記号
</verb>
</p><sect2>
allow_8bit<label id="allow_8bit" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
メールを送るときに、Quoted-Printableもしくは Base64 エンコードで
 8-bit データを 7-bit に変換するかどうかを指定します。
</p>
<sect2>
allow_ansi<label id="allow_ansi" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
メッセージの中の ANSIカラーコード(とリッチテキストメッセージのカラータグ)を解釈するかどうかをコントロールします。これらのコードを含むメッセージを受け取ることははほとんどないでしょうが、受け取った場合はこのオプションがセットされているとそれに応じて色がつきます。ただし、あなたの色の設定を上書きしてしまう可能性がありますし、また安全性の問題もあります。例えば、メッセージ中に
 &lsqb;-- PGP output follows ... というような文があって、それにあなたの添付ファイル用の色と同じ色が使われているような場合には、区別できなくなります。
</p>
<sect2>
alternates<label id="alternates" >
<p>
<verb>
Type: regular expression
Default: &quot;&quot;
</verb>
</p><p>
メールを受け取る別の(alternate)アドレスを指定することができるようにするための正規表現です。どのメッセージが自分からのもので、どのメッセージが自分宛であるのかを
 Mutt が区別するのに使います。
</p>
<sect2>
arrow_cursor<label id="arrow_cursor" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットしてあると、現在のエントリを示すのに、その行全体をハイライトする代わりに矢印
 (-&gt;) が使われます。遅いネットワークやモデムでの接続の場合、これにより反応がはやくなるでしょう。メニューの前後のエントリに移動する際の再描画に要する時間が短縮されるためです。
</p>
<sect2>
ascii_chars<label id="ascii_chars" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットしてあると、スレッドや添付ファイルのツリーを表示する際に
 ASCII 文字を使います。デフォルトでは ACS 文字を使って表示します。
</p>
<sect2>
askbcc<label id="askbcc" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
セットしてあると、送るメッセージを編集する前に、ブラインド・カーボン・コピー(Bcc)の送信先を聞いてきます。
</p>
<sect2>
askcc<label id="askcc" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットしてあると、送るメッセージの本文を編集する前に、カーボン・コピー(Cc)の送信先を聞いてきます。
</p>
<sect2>
assumed_charset<label id="assumed_charset" >
<p>
<verb>
Type: string 
Default: &quot;us-ascii&quot;
</verb>
</p><p>
（jaパッチの拡張機能）文字符号化方式の指定が行われていないへッダフィールドやボディはデフォルトでは
 us-ascii とみなされます。 このオプションを設定すると、設定した文字符号化方式であると推定します。推定に使う文字符号化方式はコロンで区切られた複数のものを設定できます。例えば、日本語の場合では次のように設定するとよいでしょう。
</p>
<p>
<verb>
set assume_charset=&quot;iso-2022-jp:euc-jp:shift_jis:utf-8&quot;
</verb>
</p><p>
ただし、メッセージボディの場合は最初のものしか有効ではありません。なお、このオプションは
 strict_mime=no を設定しないと有効になりません。
</p>
<sect2>
attach_format<label id="attach_format" >
<p>
<verb>
Type: format string 
Default: &quot;&percnt;u&percnt;D&percnt;I &percnt;t&percnt;4n &percnt;T&percnt;.40d&percnt;&gt; &lsqb;&percnt;.7m/&percnt;.10M, &percnt;.6e&percnt;?C?, &percnt;C?, &percnt;s&rsqb; &quot;
</verb>
</p><p>
この変数で添付ファイルメニュー(attachment menu)での表示形式を記述します。つぎの
 printf スタイルのシーケンスが解釈されます。
</p>
<p>
<verb>
&percnt;D      削除フラグ 
&percnt;d      説明書き 
&percnt;e      MIME content-transfer-encoding 
&percnt;f      ファイル名 
&percnt;I      配置 (I=inline, A=attachment) 
&percnt;m      MIME タイプのメジャータイプ 
&percnt;M      MIME タイプのサブタイプ 
&percnt;n      添付ファイル番号 
&percnt;s      サイズ 
&percnt;t      タグつけされていることを示すフラグ 
&percnt;u      アンリンク(= 削除予定)フラグ
&percnt;&gt;X     残りの文字列を右寄せにして間を &quot;X&quot; で埋める 
&percnt;|X     行末まで &quot;X&quot; で埋める
</verb>
</p><sect2>
attach_sep<label id="attach_sep" >
<p>
<verb>
Type: string 
Default: &quot;&bsol;n&quot; 
</verb>
</p><p>
タグつけされた複数の添付ファイルになんらかの演算(セーブ、印刷、パイプに通すなど)を施すときに添付ファイルの間に挿入する区切り。
</p>
<sect2>
attach_split<label id="attach_split" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされていない場合、タグつけされた複数の添付ファイルになんらかの演算(セーブ、印刷、パイプに通すなど)を施すときに、Mutt
 は添付ファイルを結合してそれらをまとめて1つの添付ファイルとしてそれに演算を施します。それぞれの添付ファイルの後には
 <ref id="attach_sep" name="$attach_sep" >区切りが挿入されます。セットされている場合は Mutt はそれぞれの添付ファイルに一つづつ演算を施します。
</p>
<sect2>
attribution<label id="attribution" >
<p>
<verb>
Type: string 
Default: &quot;On &percnt;d, &percnt;n wrote:&quot; 
</verb>
</p><p>
返信の際に、引用したメッセージの前につける文です。printf()に似たシークエンスの完全なリストは
 <ref id="index_format" name="$index_format" >の節を参照してください。
</p>
<sect2>
autoedit<label id="autoedit" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
<ref id="edit_headers" name="$edit_headers" >変数といっしょにセットしてある場合は他のメッセージに返信する際に、最初の
 send-menu を飛ばし、直ちにメッセージ本文の編集をはじめます。ただし、本文編集後には
 send-menu にいく場合もあります。
</p>
<p>
<ref id="fast_reply" name="fast_reply" >も見てください。
</p>
<sect2>
auto_tag<label id="auto_tag" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
セットしてある場合は、インデックスメニューにある一つのメッセージに働くコマンドが、タグの付いた全てのメッセージに適用されます。セットされていない場合は、すべてのタグづけされたメッセージにコマンドを適用するには、
 tag-prefix コマンド（デフォルトは ;）を適用するコマンドの前につけなければなりません。
</p>
<sect2>
beep<label id="beep" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
この変数が set してあると、エラーが起こったときに音を鳴らします。
</p>
<sect2>
beep_new<label id="beep_new" >
<p>
<verb>
Type boolean 
Default: no 
</verb>
</p><p>
この変数がセットしてあると、新しいメールが来たことを知らせるメッセージを表示する際にビープ音を鳴らします。これは
 <ref id="beep" name="beep" >変数の設定とは独立しています。
</p>
<sect2>
bounce_delivered<label id="bounce_delivered" >
<p>
<verb>
Type boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされているとメッセージを中継するときに Delivered-Toへッダをつけます。Postfixのユーザーはこの変数を
 unsetしたほうがいいでしょう。
</p>
<sect2>
charset<label id="charset" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
テキストデータを表示したり入力するときに使う端末の文字セットです。
</p>
<sect2>
check_new<label id="check_new" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
<bf>注意</bf>: このオプションは maildir および MH 形式のメールボックスに対してのみ効果を持ちます。
</p>
<p>
セットしてあると、メールボックスを開くときに新しいメールをチェックします。とくに
 MH 形式のメールボックスに対しては、この操作はディレクトリと各ファイルが既に読んだものかどうか調べるのに、しばらくの時間を要します。check_new
 がセットされていない場合は、メールボックスを開くときに、新しいメールのチェックはされません。
</p>
<sect2>
collapse_unread<label id="collapse_unread" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットされていない場合は、Muttはスレッドに未読のメールが含まれている場合はそのスレッドを折り畳みません。
</p>
<sect2>
create_rfc2047_parameters
<p>
<verb>
Type: boolean
Default: no
</verb>
</p><p>
（jaパッチの拡張機能）この変数を設定すると、Muttは添付ファイルのファイル名として次のようなRFC2047形式で符号化されたパラメータを
 Content-Typeフィールドに追加します。
</p>
<p>
<verb>
name=&quot;試験.txt&quot;
</verb>
</p><p>
注記: このようなRFC2047形式の符号化の使用は規格により明示的に禁止されています。受信者のメイラーがRFC2231形式のパラメータを解析できない場合のみ、この変数を設定してください。なお、このオプションは
 strict_mime=no を設定しないと有効になりません。
</p>
<sect2>
uncollapse_jump<label id="uncollapse_jump" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットしてある場合は、カーソルのあるスレッドが折り畳まれていない場合のみ、次のまだ読んでいないメッセージにジャンプします。
</p>
<sect2>
compose_format<label id="compose_format" >
<p>
<verb>
Type: string 
Default: &quot;-- Mutt: Compose  &lsqb;Approx. msg size: &percnt;l   Atts: &percnt;a&rsqb;&percnt;&gt;-&quot; 
</verb>
</p><p>
メール作成（Compose）メニューのステータスラインのフォーマットを設定します。これらの文字列は
 <ref id="status_format" name="atatus_format" >と似たものですが、次の独自の printf()に似た文字列も使えます。 
</p>
<p>
<verb>
&percnt;a     添付ファイルの総数
&percnt;h     ローカルホスト名
&percnt;l     メッセージのバイト数で表したおおよそのサイズ
&percnt;v     Muttのバージョン
</verb>
</p><p>
<ref id="compose_format" name="compose_format" >をどのように設定するかについてのより詳しい説明は<ref id="status_format" name="status_format" >を見てください。
</p>
<sect2>
confirmappend<label id="confirmappend" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットしてあると、すでに存在するメールボックスにメッセージを追加しようとした時にも確認のプロンプトを出します。
</p>
<sect2>
confirmcreate<label id="confirmcreate" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
セットしてあると、まだ存在していないメールボックスにメッセージを保存しようとした時に、その作成の前に確認のプロンプトを出します。
</p>
<sect2>
connect_timeout<label id="connect_timeout" >
<p>
<verb>
Type: number 
Default: 30 
</verb>
</p><p>
IMAPや POPを使う場合に、この変数で設定した秒数が過ぎても接続が確立されない場合はネットワークコネクションをタイムアウトします。負の値が与えられた場合は、Muttは接続が確立するまでいつまでも待ちます。
</p>
<sect2>
copy<label id="copy" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
この変数は、後の参照のために送信するメッセージのコピーをとっておくかどうかを制御します。参照:
 <ref id="record" name="$record" >, <ref id="save_name" name="$save_name" >, <ref id="force_name" name="$force_name" >, <ref id="fcc-hook" name="$fcc-hook" >
</p>
<sect2>
date_format<label id="date_format" >
<p>
<verb>
Type: string 
Default: &quot;!&percnt;a, &percnt;b &percnt;d, &percnt;Y at &percnt;I:&percnt;M:&percnt;S&percnt;p &percnt;Z&quot; 
</verb>
</p><p>
この変数は、<ref id="index_format" name="$index_format" >において &percnt;d シークエンスにより日時を表示する際の書式を制御します。これは、strftimeコールに渡されて、日時を返します。正確な書式は
 strftime(3) のマニュアルを参照してください。
</p>
<p>
文字列中の最初の文字が感嘆符(!)でないなら、月と曜日の名前は <ref id="locale" name="$locale" >変数で指定されたロケールによって展開されます。もし文字列中の最初の文字が感嘆符なら、感嘆符は捨てられて以下の文字列中の月と曜日の名前は
 Cロケール(US English)で展開されます。
</p>
<sect2>
default_hook<label id="default_hook" >
<p>
<verb>
Type: string 
Default: &quot;f &percnt;s !P | (P C &percnt;s)&quot; 
</verb>
</p><p>
この変数は send-hook, message-hooks, save-hook, fcc-hookを記述するときに、完全な検索パターンを指定するかわりに単に正規表現のみを指定した場合に、どのように解釈するかをコントロールします。フックの展開は宣言されたときに行われます。ですから、なんらかのフックを宣言した場合は、その時のこの変数の値によって解釈されます。デフォルトの値がマッチするのは、正規表現にマッチするユーザーからのメッセージか、自分で出したメッセージ（もしくは
 <ref id="alternates" name="$alternates" >で指定したアドレスからのメッセージ）であれば正規表現にマッチするユーザーが
 To: フィールドか CC: フィールドに指定されているメッセージです。
</p>
<sect2>
delete<label id="delete" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
メールボックスを閉じたり同期させたりしたときに、メッセージを本当に削除するかどうかを指定します。
 yes にセットしてあると、削除マークされたメッセージは、問い合わせなしに自動的に消去されます。
 no にセットしてあると、削除マークされたメッセージはメールボックスに残されます。
</p>
<sect2>
delete_prefix<label id="delete_prefix" >
<p>
<verb>
Type: boolean 
Default: unset
</verb>
</p><p>
（jaパッチの拡張機能）設定するとメーリングリストにおける Subjectフィールドのプレフィックス（&lsqb;prefix:0123&rsqb;のようなもの）をインデックス画面および返信時のメッセージで削除します。削除するプレフィックスのパターンは
 <ref id="delete_regexp" name="$delete_regexp" >で記述できます。 
</p>
<sect2>
delete_regexp<label id="delete_regexp" >
<p>
<verb>
Type: regular expression 
Default: &quot;^(&bsol;&lsqb;&lsqb;A-Za-z0-9_.: &bsol;-&rsqb;*&bsol;&rsqb;&lsqb; &rsqb;*)&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="delete_prefix" name="$delete_prefix" > で用いられる正規表現です.
</p>
<sect2>
delete_untag<label id="delete_untag" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
このオプションがセットされていると削除のマークがつけられたときにメッセージのタグが消されます。これは明示的に削除されるときや、または他のフォルダに保存するときに適用されます。
</p>
<sect2>
digest_collapse<label id="digest_collapse" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
このオプションを設定すると、revattachメニューでダイジェストの各々のメッセージのサブパートが表示されません。サブパートを見る場合は、vを押してください。
</p>
<sect2>
display_filter<label id="display_filter" >
<p>
<verb>
Type: path 
Default: &quot;&quot; 
</verb>
</p><p>
この変数はメッセージ用のフィルタに使うコマンドを設定します。メッセージが読まれる場合は、メッセージが標準入力として<ref id="display_filter" name="$display_filter" >に渡されフィルタ後のメッセージを標準出力から読み取ります。
</p>
<sect2>
dotlock_program<label id="dotlock_program" >
<p>
<verb>
Type: path 
Default: &quot;/usr/local/bin/mutt_dotlock&quot; 
</verb>
</p><p>
Muttで使われる mutt_dotlock (8)のバイナリのあるパスを指定します。
</p>
<sect2>
dsn_notify<label id="dsn_notify" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
<bf>注意</bf>: Sendmail 8.8.x かそれ以降を使っているのでなければ、これを使わないでください。
</p>
<p>
送信通知が返されたときのリクエストを設定する変数です。文字列は以下のうちのいくつかをコンマで区切ったリスト(スペースを入れてはいけません)から成ります:
 never は通知をリクエストしません。failureは伝達が失敗したときに通知をリクエストします。delay
 はメッセージが遅延したときに通知されます。success は伝達成功の通知をします。
</p>
<p>
例: <tt>set dsn_notify=&quot;failure,delay&quot;</tt> 
</p>
<sect2>
dsn_return<label id="dsn_return" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
<bf>注意</bf>: Sendmail 8.8.x かそれ以降を使っているのでなければ、これを使うべきではありません。
</p>
<p>
この変数は DSN メッセージの中に含まれて戻ってくる自分のメッセージの量をコントロールします。hdrs
 にセットしているとメッセージのヘッダーのみが戻り、 full にセットしているとすべてのメッセージが戻ってきます。
</p>
<p>
例: <tt>set dsn_return=hdrs</tt> 
</p>
<sect2>
duplicate_threads<label id="duplicate_threads" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数はスレッド単位でソートしているときに同じメッセージ IDをもつメッセージをどのように扱うかを決めます。この変数が設定されている場合には、同じメッセージ
 IDをもったメッセージはお互い同一のものとして考えられ、スレッドダイアグラムの中で等号(=)をつけて表示されます。
</p>
<sect2>
edit_headers<label id="edit_headers" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
このオプションにより、メッセージの本文を編集するときに同時にヘッダも編集できるようにできます。
</p>
<sect2>
editor<label id="editor" >
<p>
<verb>
Type: path
Default: &quot;&quot; 
</verb>
</p><p>
この変数でメッセージを作成するときに使うエディタを指定します。デフォルトは環境変数
 &dollar;VISUAL, &dollar;EDITORの値、または &quot;vi&quot;
</p>
<sect2>
encode_from<label id="encode_from" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると始めに Fromがついている行を含んだメッセージを
 quoted-printableに符号化します。メッセージの伝送中にトランスポートエージェントによってメールが変形されるのを防ぐのに有効です。
</p>
<sect2>
envelope_from<label id="envelope_from" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると muttは From: へッダに書かれた人をメッセージの封筒（envelope）の送り手とします。これはこの情報を
 sendmailの -fオプションにつけることを意味します。したがってすでに自分で
 -fオプションを <ref id="sendmail" name="$sendmail" >のコマンドラインオプションで使っている場合や、あなたが使っている
 sendmailがこのオプションをサポートしていない場合にはこの変数をセットしないでください。
</p>
<sect2>
escape<label id="escape" >
<p>
<verb>
Type: string 
Default: &quot;&tilde;&quot;
</verb>
</p><p>
内蔵エディタの機能を使うのに用いるエスケープ文字。
</p>
<sect2>
fast_reply<label id="fast_reply" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
セットしてあると、メッセージに返信するときの受取人と subjectの入力プロンプトを省略します。転送のときは、subject
 のプロンプトが省略されます。
</p>
<p>
<bf>注意</bf>: この変数は <ref id="autoedit" name="$autoedit" >変数がセットされていると無効です。
</p>
<sect2>
fcc_attach<label id="fcc_attach" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数は、送信するメッセージの添付ファイルを本文とともに保存するかどうかを制御します。
</p>
<sect2>
fcc_clear<label id="fcc_clear" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、実際のメッセージが暗号化されたり署名されたりしている場合でも
 FCCは暗号化も署名もされずに保存されます。
</p>
<sect2>
file_charset<label id="file_charset" >
<p>
<verb>
Type: string 
Default: null
</verb>
</p><p>
（jaパッチの拡張機能）テキストファイルを添付する場合の想定される文字符号化方式を設定します。コロンで区切られたリストとして記述できます。例えば、日本語を使う場合は次のように設定します。
</p>
<p>
<verb>
set file_charset=&quot;iso-2022-jp:euc-jp:shift_jis:utf-8&quot;
</verb>
</p><p>
iso-2022-* を使う場合は必ずリストの先頭に持ってきてください。このオプションが設定されていない場合は、<ref id="charset" name="$charset" >
 で指定したものが代わりに想定されます。
</p>
<sect2>
folder<label id="folder" >
<p>
<verb>
Type: path 
Default: &quot;&tilde;/Mail&quot; 
</verb>
</p><p>
メールボックスのデフォルトの場所を指定します。パス名の最初の
 `+' もしくは `=' はこの変数の値へと展開されます。もし、この値をデフォルトの値から変更する場合は、`+'
 もしくは `=' を他の変数で使う前にこの割り当てが行われるように注意する必要がある、ということに気をつけてください。なぜなら展開は
 `set' コマンドの時点で起きるからです。
</p>
<sect2>
folder_format<label id="folder_format" >
<p>
<verb>
Type: string 
Default: &quot;&percnt;2C &percnt;t &percnt;N &percnt;F &percnt;2l &percnt;-8.8u &percnt;-8.8g &percnt;8s &percnt;d &percnt;f&quot; 
</verb>
</p><p>
この変数によりファイル・ブラウザーの表示を自分好みにカスタマイズすることができます。この文字列は
 <ref id="index_format" name="$index_format" >に似ていますが、独自の printf()に似たシークエンスのセットがあります。
</p>
<p>
<descrip>
 <tag>
&percnt;C</tag>現在のファイル数 
 <tag>
&percnt;d</tag>フォルダが最後に変更された日付/時刻 
 <tag>
&percnt;f</tag>ファイル名 
 <tag>
&percnt;F</tag>ファイルのパーミッション 
 <tag>
&percnt;g</tag>グループ名(もしなければ GID の値) 
 <tag>
&percnt;l</tag>ハードリンク数 
 <tag>
&percnt;N</tag>フォルダに新しいメールがあるなら N、そうでないなら空白
 
 <tag>
&percnt;s</tag>サイズ &lsqb;bytes&rsqb; 
 <tag>
&percnt;t</tag>もしファイルがタグづけされていればアステリスク(*)、それ以外は空白
 
 <tag>
&percnt;u</tag>所有者名 (もしなければ UID の値) 
 <tag>
&percnt;&gt;X</tag>残りの文字列を右寄せにして間を &quot;X&quot;
 で埋める 
 <tag>
&percnt;|X</tag>行末まで &quot;X&quot; で埋める
</descrip>
</p><sect2>
followup_to<label id="followup_to" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
メールを送信するときに自動的に Mail-Followup-Toヘッダーを付加するかどうかをコントロールします。セットされていると、subscribeまたは
 <ref id="lists" name="lists" >コマンドで指定されているメーリングリストに返信するときは自動的にこのフィールドを生成します。
</p>
<p>
このフィールドの目的は、もしメーリングリストに当てられているメッセージであれば、そのコピーを一つだけ受けとることを指定することで、送信したメッセージへの返信を複数受けとることを避けることです(また、そうしてグループ返信を使うときに自分自身のアドレスを含める必要がなくなります)。
</p>
<p>
このフィールドには二つの目的があります。一つめはメーリングリストに送った自分のメッセージに対する返信のいくつものコピーを受け取らないようにすること。二つめは購読していないメーリングリストに返信を送った場合にはそれをメーリングリスト経由ではなく、ちゃんと受け取ることを保証することです。このへッダは購読しているメーリングリストのアドレスのみを含む場合も、メーリングリストのアドレスと購読していないメーリングリスト用に自分自身のアドレスを含む場合もあります。このへッダを使わずにグループ返信を使うと購読しているメーリングリストに送った自分のメッセージに返信を送った場合には自分のアドレスに直接に配送されるのととメーリングリスト経由で配送されるのとの同じメッセージの2つのコピーを受け取ることになります。
</p>
<sect2>
force_name<label id="force_name" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数は <ref id="save_name" name="$save_name" >と似ていますが、メールボックスがたとえ存在しなくても、送信するメッセージの受信者のアドレスのユーザー名のメールボックスにコピーを格納します。
</p>
<p>
<ref id="record" name="$record" >変数も参照してください。
</p>
<sect2>
forward_decode<label id="forward_decode" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数はメッセージを転送するときに、複雑な MIMEメッセージを
 text/plainにデコードするかどうかをコントロールします。メッセージのヘッダーも
 RFC2047に従うデコードが施されます。<ref id="mime_forward" name="$mime_forward" >変数がセットされていない場合にのみこの変数は使われ、そうでなければ
 <ref id="mime_forward_decode" name="$mime_forward_decode" >変数がかわりに使われます。
</p>
<sect2>
forward_format<label id="forward_format" >
<p>
<verb>
Type: string 
Default: &quot;&lsqb;&percnt;a: &percnt;s&rsqb;&quot;
</verb>
</p><p>
この変数は転送するメッセージのデフォルトの Subject をコントロールします。シークエンスの形式は
 <ref id="index_format" name="$index_format" >変数の形式と同じです。
</p>
<sect2>
forward_quote<label id="forward_quote" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットされていると(そして <ref id="mime_forward" name="$mime_forward" >が unsetされているなら)転送するメッセージはメールの本文に取り込まれ、<ref id="indent_string" name="$indent_string" >を使って引用符がつけられます。
</p>
<sect2>
from<label id="from" >
<p>
<verb>
Type: e-mail address 
Default: &quot;&quot; 
</verb>
</p><p>
この変数はデフォルトの Fromアドレスを設定します。この設定を（send-hookを使って）my_hdrや
 <ref id="reverse_name" name="$reverse_name" >で上書きできます。
</p>
<p>
デフォルトは EMAIL環境変数で設定されているものです。
</p>
<sect2>
gecos_mask<label id="gecos_mask" >
<p>
<verb>
Type: regular expression 
Default: &quot;^&lsqb;^,&rsqb;*&quot; 
</verb>
</p><p>
muttがエイリアスを展開するときにパスワードファイルの GECOSフィールドを解析するための正規表現を指定します。デフォルトではこの正規表現は
 <tt>&quot;^&lsqb;^,&rsqb;*&quot;</tt>になっていて、はじめのコンマ(,)までの文字列を返します。もし
 GECOSフィールドが lastname, firstnameの形で文字列を入れていたなら、<tt>gecos_mask=&quot;.*&quot;</tt>にした方がいいでしょう。
</p>
<p>
例えばユーザIDが stevefで本当の名前が Steve Franklinである人にメールを書くとしましょう。もし
 muttがこのアドレスを &quot;Franklin&quot; stevef@foo.barと展開したならば、gecos_maskをフルネームにマッチするように（&quot;Franklin&quot;を
 &quot;Franklin, Steve&quot;に変えるように）設定する必要があります。
</p>
<sect2>
hdrs<label id="hdrs" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットされていないと <ref id="my_hdr" name="my_hdr" >コマンドで普通は追加されるヘッダーフィールドが生成されません。生成させるには、新しくメッセージを作成したり返信したりする前にこの変数のセットを外さなければなりません。セットされていると、ユーザーが定義したヘッダーフィールドがすべての新規のメッセージに追加され
 ます。
</p>
<sect2>
header<label id="header" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
セットされていると、Muttは返信しようとしているメッセージのヘッダーを編集バッファーに含めるようになります。それには
 <ref id="weed" name="$weed" >の設定が使われます。
</p>
<sect2>
help<label id="help" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットされていると、それぞれのメニューでの主な機能に関するキー・バインディングを表示するヘルプ行が、スクリーンの最初の行に表示されます。
</p>
<p>
<bf>注意</bf>: 機能へのキーの割り当てが一つのキー・ストロークではなく、連続したキー・ストロークに割り当てられている場合、バインディングは正しく表示されません。また、Muttを起動している際にバインディングを変更しても、その変更は反映されません。この変数は主に初心者のために作られたものですから、これら両方とも大きな問題ではないはずです。
</p>
<sect2>
hidden_host<label id="hidden_host" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数がセットされているとアドレスにドメインパートを追加するときに
 <ref id="hostname" name="$hostname" >変数のホストネームのパートをスキップします。この変数はメッセージIDの生成に影響を与えません。また、第一レベルのドメインを切り取ってしまうこともありません。
</p>
<sect2>
hide_limited<label id="hide_limited" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、スレッド内に抜けているメッセージがあることを表示しません。
</p>
<sect2>
hide_missing<label id="hide_missing" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされていると、スレッド内に limit を使って隠されているメッセージがあることを表示しません。
</p>
<sect2>
hide_top_limited<label id="hide_top_limited" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、スレッドの一番前のメッセージが抜けていることを表示しません。ただし、<ref id="hide_limited" name="$hide_limited" >がセットされていると、この変数は効果を持ちません。
</p>
<sect2>
hide_top_missing<label id="hide_top_missing" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされていると、スレッドの一番前に limit を使って隠されているメッセージがあることを表示しません。ただし、<ref id="hide_missing" name="$hide_missing" >変数がセットされていると、この変数は効果を持ちません。
</p>
<sect2>
history<label id="history" >
<p>
<verb>
Type: number 
Default: 10 
</verb>
</p><p>
この変数は履歴バッファーのサイズ(記憶される文字列の数で)をコントロールします。バッファーは変数がセットされる度にクリアされます。
</p>
<sect2>
honor_followup_to<label id="honor_followup_to" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
この変数はメッセージにグループリプライする場合に Mail-Followup-Toへッダを使うかどうかをコントロールします。
</p>
<sect2>
hostname<label id="hostname" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
ローカルなメールアドレスで使われる @ 以降のホスト名を指定します。これは、コンパイル時に
 /etc/resolv.conf から取得された定義を上書きします。
</p>
<sect2>
ignore_list_reply_to<label id="ignore_list_reply_to" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数は、メーリングリストからのメッセージに返信するときの返信の動作に影響します。セットされていると、Reply-To:
 フィールドの値が To: フィールドの値と同じ場合、Mutt は、Reply-To:
 フィールドは自動的にそのメーリングリストに返信するようにメーリングリストによって設定されていると見做し、このフィールドを無視します。この変数がセットされている時に、直接メーリングリストに返信する際は
 list-reply 機能を使ってください。 group-replyは Senderとメーリングリスト両方に返信します。
</p>
<sect2>
imap_authenticators<label id="imap_authenticators" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは muttが IMAPサーバにログインする場合の認証方法を、使いたい順番にコロンで区切って指定します。認証方法は
 loginか IMAP 'AUTH=xxx'文字列の右側に来ることのできるもの、つまりdigest-md5、gssapi、cram-md5です。もしこの変数が設定されていない場合は（これがデフォルトです）一番安全な方法から順番に利用可能な方法を試していきます。
</p>
<p>
例: set imap_authenticators=&quot;gssapi:cram-md5:login&quot;
 
</p>
<p>
<bf>注意：</bf> 前の認証方法が利用可能でない場合のみ、次の認証方法を試します。もしある認証方法が利用可能ではあるが認証に失敗した場合は、IMAPサーバに接続しようとはしません。
</p>
<sect2>
imap_delim_chars<label id="imap_delim_chars" >
<p>
<verb>
Type: string 
Default: &quot;/.&quot; 
</verb>
</p><p>
これは IMAPのパスを表示するときにフォルダの区切りに使う文字を設定します。folder変数にショートカット「=」を使っている場合に便利です。
</p>
<sect2>
imap_force_ssl<label id="imap_force_ssl" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、Muttは IMAPサーバに接続するときに常に
 SSLを使います。
</p>
<sect2>
imap_home_namespace<label id="imap_home_namespace" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
普通は IMAPブラウザの中で INBOXのそばに個人用のフォルダを並べて置きたいと思います。もしそれ以外のものを見たい場合には、この変数にあなたのフォルダの
 IMAPパスを設定してください。
</p>
<sect2>
imap_keepalive<label id="imap_keepalive" >
<p>
<verb>
Type: number 
Default: 900 
</verb>
</p><p>
この変数は、開いているIMAP接続をサーバー側から切断されないように確かめに行くまでの最大の時間を秒数で設定します。デフォルトは
 RFC で決められたサーバーがクライアントからの要請なしで接続を閉じることのできる最小の時間(30分)になっています。しかし、実際は
 RFC を守っていないサーバーが多数あるので、IMAPサーバーから短い時間で、通信していないとして接続を切られる場合にはこの変数の値を減らしてください。
</p>
<sect2>
imap_list_subscribed<label id="imap_list_subscribed" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数は IMAPフォルダの一覧を見るときに登録しているフォルダだけを表示するのか、それともすべてのフォルダを表示するのかを設定します。これは
 IMAPブラウザの中で <it>toggle-subscribed</it>コマンドを使って変えることができます。
</p>
<sect2>
imap_pass<label id="imap_pass" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
IMAPアカウントのパスワードを指定します。セットされていない場合、fetch-mail機能が起動されたときにパスワードを入力するように促します。<bf>警告</bf>:
 絶対安全だと確信が持てるマシン上でのみこのオプションを使ってください。たとえ自分だけしか
 muttrcを読めないようにしておいても、スーパーユーザーは読むことができるからです。
</p>
<sect2>
imap_passive<label id="imap_passive" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数が設定してあると新しいメールのチェックのために新たに
 IMAPサーバへの接続をしません。すでに接続している IMAPコネクションだけをメールチェックに使います。これは
 muttが IMAPコネクションを開くときにユーザ名、パスワードを聞いてくるのがうっとうしい場合や、新しく接続するのに時間がかかる場合に便利です。
</p>
<sect2>
imap_peek<label id="imap_peek" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数が設定してあると、サーバからメッセージを取ってくるたびに
 Muttがメッセージに勝手に既読のマークをつけるのを避けることができます。通常はこの変数を設定しておくといいのですが、これは
 IMAPフォルダを閉じるのがすこし遅くなるという副作用を持ちます。このオプションはこれを避けてすこしでも早くしたいスピードマニアのためのものです。
</p>
<sect2>
imap_servernoise<label id="imap_servernoise" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数をセットしておくと、muttは IMAPサーバからの警告をエラーメッセージとして表示します。これらIMAPサーバからの警告はほとんどの場合無害であるか、またサーバ側の設定に問題がありユーザがどうにもできない問題なので、普通は表示させなくてもいいでしょう。
</p>
<sect2>
imap_user<label id="imap_user" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
IMAP サーバーにログインするときのログイン名です。デフォルトはローカルマシン上のあなたのユーザ名です。
</p>
<sect2>
implicit_autoview<label id="implicit_autoview" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
yes にセットされていると、内蔵のビューワーで定義されていない
 MIME 添付ファイルすべてに対して、mailcap エントリーで copiousoutput
 フラグがセットされていないかどうかチェックします。もし、そうしたエントリーが見つかればそのエントリーで定義されているビューワーを使ってボディ部をテキスト形式に変換します。
</p>
<sect2>
include<label id="include" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
返信する際にもとのメッセージのコピーを返信メッセージに含めるかどうかをコントロールします。
</p>
<sect2>
indent_string<label id="indent_string" >
<p>
<verb>
Type: string 
Default: &quot;&gt; &quot; 
</verb>
</p><p>
返信メッセージの中で、引用する行それぞれに前置する文字列を指定します。デフォルトの値から変更しないことを強く勧めます。なぜなら、これ以外の文字列を使った場合、狂信的なネットの住人を扇動する可能性が高いからです。
</p>
<sect2>
index_format<label id="index_format" >
<p>
<verb>
Type: format string 
Default: &quot;&percnt;4C &percnt;Z &percnt;&lcub;&percnt;b &percnt;d&rcub; &percnt;-15.15L (&percnt;4l) &percnt;s&quot; 
</verb>
</p><p>
この変数を使うことで、メッセージ・インデックスの表示を自分好みにカスタマイズできるようになります。
</p>
<p>
表示用の文字列は C の printf 関数で出力の整形するのに使われる文字列に似ています(詳しくは
 man ページをご覧下さい)。Mutt では次の文字列が定義されています。
</p>
<p>
<descrip>
 <tag>
&percnt;a</tag>著者のアドレス 
 <tag>
&percnt;b</tag>オリジナルのメッセージフォルダーのファイル名(メールボックスだと考えてください)
 
 <tag>
&percnt;B</tag>手紙が送られたリスト、もしくはフォルダー名 (&percnt;b)
 
 <tag>
&percnt;c</tag>メッセージの文字数(バイト数) 
 <tag>
&percnt;C</tag>現在のメッセージ番号 
 <tag>
&percnt;d</tag>メッセージの日付と時刻。Senderのタイムゾーンに変換され、date_formatで指定されるフォーマットで表示されます。
 
 <tag>
&percnt;D</tag>メッセージの日付と時刻。ローカル・タイムゾーンに変換され、date_formatで指定されるフォーマットで表示されます。
 
 <tag>
&percnt;e</tag>スレッドの中での現在のメッセージ番号
 <tag>
&percnt;E</tag>スレッドの中のメッセージ数
 <tag>
&percnt;f</tag>完全な From: 行 (アドレス + 名前) 
 <tag>
&percnt;F</tag>送り手の名前。もしくは自分が出したメッセージであれば受信者の名前
 
 <tag>
&percnt;i</tag>現在のメッセージの Message-ID 
 <tag>
&percnt;l</tag>メッセージの行数 
 <tag>
&percnt;L</tag>もし To または CCへッダフィールドのアドレスがユーザーの
 lists コマンドで設定されている場合には To &lt;list-name&gt;と表示される。それ以外の場合は
 &percnt;Fと同じ。
 <tag>
&percnt;m</tag>メールボックスにあるメッセージの合計数 
 <tag>
&percnt;M</tag>スレッドが折り畳まれている場合、隠れているメッセージの数
 
 <tag>
&percnt;N</tag>メッセージのスコア 
 <tag>
&percnt;n</tag>送り手の本当の名前(ない場合は、アドレス) 
 <tag>
&percnt;O</tag>(オリジナルのセーブフォルダー) メッセージが以前にこっそりとおかれていた場所:
 リスト名、もしくは受信者の名前 
 <tag>
&percnt;s</tag>メッセージの Subject 
 <tag>
&percnt;S</tag>メッセージのステータス (N/D/d/!/*/r) 
 <tag>
&percnt;t</tag>To: フィールド (受信者) 
 <tag>
&percnt;T</tag><ref id="to_chars" name="$to_chars" >文字列から得られる適切な文字 
 <tag>
&percnt;u</tag>送り手のユーザー(ログイン)名 
 <tag>
&percnt;v</tag>送り手のファーストネームか、もしくは自分が出したメッセージであれば受信者の名前
 
 <tag>
&percnt;y</tag>(もしあれば) x-labelフィールド
 <tag>
&percnt;Y</tag>x-labelフィールドがある場合、次の条件を満たせば
 x-labelを表示。(1)スレッドツリーの一部でない、(2)スレッドツリーの一番上にある、または
 (3)前のメッセージの x-labelと異なる x-labelを持つ。
 <tag>
&percnt;Z</tag>メッセージの状態を示すフラグ 
 <tag>
&percnt;&lcub;fmt&rcub;</tag>日付と時刻は Senderのタイムゾーンに変換されます。fmtは
 strftimeシステムコールによって展開されます。ビックリマーク(!)を前置することでロケールを無視させることができます。
 
 <tag>
&percnt;&lsqb;fmt&rsqb;</tag>日付と時刻はローカルのタイムゾーンに変換されます。fmtは
 strftimeシステムコールによって展開されます。ビックリマーク(!)を前置することでロケールを無視させることができます。
 
 <tag>
&percnt;(fmt)</tag>メッセージを受信したときのローカルの日付と時刻です。fmtは
 strftimeシステムコールによって展開されます。ビックリマーク(!)を前置することでロケールを無視させることができます。
 
 <tag>
&percnt;&lt;fmt&gt;</tag>ローカルの現在の時刻です。fmtは strftimeシステムコールによっ
 て展開されます。ビックリマーク(!)を前置することでロケールを無視させることができます。
 
 <tag>
&percnt;&gt;X</tag>残りの文字列を右寄せにして間を &quot;X&quot;
 で埋める 
 <tag>
&percnt;|X</tag>行末まで &quot;X&quot; で埋める
</descrip>
</p><p>
参照: <ref id="to_chars" name="$to_chars" >
</p>
<sect2>
ispell<label id="ispell" >
<p>
<verb>
Type: path
Default: &quot;/usr/bin/ispell&quot; 
</verb>
</p><p>
ispell(GNU のスペルチェックソフトウェア)を起動する方法
</p>
<sect2>
keep_flagged<label id="keep_flagged" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、フラグがついた既読のメッセージまたは<ref id="mbox-hook" name="mbox-hook" >コマンドの結果としてマークされた既読のメールはスプールメールボックスから<ref id="mbox" name="$mbox" >に移動されません。
</p>
<sect2>
locale<label id="locale" >
<p>
<verb>
Type: string 
Default: &quot;C&quot; 
</verb>
</p><p>
日付の形式を整える strftime(3) でつかわれるロケールを指定します。有効な値は、システムが
 LC_TIME に受け付ける文字列です。
</p>
<sect2>
mail_check<label id="mail_check" >
<p>
<verb>
Type: number 
Default: 5 
</verb>
</p><p>
この変数はどのくらいの頻度で Mutt が新着のメールをチェックするかを(秒単位で)指定します。
</p>
<sect2>
mailcap_path<label id="mailcap_path" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
この変数は、Mutt が直接サポートしていない MIME ボディを表示しようとする時に、どのファイルに問い合わせるのかを指定します。
</p>
<sect2>
mailcap_sanitize<label id="mailcap_sanitize" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットされていると、mailcap での &quot;&percnt;&quot; の展開可能文字を、正しく定義されている安全な文字セットになるように制限します。これは安全性の高い設定ではありますが、もしかすると複雑な
 MIME 設定がうまく動作しなくなることもあるかもしれません。
</p>
<p>
<bf>注意!! 自分が何をやろうとしているのか、よく分からないままこの設定を変更しないでください!
</bf>
</p>
<sect2>
maildir_trash<label id="maildir_trash" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数が設定されていると、削除マークのついたメッセージを消すかわりに
 maildirの (T)rashedフラグをつけて保存します。<bf>注意：</bf>このオプションは
 maildirスタイルのメールボックスでのみ有効です。それ以外のメールボックスでは何の効果も持ちません。
</p>
<sect2>
mark_old 
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数は、新着のメッセージと古い未読のメッセージを区別するかどうかをコントロールします。デフォルトでは、新着のメッセージを読まずにメールボックスを出た場合、Mutt
 はそれらを古い未読のメッセージとマークします。次に Mutt を起動した時、それらのメッセージはインデックスメニューで後ろに
 &quot;O&quot; マーク付きで表示されます。これは、それらが古いメッセージであることを意味します。Muttが未読メッセージをすべて新着メッセージとして扱うようにするには、この変数をアンセット(unset)してください。
</p>
<sect2>
markers<label id="markers" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
内蔵のページャーで、折り返される行の表示をコントロールします。セットされていると、折り返される行の最初に
 &quot;+&quot; マーカーが表示されます。<ref id="smart_wrap" name="$smart_wrap" >変数も参照してください。
</p>
<sect2>
mask<label id="mask" >
<p>
<verb>
Type: regular expression
Default: &quot;!^&bsol;.&lsqb;^.&rsqb;&quot; 
</verb>
</p><p>
ファイルブラウザーで使われる正規表現です。オプションとして、NOT
 演算子 &quot;!&quot; が前置されています。このマスクにマッチするもののみが表示されます。また、マッチは常に大文字小文字を区別して行われます。
</p>
<sect2>
mbox<label id="mbox" >
<p>
<verb>
Type: path 
Default: &quot;&tilde;/mbox&quot; 
</verb>
</p><p>
この変数で、<ref id="spoolfile" name="$spoolfile" >フォルダで読みこんだメールを格納するフォルダを指定します。
</p>
<sect2>
mbox_type<label id="mbox_type" >
<p>
<verb>
Type: folder magic
Default: mbox 
</verb>
</p><p>
新しいフォルダを作成する際のデフォルトのメールボックスのタイプを指定します。mbox,
 MMDF, MH, Maildir のどれかです。
</p>
<sect2>
metoo<label id="metoo" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
アンセット(unset)になっていると、メッセージに返信する際に受信者のリストから自分のアドレスを削除します。
</p>
<sect2>
menu_scroll<label id="menu_scroll" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットされているとスクリーンの境界を越えようとした時に、メニューは1行ずつ上下にスクロールされるようになります。アンセットになっていると、メニューのスクリーンはいったんクリアされ、次や前のページが表示されます(遅い接続を使っている場合に、なんども再描画されるのを避けることがで
 きます)。
</p>
<sect2>
meta_key<label id="meta_key" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットしていると、Muttがハイビット(8ビット)セットのキーストロークを解釈するようになります。ユーザーがまず
 ESC キーを押し、それからその8ビット目を削除したときに残るなんらかのキーを押したように振る舞います。例えば、押されたキーが
 ASCII 表示で 0xf4 の値を持っているとすると、まず ESC キーを押しそれから
 &quot;x&quot; を押したように振る舞います。これは &quot;0xf4&quot;
 のハイビットを削除した残りは &quot;0x74&quot; になり、つまり &quot;x&quot;
 という ASCII 文字になるからです。
</p>
<sect2>
mh_path<label id="mn_path" >
<p>
<verb>
Type:string
Default: unset
</verb>
</p><p>
(jaパッチの拡張機能) mh_path で <tt>&tilde;/Mail</tt>などと指定しておくと
 .mh_sequences がなくても <tt>&tilde;/Mail</tt>以下の subdirectory で他の folder
 条件に引っ掛からず、 なおかつ、さらにその下に subdirectory を持たない
 directory は MH folder として解釈するようになります。 他の MH tool
 で生成した folder を mutt で扱う際の &quot;xxx はメールボックスではありません&quot;
 の誤判定を減らせます。
</p>
<sect2>
mh_purge<label id="mh_purge" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
アンセットされていると、Mutt は MH の振る舞いをまねるようになります。つまり
 MHフォルダで削除されたメッセージは、実際に削除されるかわりに ,&lt;old
 file name&gt; という名前にリネームされて残されます。セットされていると、メッセージはそのまま削除されます。
</p>
<sect2>
mh_seq_flagged<label id="mh_seq_flagged" >
<p>
<verb>
Type: string 
Default: &quot;flagged&quot; 
</verb>
</p><p>
フラグがつけられたメッセージに使う MHシークエンスの名前
</p>
<sect2>
mime_forward<label id="mime_forward" >
<p>
<verb>
Type: quadoption 
Default: no
</verb>
</p><p>
セットされていると、転送するメッセージは本文に含まれるのではなく、MIME
 パートとしてわけて添付されます。MIME メッセージを転送する際に、受信者がもともとの送信者からあなたに配送されたとおりのメッセージの形で適切に閲覧することができるという点で便利です。もしMIME
 メールであるかどうかによって振る舞いを変更したければ、 &quot;ask-no&quot;
 もしくは &quot;ask-yes&quot; をこの変数にセットしてください。
</p>
<p>
<ref id="forward_decode" name="$forward_decode" >と<ref id="mime_forward_decode" name="$mime_forward_decode" >も参照してください。
</p>
<sect2>
mime_forward_decode<label id="mime_forward_decode" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
<ref id="mime_forward" name="$mime_forward" >がセットされている時に、複雑な MIMEメッセージを text/plainにデコードするかどうかをコントロールします。それ以外はかわりに
 <ref id="forward_decode" name="$forward_decode" >を使います。
</p>
<sect2>
mime_forward_rest<label id="mime_forward_rest" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
いくつもの MIMEメッセージの添付ファイルがついたメールをフォワードする場合に、このオプションがセットされているとうまくデコードできない添付ファイルは新しく編集しているメッセージに添付されます。
</p>
<sect2>
mix_entry_format<label id="mix_entry_format" >
<p>
<verb>
Type: string 
Default: &quot;&percnt;4n &percnt;c &percnt;-16s &percnt;a&quot; 
</verb>
</p><p>
この変数は mixmastar用のチェーンを選ぶ画面のリメイラ行のフォーマットを指定します。次の
 printfに似た文字をサポートしています。
</p>
<p>
<descrip>
 <tag>
&percnt;n</tag>メニュー上での番号 
 <tag>
&percnt;c</tag>リメイラの能力
 <tag>
&percnt;s</tag>リメイラの短い名前
 <tag>
&percnt;a</tag>リメイラのメイルアドレス
</descrip>
</p><sect2>
mixmaster<label id="mixmaster" >
<p>
<verb>
Type: path 
Default: &quot;mixmaster&quot; 
</verb>
</p><p>
この変数であなたのシステムの Mixmasterのバイナリへのパスを指定します。ここで指定されたバイナリが様々なパラメータを使って既存のリメイラのリストを得たり、最終的に
 mixmasterのチェーンを通してメッセージを送るのに使われます。
</p>
<sect2>
move<label id="move" >
<p>
<verb>
Type: quadoption 
Default: ask-no 
</verb>
</p><p>
既読のメッセージをスプールメールボックスから <ref id="mbox" name="$mbox" >、もしくは、<ref id="mbox-hook" name="mbox-hook" >コマンドによって指定されるメールボックスに移動するかという問い合わせを行うかどうかをコントロールします。
</p>
<sect2>
message_format<label id="message_format" >
<p>
<verb>
Type: string 
Default: &quot;&percnt;s&quot; 
</verb>
</p><p>
この文字列は <ref id="attach_menu" name="attachment" >メニューで message/rfc822 タイプの添付ファイルに対して用いられます。定義されているすべてのエスケープシーケンスのリストに関しては
 <ref id="index_format" name="$index_format" >をご覧下さい。
</p>
<sect2>
msgid<label id="msgid" >
<p>
<verb>
Type: boolean 
Default: set
</verb>
</p><p>
(jaパッチの拡張機能) この変数がセットされていると、メール送信時に
 Mutt自身が Message-Id: を生成します。MTAに Message-Id: を生成させたい場合は設定を解除します。
</p>
<sect2>
msgid_use_from<label id="msgid_use_from" >
<p>
<verb>
Type: boolean 
Default: set
</verb>
</p><p>
（jaパッチの拡張機能）このオプションが設定されていると, Message-ID
 フィールドに使う文字列を <ref id="hostname" name="$hostname" > の代わりに <ref id="from" name="$from" >で設定した文字列（メールアドレス）を使います。そのため,
 Message-ID のユニーク性が高まります。例えば、次のように設定してある場合,
</p>
<p>
<verb>
set msgid_use_from=yes 
set realname=&quot;D Vader&quot; 
set from=&quot;vader@deathstar.empire&quot;
</verb>
</p><p>
次のような From と Message-ID を生成します。
</p>
<p>
<verb>
Message-ID: &lt;20000907080905.A5250&percnt;vader@deathstar.empire&gt; 
From: D Vader &lt;vader@deathstar.empire&gt;
</verb>
</p><sect2>
pager<label id="pager" >
<p>
<verb>
Type: path 
Default: &quot;builtin&quot; 
</verb>
</p><p>
この変数はメッセージを閲覧するときにどのページャーを使うのかを指定します。
 builtinは内蔵ページャーを使うことを意味します。それ以外は、この変数で使いたい外部ページャーのパスを指定します。
</p>
<p>
外部ページャーを使うとちょっと不便なところもあるかもしれません。Muttの機能を直接ページャーから呼び出すことができないため、余分なキーストロークが必要になります。また、スクリーンの幅を変更するとヘルプメニューのフォーマットがおかしくなります。
</p>
<sect2>
pager_context<label id="pager_context" >
<p>
<verb>
Type: number 
Default: 0 
</verb>
</p><p>
この変数は、内蔵ページャーで次のページや前のページを表示するときに前後をどれだけの行見せてスクロールするかをコントロールします。デフォルトではスクリーンの最下行の1行下の行を最上行として表示します(つまり、値
 は0です)。
</p>
<sect2>
pager_format<label id="pager_format" >
<p>
<verb>
Type: string 
Default: &quot;-&percnt;Z- &percnt;C/&percnt;m: &percnt;-20.20n   &percnt;s&quot;
</verb>
</p><p>
この変数は内蔵ページャーもしくは外部ページャーの中でそれぞれのメッセージの前の1行メッセージ
 &quot;status&quot;の形式をコントロールします。有効なシーケンスは
 <ref id="index_format" name="$index_format" >の章にリストされています。
</p>
<sect2>
pager_hdrs_only<label id="pager_hdrs_only" >
<p>
<verb>
Type: boolean 
Default: unset
</verb>
</p><p>
（jaパッチの拡張機能）インデックスからメッセージを選択したときに、すぐに本文を表示するかを決めます。セットされていると最初はヘッダ部しか表示せず、ページ送りや行送り動作を行なった時点で本文が表示されます。
</p>
<sect2>
pager_index_lines<label id="pager_index_lines" >
<p>
<verb>
Type: number 
Default: 0 
</verb>
</p><p>
ページャーを表示しているときに表示される小インデックスの行数を指定します。現在のメッセージは、フォルダーの最上行もしくは最下行に近い位置以外の場所では、この小インデックスで約
 1/3の位置に表示されます。これは現在のメッセージの前後のいくつかのメッセージを知ることができるようにするためです。これは、例えば現在のスレッドに未読のメッセージがいくつ残っているのかを知りたいときに便利です。指定する行数のうちの1行はインデックスのステータスバーに使われますので、&quot;pager_index_lines&quot;を
 6に指定したとすると実際のインデックスは 5行表示されることになります。値を
 0に設定すると小インデックスは表示されません。現在のフォルダーにあるメッセージ数が
 &quot;pager_index_lines&quot; の値より少ない場合は、全て表示します。
</p>
<sect2>
pager_spoil<label id="pager_spoil" >
<p>
<verb>
Type: boolean 
Default: unset
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="pager_hdrs_only" name="$pager_hdrs_only" > がセットされているときの本文の表示の仕方を決めます。セットされていると、本文の文字を
 <ref id="pager_spoiler" name="$pager_spoiler" > に指定されたキャラクタで置き換えます。セットされていなければ本文の行数だけ空行を出力します.
</p>
<p>
注意: セットされていないとき、本文の行数は実際のメールの行数をもとに計算します。ファイルが添付されている場合や本文が折り返されて表示される場合には、出力される空行数と本文を表示したときの行数とが合わなくなりま
 す。
</p>
<sect2>
pager_spoiler<label id="pager_spoiler" >
<p>
<verb>
Type: string 
Default: &quot;*&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="pager_hdrs_only" name="$pager_hdrs_only" >と <ref id="pager_spoil" name="$pager_spoil" > がセットされているときに本文の文字を置
 き換えるキャラクタを指定します。
</p>
<sect2>
pager_stop<label id="pager_stop" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
セットされていると、内蔵ページャーを使っていてメッセージの終わりの位置を表示している場合
 &quot;next-page&quot;機能を起動したときに、次のメッセージに移動しなくなります。
</p>
<sect2>
pgp_autosign<label id="pgp_autosign" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数をセットしていると、出ていくメッセージに常に PGP/MIME署名しようとします。署名が要求されない場合や、暗号化が必要な場合に、&quot;pgp-menu&quot;を使って変更することができます。
</p>
<sect2>
pgp_autoencrypt<label id="pgp_autoencrypt" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数をセットしていると、出ていくメッセージを常に PGP/MIME暗号化しようとします。おそらく、&quot;send-hook&quot;コマンドと組み合わせて使うと便利でしょう。暗号化が要求されない場合や署名が必要な場合に、&quot;pgp-menu&quot;を使って変更することができます。
</p>
<sect2>
pgp_ignore_subkeys<label id="pgp_ignore_subkeys" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数を設定すると Muttは OpenPGPのサブキーを無視します。そしてその代わりに第一キー(principal
 key)がサブキーに継承されます。キーセレクションで色々遊びたいならこの変数を設定しない方がいいでしょう。
</p>
<sect2>
pgp_entry_format<label id="pgp_entry_format" >
<p>
<verb>
Type: string 
Default: &quot;&percnt;4n &percnt;t&percnt;f &percnt;4l/0x&percnt;k &percnt;-4a &percnt;2c &percnt;u&quot; 
</verb>
</p><p>
この変数で PGP鍵の選択メニューを自分用に設定できます。使うことのできる文字列は
 <ref id="index_format" name="$index_format" >と似てますが、それ以外にも printfに似た命令を使えます。
</p>
<p>
<descrip>
 <tag>
&percnt;n</tag>番号
 <tag>
&percnt;k</tag>鍵のID
 <tag>
&percnt;u</tag>ユーザID
 <tag>
&percnt;a</tag>アルゴリズム
 <tag>
&percnt;l</tag>鍵の長さ
 <tag>
&percnt;f</tag>フラグ
 <tag>
&percnt;c</tag>能力(capabilities)
 <tag>
&percnt;t</tag>key-uidの伴う鍵の信用度
 <tag>
&percnt;&lsqb;&lt;s&gt;&rsqb;</tag>鍵の日付、&lt;s&gt;は strftime(3)で使われる表現
</descrip>
</p><sect2>
pgp_good_sign<label id="pgp_good_sign" >
<p>
<verb>
Type: regular 
expression Default: &quot;&quot; 
</verb>
</p><p>
この変数にテキストを設定すると、<ref id="pgp_verify_command" name="$pgp_verify_command" >がそのテキストを含んでいた場合には
 PGP署名は常に正しいと考えます。この変数は正しくない署名の場合でもコマンドの
 exit codeが 0の場合に使ってください。
</p>
<sect2>
pgp_long_ids<label id="pgp_long_ids" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
セットされていると64ビット PGP キー ID を使います。アンセットだと普通の32ビットキー
 ID を使います。
</p>
<sect2>
pgp_replyencrypt<label id="pgp_replyencrypt" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットされていると、暗号化されているメッセージに返信すると自動的に
 PGP暗号化するようになります。
</p>
<sect2>
pgp_replysign<label id="pgp_replysign" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セットされていると、PGP 署名されているメッセージに返信すると自動的に
 PGP 署名するようになります。
</p>
<p>
<bf>注意</bf>: 暗号化されていて、かつ署名されているメッセージに対しては動作しません。
</p>
<sect2>
pgp_replysignencrypted<label id="pgp_replysignencrypted" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると暗号化されたメッセージに返信する場合に自動的に
 PGP署名します。これは <ref id="pgp_replyencrypt" name="$pgp_replyencrypt" >といっしょに使うといいでしょう。これを使うことで自動的に暗号化されたメッセージのすべてに署名をできるからです。これは
 pgp_replysign<ref id="pgp_replysign" name="$pgp_replysign" >の持つ問題、つまりmuttが暗号化されたメッセージが署名されているかどうかを判別できないという問題に対する一つの解決法です。
</p>
<sect2>
pgp_retainable_sigs<label id="pgp_retainable_sigs" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
これをセットすると署名され、暗号化されたメッセージは入れ子になったマルチパートメッセージとして
 multipart/signed と multipart/encryptedになります。
</p>
<p>
この設定は暗号化され署名されたメーリングリストなどのアプリケーションは便利でしょう。外側の
 (multipart/encrypted)レイヤーは内側の multipart/signedのパートを残して簡単に取り去れます。
</p>
<sect2>
pgp_show_unusable<label id="pgp_show_unusable" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
これがセットされていると PGP鍵の選択メニューに使うことのできない鍵も表示します。この使うことのできない鍵には取り消された鍵、有効期限がすぎた鍵、使用不可とマークされた鍵が含まれます。
</p>
<sect2>
pgp_sign_as<label id="pgp_sign_as" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
1つ以上のキーペアを持っている場合に、どのプライベートキーを用いるかをこのオプションで指定します。キーを指定する際はキーIDの形式で指定することが推奨されています(例:
 &quot;0x00112233&quot;)。
</p>
<sect2>
pgp_strict_enc<label id="pgp_strict_enc" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
セットされていると、PGP/MIME署名されたメッセージは自動的に <em>quoted-printable</em>でエンコードされます。この変数をアンセットにすると、その署名が正しいものかどうかを確認できないような
 PGP 署名を生成するという問題を引き起こすかもしれないということに注意してください。ですから、自分が何をやっているかを正確にわかっている場合にのみ、変更を行ってください。
</p>
<sect2>
pgp_timeout<label id="pgp_timeout" >
<p>
<verb>
Type: number 
Default: 300 
</verb>
</p><p>
指定された秒数の後、使われていないキャッシュされているパスフレーズを消します。
</p>
<sect2>
pgp_verify_sig<label id="pgp_verify_sig" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
この変数が yesになっていると、つねに PGP/MIME署名が正しいかどうかを確かめます。この変数が
 ask-yesまたは ask-noになっていた場合は確かめるかどうかをたずねます。noになっていた場合は
 PGP/MIME署名を確かめません。
</p>
<sect2>
pgp_sort_keys<label id="pgp_sort_keys" >
<p>
<verb>
Type: sort order 
Default: address 
</verb>
</p><p>
どのように PGP鍵メニューで項目を並べるかを指定します。使うことのできるのは、
</p>
<p>
<descrip>
 <tag>
address</tag>ユーザーIDによってアルファベット順に並べます
 <tag>
keyid</tag>キーIDによってアルファベット順に並べます
 <tag>
date</tag>鍵の製作日時の順に並べます
 <tag>
trust</tag>鍵の信用度に応じてならべます
</descrip>
</p><p>
並べ方を逆順にしたい場合には、'reverse-'を前につけてください。
</p>
<sect2>
pgp_create_traditional<label id="pgp_create_traditional" >
<p>
<verb>
Type: quadoption 
Default: no 
</verb>
</p><p>
このオプションはある特定の状況で古いスタイルの PGP暗号化や PGP証明をするかどうかをコントロールします。Muttは
 us-ascii以外の文字セットが使われた場合と１つ以上の MIMEパートを含んでいる場合には自動的に
 PGP/MIMEを使うことに注意してください。それともう一つ、古いスタイルの
 PGPメッセージフォーマットを使うことは<em>できる限りやめてください</em>。
</p>
<sect2>
pgp_decode_command<label id="pgp_decode_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
このフォーマット用の文字列は application/pgpアタッチメントをデコードするコマンドを指定します。
</p>
<p>
この PGPコマンド用のフォーマットは printfに似た形をしています。
</p>
<p>
<descrip>
 <tag>
&percnt;p</tag>パスフレーズが必要な場合は PGPPASSFD=0に展開され、それ以外の場合は空の文字列に展開されます。注意:
 これは &percnt;?といっしょに使うのがいいでしょう。
 <tag>
&percnt;f</tag>メッセージを含んだファイルのファイル名に展開されます。
 <tag>
&percnt;s</tag>証明を確認する場合に multipart/signedアタッチメントの署名のパートを含むファイル名に展開されます。
 <tag>
&percnt;a</tag><ref id="pgp_sign_as" name="$pgp_sign_as" >の値
 <tag>
&percnt;r</tag>一つまたはそれ以上のキーID
</descrip>
</p><p>
あなたが使っている PGPのバージョンに合わせて、どのようにこれらの文字列を設定するかについては
 samples/サブディレクトリに入っている pgp*.rcや gpg.rcファイルを見てください。
</p>
<sect2>
pgp_getkeys_command<label id="pgp_getkeys_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
muttが公開鍵の情報が必要なときに呼び出されるコマンドを指定します。&percnt;rがこのフォーマットで使われるただひとつの
 printfのような文字列です。
</p>
<sect2>
pgp_verify_command<label id="pgp_verify_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
PGP/MIME署名が正しいかどうかを確認するためのコマンドです。
</p>
<sect2>
pgp_decrypt_command<label id="pgp_decrypt_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは PGP/MIME暗号化されたメッセージを復号するコマンドです。
</p>
<sect2>
pgp_clearsign_command<label id="pgp_clearsign_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
このフォーマットは古いスタイルの&quot;clearsigned&quot;PGPアタッチメントをつくるのに使われます。注意:
 このフォーマットはできるだけ使わないでください。
</p>
<sect2>
pgp_sign_command<label id="pgp_sign_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
このコマンドは multipart/signed PGP/MIMEの本文パートのための切り離された(detached)PGP署名をつくるのに使います。
</p>
<sect2>
pgp_encrypt_sign_command<label id="pgp_encrypt_sign_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは結合したまま本文パートを署名、暗号化するコマンドを指定します。
</p>
<sect2>
pgp_encrypt_only_command<label id="pgp_encrypt_only_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは署名なしで本文パートを暗号化するのに使うコマンドを指定します。
</p>
<sect2>
pgp_import_command<label id="pgp_import_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
ここで指定したコマンドで鍵をメッセージからユーザの公開鍵リングに入れます。
</p>
<sect2>
pgp_export_command<label id="pgp_export_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
ユーザのキーリングから公開鍵をエクスポートするコマンドを指定します。
</p>
<sect2>
pgp_verify_key_command<label id="pgp_verify_key_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは鍵選択メニューから鍵の情報を確認するのに使うコマンドを指定します。
</p>
<sect2>
pgp_list_secring_command<label id="pgp_list_secring_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは秘密鍵リングの内容をリストするコマンドです。出力のフォーマットは
 gpg --list-keys --with-colons で使われているのと同じようでなければなりません。
</p>
<p>
このフォーマットは muttについてくるユーティリティ pgpringも使っています。
</p>
<sect2>
pgp_list_pubring_command<label id="pgp_list_pubring_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
これは公開鍵リングの内容をリストするコマンドです。出力のフォーマットは
 gpg --list-keys --with-colons で使われているのと同じようでなければなりません。
</p>
<p>
このフォーマットは muttについてくるユーティリティ pgpringも使っています。
</p>
<sect2>
forward_decrypt<label id="forward_decrypt" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
メッセージを転送する際に暗号化されたメッセージをどう扱うかをコントロールします。この変数がセットされていると、暗号化の外側のレイヤーが取り除かれます。この変数は
 <ref id="mime_forward" name="$mime_forward" >がセットされ、そして <ref id="mime_forward_decode" name="$mime_forward_decode" >がアンセットされている場合のみ使われます。
</p>
<sect2>
ssl_starttls<label id="ssl_starttls" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
この変数がセットされていると（これがデフォルトです）、サーバの能力を調べるのに
 STARTTLSを使います。設定されていないとサーバの能力に関わらず、STARTTLSを使いません。
</p>
<sect2>
certificate_file<label id="certificate_file" >
<p>
<verb>
Type: path 
Default: &quot;&quot; 
</verb>
</p><p>
この変数はあなたが信用する証明書(certificates)を保存するファイルを指定します。もし未知の証明書と出会った場合は、その証明書を受け入れるかどうかを聞いてきます。それを受け入れる場合にはこのファイルに保存され、それ以降は自動的に受け入れられます。
</p>
<p>
また自分で手動で CA 証明書(certificate)をこのファイルに加えることができます。これらの
 CA証明書のひとつで署名されたサーバ証明書も自動的に受け入れられます。
</p>
<p>
例: set certificate_file=/.mutt/certificates 
</p>
<sect2>
ssl_usesystemcerts<label id="ssl_usesystemcerts" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数が yesになっていると、muttはサーバ証明書が信用できる
 CAによって証明されてかどうかを確かめるのにシステム全体の証明書置き場の
 CA証明書を使います。
</p>
<sect2>
entropy_file<label id="entropy_file" >
<p>
<verb>
Type: path 
Default: &quot;&quot; 
</verb>
</p><p>
SSLライブラリ関数を初期化するために使われるランダムデータを含むファイル。
</p>
<sect2>
ssl_use_sslv2<label id="ssl_use_sslv2" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数で SSL認証プロセスで SSLv2を使うかどうかを指定する。
</p>
<sect2>
ssl_use_sslv3<label id="ssl_use_sslv3" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数で SSL認証プロセスで SSLv3を使うかどうかを指定する。
</p>
<sect2>
ssl_use_tlsv1<label id="ssl_use_tlsv1" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数で SSL認証プロセスで TLS v1を使うかどうかを指定する。
</p>
<sect2>
pipe_split<label id="pipe_split" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
<it>pipe-message</it>コマンド、tag- prefixオペレータといっしょに使います。この変数がセットされていない場合は、タグ付されたメッセージをパイプで送るときにメッセージを連結して一つのフォルダとして送ります。この変数がセットされていると、Muttはメッセージを一つずつ送ります。どちらの場合でもメッセージはいま並んでいる順番でパイプに送られ、各々のメッセージの後ろには
 <ref id="pipe_sep" name="$pipe_sep" >セパレータが付け加えられます。
</p>
<sect2>
pipe_decode<label id="pipe_decode" >
<p>
<verb>
Type : boolean 
Default: no 
</verb>
</p><p>
<it>pipe-message</it>コマンドとともに使います。もしセットされていないと
 Muttは前処理をしません。セットされている場合はへッダを取り除き、メッセージの
 PGP/MIMEデコードを前処理として行ないます。
</p>
<sect2>
pipe_sep<label id="pipe_sep" >
<p>
<verb>
Type: string 
Default: &quot;/n&quot;
</verb>
</p><p>
タグ付けされた一連のメッセージを外部の Unixコマンドにパイプするときのセパレータを指定します。
</p>
<sect2>
pop_authenticators<label id="pop_authenticators" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
この変数には POPサーバにログインするための認証方法を試していく順序でコロンで区切って書いていきます。認証方法は
 user、apop、それに SASLの digest-md5、gssapi、cram-md5です。この変数は大文字、小文字を区別します。この変数が設定されていない場合は（これがデフォルトです）使える方法を一番安全なものから順に試していきます。
</p>
<p>
例: set pop_authenticators=&quot;digest-md5:apop:user&quot; 
</p>
<sect2>
pop_auth_try_all<label id="pop_auth_try_all" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされていると、Muttはすべての利用可能な方法を使います。セットされていないと前の方法が利用可能で無い場合のみ次の方法を使います。つまりある方法が利用可能だが認証が失敗する場合には、POPサーバに接続されません。
</p>
<sect2>
pop_checkinterval<label id="pop_checkinterval" >
<p>
<verb>
Type: number 
Default: 60 
</verb>
</p><p>
この変数でどれくらいの間隔（秒数）で POPサーバに新着メールを見に行くかを設定します。
</p>
<sect2>
pop_delete<label id="pop_delete" >
<p>
<verb>
Type: quadoption 
Default: ask-no
</verb>
</p><p>
もしセットされていれば fetch-mail機能を使った場合ダウンロードに成功したメッセージはPOPサーバから消します。もしセットされていない場合は
 POPサーバにメッセージを残しておきます。
</p>
<sect2>
pop_host<label id="pop_host" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
fetch-mail機能を使うために POPサーバの名前を設定します。また標準とは異なるポート、ユーザ名、パスワードも指定できます。例：
</p>
<p>
&lsqb;pop&lsqb;s&rsqb;://&rsqb;&lsqb;username&lsqb;:password&rsqb;@&rsqb;popserver&lsqb;:port&rsqb;
</p>
<sect2>
pop_last<label id="pop_last" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数がセットされている場合は fetch-mail機能を使って POPサーバから未読のメッセージを取り寄せるのに
 &quot;LAST&quot; POPコマンドを使おうとします。
</p>
<sect2>
pop_reconnect<label id="pop_reconnect" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
POPサーバへの接続が切れた場合に再接続するかどうかを設定します。
</p>
<sect2>
pop_user<label id="pop_user" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
POPサーバへのログイン名を指定します。デフォルトはローカルシステムでのログイン名です。
</p>
<sect2>
pop_pass<label id="pop_pass" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
POPアカウントのパスワードを指定します。この変数が設定されていない場合は、POPメールボックスを開けるときにパスワードの入力が求められます。<bf>注意：</bf>このオプションは確実に安全なマシンでのみ使ってください。スーパーユーザはあなたの
 muttrcファイルをあなたの許可無しで読むことができます。
</p>
<sect2>
post_indent_string<label id="post_indent_string" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
<ref id="attribution" name="$attribution" >変数と同じように、返信の際に引用したメッセージの後ろにこの文を入れます。
</p>
<sect2>
postpone<label id="postpone" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
すぐにメッセージを送信しない場合にメッセージを<ref id="postponed" name="$postponed" >メイルボックスに保存するかどうかをコントロールする変数です。
</p>
<sect2>
postponed<label id="postponed" >
<p>
<verb>
Type: string 
Default: &quot;&tilde;/postponed&quot;
</verb>
</p><p>
Muttは編集したメッセージの送信を延期することができます（<ref id="postponing_mail" name="postpone sending a message" >）。この変数は送信を延期したメールを保存するメールボックスを指定します。<ref id="postpone" name="$postpone" >変数も参照してください。
</p>
<sect2>
preconnect<label id="preconnect" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
この変数は muttがサーバへの接続に失敗した場合に実行するシェルコマンドを指定します。これは
 ssh(1)を使って安全な接続経路を得るのに有効です。もしこのコマンドがゼロ以外の状態を返した場合、muttはサーバへの接続をあきらめます。例：
</p>
<p>
preconnect=&quot;ssh -f -q -L 1234:mailhost.net:143 mailhost.net
 sleep 20 &lt; /dev/null &gt; /dev/null&quot; 
</p>
<p>
この例では mailhost.net上の fooというメールボックスは &lcub;localhost:1234&rcub;fooで見えるようになります。
</p>
<p>
注意： この例がちゃんと動くには、リモートマシンにパスワードなしで接続できる必要があります。
</p>
<sect2>
print 
<p>
<verb>
Type: quadoption 
Default: ask-no 
</verb>
</p><p>
印刷の前に確認のメッセージを出すかどうかをコントロールする変数です。間違ってよくp
 を押してしまう人に役立つでしょう。
</p>
<sect2>
print_command<label id="print_command" >
<p>
<verb>
Type: path
Default: &quot;lpr&quot; 
</verb>
</p><p>
メッセージを印刷するために使うコマンドパイプを設定します。
</p>
<sect2>
print_decode<label id="print_decode" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
print-messageコマンドといっしょに使います。このオプションがセットされている場合には
 <ref id="print_command" name="$print_command" >で指定した外部コマンドに渡す前にメッセージをデコードします。このオプションがセットされていない場合には、印刷のときに前処理はされません。後者の設定はあなたが正しく
 e-mailをファーマットすることができる優秀なプリンタフィルタを使っている場合には役に立つかも知れません。
</p>
<sect2>
print_split<label id="print_split" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
これは print-messageコマンドの振る舞いを変えます。このオプションが設定されていると
 <ref id="print_command" name="$print_command" >で設定したコマンドが印刷するメッセージごとに実行されます。設定されてない場合は
 <ref id="print_command" name="$print_command" >で設定したコマンドは一度しか実行されず、それに form feedをメッセージセパレータとして結合したすべての印刷するメールが送り込まれます。
</p>
<p>
<bf>enscript</bf>(1)プログラムのメール印刷モードを使っている人はこのオプションを設定した方がいいでしょう。
</p>
<sect2>
prompt_after<label id="prompt_after" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数をセットすると、外部のぺ-ジャー（<ref id="pager" name="$pager" >）を使っている場合、ぺ-ジャーを終了するときにすぐにインデックスメニューに戻るのではなく、実行するコマンドを聞いてくるようになります。セットしないと外部ぺ-ジャーを終了するとすぐにインデックスメニューに戻ります。
</p>
<sect2>
query_command<label id="query_command" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
外部にアドレスを問い合わせるコマンドを指定します。その中には
 &percnt;sという文字列が含まれている必要があり、これにユーザーが入力した問い合わせの文字列が代入されます。詳しくは<ref id="query" name="query" >を見てください。
</p>
<sect2>
quit<label id="quit" >
<p>
<verb>
Type: quadoption 
Default: yes 
</verb>
</p><p>
この変数は quitと exitが実際に muttを終了するかどうかをコントロールします。もし
 yesに設定してあるとすぐに終了し、noに設定してあると終了しません。そして
 ask-yesまたは ask-noに設定してある場合は終了する前に確認します。
</p>
<sect2>
quote_regexp<label id="quote_regexp" >
<p>
<verb>
Type: regular expression
Default: &quot;^(&lsqb;&bsol;t&rsqb;*&lsqb;|&gt;:&rcub;&num;&rsqb;)+&quot;
</verb>
</p><p>
内蔵ぺ-ジャーがメッセージの本文の中のどこが引用部分かを決めるための正規表現です。
</p>
<p>
<bf>注意</bf>: 内蔵ぺ-ジャーが <it>quoted</it><it><bf></bf></it>x</it></bf>パターンを使うためには、引用部分の行頭の文字に正確に一致するように正規表現を設定する必要があります。
</p>
<sect2>
read_inc<label id="read_inc" >
<p>
<verb>
Type: number 
Default: 10 
</verb>
</p><p>
この変数が 0より大きい値をとっていた場合、メールボックスの今読み込んでいるメッセージの番号を表示します。この変数で設定した数ごとにどこまで読み込んだかを表示します
 (つまり25に設定されていれば、始めの25のメッセージを読み込んだときに25と表示され、次の25メッセージを読み込むと50と表示されます)。この変数は大きなメールボックスを読み込むのに時間がかかる場合にその進展状況を示すためのものです。
</p>
<p>
0に設定されている場合はメールボックスを読む前にメッセージがでるだけです。
</p>
<p>
<ref id="write_inc" name="$write_inc" >変数も参照してください。
</p>
<sect2>
read_only<label id="read_only" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
もしセットしてあると、すべてのフォルダーは read-onlyモードで開きます。
</p>
<sect2>
realname<label id="realname" >
<p>
<verb>
Type: string 
Default: &quot;&quot;
</verb>
</p><p>
メッセージを送るときにつける名前を設定します。デフォルトではこれは
 /etc/passwdのGCOS フィールドです。この変数はユーザが <ref id="from" name="$from" >変数で名前を設定した場合には使われません。注意してください。
</p>
<sect2>
recall<label id="recall" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
新しいメッセージを編集するときに、送るのを延期したメッセージを読み込むかどうかの確認をコントロールします。<ref id="postponed" name="$postponed" >も参照してください。
</p>
<p>
この変数を yesにすることは一般的には役に立たず、お薦めできません。
</p>
<sect2>
record<label id="record" >
<p>
<verb>
Type: path
Default: &quot;&quot;
</verb>
</p><p>
送信したメッセージをどのファイルに追加するかを指定します。(これは送信したメッセージを保存するための方法の1つです。他の方法は
 <ref id="my_hdr" name="my_hdr" >コマンドを使って自分のメールアドレスの入った <em>Bcc:</em> フィールドをつくることです。)
</p>
<p>
<it><ref id="record" name="$record" ></it>の値は<ref id="force_name" name="$force_name" >、<ref id="save_name" name="$save_name" >変数、 <ref id="fcc-hook" name="fcc-hook" >コマンドで上書きされます。
</p>
<sect2>
reply_regexp<label id="reply_regexp" >
<p>
<verb>
Type: regular expression
Default: &quot;^(re(&lsqb;&bsol;&lsqb;0-9&bsol;&rsqb;+&rsqb;)*|aw):&lsqb; &bsol;t&rsqb;*&quot; 
</verb>
</p><p>
返信されてきたメッセージを認識するための正規表現です。デフォルトでは英語の
 Re: とドイツ語の Aw: が使われます。
</p>
<sect2>
reply_self<label id="reply_self" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
もしセットされていなくて自分からのメッセージに返信する場合、Muttはあなた以外にそのメッセージの受取人にメッセージを送りたいのだと仮定します。
</p>
<sect2>
reply_to<label id="reply_to" >
<p>
<verb>
Type: quadoption 
Default: ask-yes 
</verb>
</p><p>
もし設定されていれば、Muttはメッセージを返信する際に Reply-To:
 に書かれたアドレスのリストにメッセージを送りたいのかどうかを尋ねます。このオプションは
 Reply-To:がメーリングリストの宛先になっているなっているメーリングリストを読んでいて個人的なメッセージを送りたいような場合に便利です。
</p>
<sect2>
resolve<label id="resolve" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
これが設定されていると今カーソルのあるメッセージを変更するコマンドを実行した場合、自動的に(削除されてない)次のメッセージにカーソルを移動します。
</p>
<sect2>
reverse_alias<label id="reverse_alias" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数はエイリアスにメッセージの送り主があった場合、インデックスメニューにエイリアスの個人名を表示するかどうかをコントロールします。例えば、もし次のようなエイリアスがあり
</p>
<p>
<verb>
alias juser abd30425@somewhere.net (Joe User)  
</verb>
</p><p>
次のようなへッダーを持つメッセージを受け取ると、
</p>
<p>
<verb>
From: abd30425@somewhere.net  
</verb>
</p><p>
インデックスメニューに abd30425@somewhere.netのかわりに Joe Userが表示されます。これはある人のメールアドレスが(Compu&dollar;erveのアドレスのように)人間にわかりにくい場合に便利です。
</p>
<sect2>
reverse_name<label id="reverse_name" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
あるコンピュータでメールを受け取り、それを別のコンピュータに移動し、別のコンピュータで返信するを場合があります。この変数をセットしておくとデフォルトの
 <em>From: </em>フィールドがメッセージを受け取ったコンピュータのものになります。セットしなければ
 <em>From: </em>は今いるコンピュータのものになります。
</p>
<sect2>
reverse_realname<label id="reverse_realname" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数は <ref id="reverse_name" name="reverse_name" >機能の振る舞いを調整します。この変数がセットされている場合は来たメールが本当の名前を含んでいるとして、そのアドレスをそのまま使います。これがセットされていない場合は、<ref id="realname" name="realname" >変数の設定を使いそのような名前を上書きします。
</p>
<sect2>
rfc2047_parameters<label id="rfc2047_parameters" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、muttは RFC-2047-encoded MIMEパラメータをデコードします。muttが添付ファイルを
 =?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=のようなファイル名で保存しますかときいてくるような場合は、この変数をセットしたくなるでしょう。
</p>
<p>
この変数を（muttの中で）対話的に設定した場合には、フォルダを変わるまで効果がでてきません。
</p>
<p>
RFC 2047のこの使用法は明示的に規格では禁止されているにも関わらず、使われているということに注意してください。。またこの変数をセットしても
 muttがそのような種類のエンコードを生成するようなことはありません。muttは無条件で
 RFC 2231において指定されるエンコーディングを使います。
</p>
<sect2>
sanitize_ja_chars
<p>
<verb>
Type: boolean 
Default: unset
</verb>
</p><p>
（jaパッチの拡張機能）このオプションを設定すると、日本語の機種依存文字を〓に置き換え、また、JIS
 X 0201 kana ( &quot;ESC ) I&quot; の場合のみ) を ? に置き換えて表示が乱れるの
 を防ぎます。ただし、JIS X 0201 kana が 8bit のままでてきた場合は処理しません。また、<ref id="charset" name="$charset" >
 が EUC-JP に設定している場合は、EUC-JP には JIS X 0201 roman が含まれないため、受け取ったメッセージの
 ISO-2022-JP の文字列にそのエスケープシーケンスが含まれている場合、EUC-JP
 には変換できません。逆に、Shift_JIS には ASCII が含まれないため、受け取ったメッセージの
 ISO-2022-JP の文字列にそのエスケープシーケンスが含まれている場合は
 Shift_JIS には変換できません。そのため、 このようなケースの場合には文字化けが生じます。このオプションを設定すると、JIS
 X 0201 roman と ASCII のエスケープシーケンスを互いに置き換え、文字化けを防ぐことができます。
</p>
<sect2>
save_address<label id="save_address" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数がセットされているとメールを保存するフォルダを選ぶときに
 muttは送り手のフルアドレスを使います。もし<ref id="save_name" name="$save_name" >や<ref id="force_name" name="$force_name" >がセットされていると
 fccフォルダの選択も同じように変更されます。
</p>
<sect2>
save_empty<label id="save_empty" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
もしセットされない場合には保存されたメッセージの無いメールボックスはそのメールボックスを閉じるときに削除されます。(例外は<ref id="spoolfile" name="$spoolfile" >でこれは決して削除されません)。もしセットされていれば、メールボックスは削除されません。
</p>
<p>
<bf>注意</bf>: これは mboxと MMDFフォルダのみに適応されます。MHと Maildirディレクトリは削除されません。
</p>
<sect2>
save_name<label id="save_name" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数は送信したメッセージのコピーをどのように保存するかをコントロールします。もしセットされていればメッセージの受取人のアドレスの名前のついたメールボックスがあるかどうかを確かめます
 (これは <ref id="folder" name="$folder" >ディレクトリ内に受取人のアドレスのユーザネームと同じ名前のついたメールボックスがあるかどうかを確かめます)。もしあれば送信したメッセージのコピーがそのメールボックスに保存されます。そうでない場合には
 <ref id="record" name="$record" >メールボックスに保存されます。
</p>
<p>
<ref id="force_name" name="$force_name" >も参照してください。
</p>
<sect2>
score<label id="score" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数をアンセットするとスコアが使えなくなります。<ref id="score_threshold_delete" name="$score_threshold_delete" >変数などを使っている場合には、特定のフォルダでスコアを使えないようにするのがいい場合があるでしょう。
</p>
<sect2>
score_threshold_delete<label id="score_threshold_delete" >
<p>
<verb>
Type: number 
Default: -1 
</verb>
</p><p>
この変数と等しいかより低いスコアを持つメッセージは自動的に削除の対象に選ばれます。muttはつねにゼロ以上のスコアをつけるので、デフォルトの設定ではどのメッセージも削除の対象になりません。
</p>
<sect2>
score_threshold_flag<label id="score_threshold_flag" >
<p>
<verb>
Type: number 
Default: 9999 
</verb>
</p><p>
この変数の値よりも大きいスコアを持つメッセージは自動的にフラグが立てられます。
</p>
<sect2>
score_threshold_read<label id="score_threshold_read" >
<p>
<verb>
Type: number 
Default: -1 
</verb>
</p><p>
この変数の値と等しい、またはより低いスコアを持つメッセージは自動的に既読のマークがつきます。muttはつねにゼロ以上のスコアをつけるので、デフォルトの設定ではどのメッセージも既読のマークはつきません。
</p>
<sect2>
send_charset<label id="send_charset" >
<p>
<verb>
Type: string 
Default: &quot;us-ascii:iso-8859-1:utf-8&quot; 
</verb>
</p><p>
メッセージを送信するときに使う文字セットのリストです。Muttはテキストを正確に変換できる最初の文字セットを使います。もしあなたが使っている
 <ref id="charset" name="$charset" >が iso-8859-1ではなく受取り手が UTF-8を使えるかどうかわからないような場合には、よく使われている標準的な文字セット（例えば
 iso-8859-2、koi8-r、 iso-2022-jp）を iso-8859-1のかわりに使うか、iso-8859-1の後ろに挿入した方がいいでしょう。
</p>
<sect2>
sendmail<label id="sendmail" >
<p>
<verb>
Type: string 
Default: &quot;/usr/sbin/sendmail -oem -oi&quot;
</verb>
</p><p>
Muttから送信したメッセージを配送するプログラムと引数を指定します。Muttはその指定したプログラムが追加的なオプションを受取人のアドレスと解釈すると仮定しています。
</p>
<sect2>
sendmail_wait<label id="sendmail_wait" >
<p>
<verb>
Type: number 
Default: 0 
</verb>
</p><p>
<ref id="sendmail" name="$sendmail" >プロセスがすぐに送るのをあきらめて配送をバックグランドにまわすまでの秒数を指定します。
</p>
<p>
Muttはこの変数を次のように解釈します。
</p>
<p>
<verb>
&gt;0      sendmailの終了まで待つ時間
0       sendmailの終了まで永遠に待つ
&lt;0      常に待つこと無くバックグランドで sendmailを動かす 
</verb>
</p><p>
もし 0以外の値を選んだ場合には、子プロセスからのアウトプットは一時ファイルに保存されます。何かエラーがあった場合にはどのファイルに子プロセスからの出力が入っているかを知らせます。
</p>
<sect2>
shell<label id="shell" >
<p>
<verb>
Type: path
Default: &quot;&quot; 
</verb>
</p><p>
サブシェルをつくるときのコマンドを指定します。デフォルトでは
 /etc/passwdのログインシェルが使われます。
</p>
<sect2>
sig_dashes<label id="sig_dashes" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
これがセットされていると<ref id="signature" name="$signature" >の前に「<tt>--</tt>」を含んだ行が挿入されます。できるだけこの変数をアンセットしないでください。多くのプログラムが「<tt>--
 &bsol;n</tt>」をシグニチャを探すために使っているからです。Muttもこの行を使って内蔵ぺ-ジャーでシグニチャに別の色を付けています。
</p>
<sect2>
sig_on_top<label id="sig_on_top" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数を設定すると <ref id="signature" name="$signature" >が引用文や転送メッセージよりも前に挿入されます。この変数はできるだけ設定しないでください。ネチケット違反として多くの人に非難されます。
</p>
<sect2>
signature<label id="signature" >
<p>
<verb>
Type: path 
Default: &quot;&tilde;/.signature&quot;
</verb>
</p><p>
送信するメッセージの最後につけるシグニチャ用のファイル名を指定します。もしファイル名がパイプ(|)で終わっている場合にはファイル名はシェルコマンドだと解釈され、その標準出力からインプットが読み込まれます。
</p>
<sect2>
simple_search<label id="simple_search" >
<p>
<verb>
Type: string 
Default: &quot;&tilde;f &percnt;s | &tilde;s &percnt;s&quot; 
</verb>
</p><p>
どのようにシンプルサーチを本当のサーチパターンに展開するかを指定します。シンプルサーチは
 &tilde;オペレータを含まないものです。サーチパターンについて詳しくは<ref id="patterns" name="patterns" >を参照してください。
</p>
<p>
例えば単に <tt>joe</tt>を検索した場合、それを自動的にどのように展開するかをこの変数で指定します。デフォルトでは次のように展開されます。
</p>
<p>
<tt>&tilde;f joe | &tilde;s joe</tt> 
</p>
<sect2>
smart_wrap<label id="smart_wrap" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
一行が内蔵ぺ-ジャーの横幅より長い場合にどのように表示するかをコントロールする変数です。もしセットすると、長い行は単語の区切りで折り返され、セットされてない場合にはスクリーンの端で折り返されます。
</p>
<p>
<ref id="markers" name="$markers" >変数も参照してください。
</p>
<sect2>
smileys<label id="smileys" >
<p>
<verb>
Type: regular expression
Default: &quot;(&gt;From )|(:&lsqb;-^&rsqb;?&lsqb;&rsqb;&lsqb;)(&gt;&lt;&rcub;&lcub;|/DP&rsqb;)&quot;
</verb>
</p><p>
この変数はぺ-ジャーが<ref id="quote_regexp" name="$quote_regexp" >の失敗をなくすために使います。一番多い原因は行頭のスマイリです。
</p>
<sect2>
sleep_time<label id="sleep_time" >
<p>
<verb>
Type: number 
Default: 1 
</verb>
</p><p>
フォルダからフォルダへ移動したり、メッセージを削除した場合に、画面に情報を表示するために一時停止する時間を秒数で指定します。デフォルトでは
 1秒です。この値をゼロに設定すると一時停止しなくなります。
</p>
<sect2>
sort<label id="sort" >
<p>
<verb>
Type: sort order
Default: date 
</verb>
</p><p>
インデックスメニューの中でどのようにメッセージを並べ替えるかを設定します。使うことのできる値は次のものです。
</p>
<p>
<itemize>
 <item>
dateまたは date-sent 
 <item>
date-received 
 <item>
from 
 <item>
mailbox-order (ソートしない) 
 <item>
score 
 <item>
size 
 <item>
subject 
 <item>
threads 
 <item>
to 
</itemize>
</p><p>
また <tt>reverse-</tt>という接頭辞をつけて順序を逆にすることができます(例:
 <tt>set sort=reverse-date-sent</tt>)
</p>
<sect2>
sort_alias<label id="sort_alias" >
<p>
<verb>
Type: sort order
Default: alias 
</verb>
</p><p>
エイリアスメニューの項目をどのように並べ替えるかを設定します。使うことのできる値は次のものです。
</p>
<p>
<itemize>
 <item>
address (メールアドレスのアルファベット順) 
 <item>
alias (別名のアルファベット順) 
 <item>
unsorted (.muttrcの中の順) 
</itemize>
</p><sect2>
sort_aux<label id="sort_aux" >
<p>
<verb>
Type: sort order
Default: date
</verb>
</p><p>
スレッドをソートするときに、この変数はスレッド間の順序やスレッドツリー内のサブスレッドをどのように並べ替えるかをコントロールします。この変数は
 <ref id="sort" name="$sort" >がとることのできる値をすべて使うことができますが、 <tt>threads</tt>だけは使うことができません(<tt>threads</tt>が設定された場合は
 <tt>date-sent</tt>が使われます)。また <tt>reverse-</tt>接頭辞以外に <tt>last-</tt>という接頭辞を使うことができますが、これを
 <tt>reverse-</tt>といっしょに使う場合は<tt> reverse-</tt>の後ろにつける必要があります。これは最新の孫スレッドの
 sort_auxの順で子スレッドを並べ替えます。例えば、<tt>set sort_aux=last-date-receivedは新しいメッセージがスレッド内に受け取られるとそのスレッドが一番最後に表示されることを意味します（もし
 set sort=reverse-threadsが設定されている場合には、一番初めです）。注意:
 </tt><ref id="sort" name="$sort" ><tt>を逆順にしている場合は <ref id="sort_aux" name="$sort_aux" >も逆順になります（これはおかしな設定なのですが、既存の設定をこわさないようにこのようにしています）。
</tt>
</p>
<sect2>
sort_browser<label id="sort_browser" >
<p>
<verb>
Type: sort order
Default: subject 
</verb>
</p><p>
ファイルブラウザで項目をどうやって並べ替えるかを設定します。デフォルトではアルファベット順で並べられます。使うことのできる値は次のものです。
</p>
<p>
<itemize>
 <item>
alpha (アルファベット順) 
 <item>
date 
 <item>
size 
 <item>
unsorted 
</itemize>
</p><p>
また <tt>reverse-</tt>接頭辞をつけて順序を逆にすることができます (例:
 <tt>set sort_browser=reverse-date</tt>)
</p>
<sect2>
sort_re<label id="sort_re" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数は <ref id="strict_threads" name="$strict_threads" >がアンセットされた状態でスレッドをソートする場合にのみ効果があります。その場合、この変数はサブジェクトを使ってメッセージをスレッドに分類する方法を変えます。もし
 sort_reがセットされている場合はサブジェクトの先頭が<ref id="reply_regexp" name="$reply_regexp" >で設定される文字列の一部と一致しなければそのメッセージのスレッドには分類されません。sort_reがアンセットされている場合はサブジェクトの<ref id="reply_regexp" name="$reply_regexp" >に含まれない部分が一致しているとそのメッセージのスレッドに入ります。
</p>
<sect2>
spoolfile<label id="spoolfile" >
<p>
<verb>
Type: path
Default: &quot;&quot; 
</verb>
</p><p>
もしスプールメールボックスが標準の場所になく、Muttが探し出せないときにこの変数で場所を指定します。この変数が設定されていない場合には自動的に環境変数
 <tt>&dollar;MAIL</tt>の値がこの変数に設定されます。
</p>
<sect2>
status_chars<label id="status_chars" >
<p>
<verb>
Type: string 
Default: &quot;-*&percnt;A&quot; 
</verb>
</p><p>
<ref id="status_format" name="$status_format" >の &percnt;rの表示に使う文字を設定します。一番初めの文字はメールボックスに変化が無い場合に使われ、2番目の文字はメールボックスに変化があり同期する必要がある場合に使います。3番目の文字はメールボックスがリードオンリまたはそのメールボックスを閉じるときに書き込みができない場合に使われます
 (書き込みの禁止のオン、オフは toggle-writeオペレータで行なえます。これは
 &percnt;キーに割り当てられています)。4番目の文字は今いるフォルダが添付メッセージモードで開かれている場合に使われます
 (このモードではある種の操作、例えば新しいメールの編集、返信、転送等ができません)。
</p>
<sect2>
status_format<label id="status_format" >
<p>
<verb>
Type: string 
Default: &quot;-&percnt;r-Mutt: &percnt;f &lsqb;Msgs:&percnt;?M?&percnt;M/?&percnt;m&percnt;?n? New:&percnt;n?&percnt;?o? Old:&percnt;o?&percnt;?d? Del:&percnt;d?&percnt;?F? 
Flag:&percnt;F?&percnt;?t? Tag:&percnt;t?&percnt;?p? Post:&percnt;p?&percnt;?b? Inc:&percnt;b?&percnt;?l? &percnt;l?&rsqb;---(&percnt;s/&percnt;S)-&percnt;&gt;-(&percnt;P)---&quot;
</verb>
</p><p>
この変数はインデックスメニューに表示されるステータス行のフォーマットを設定します。ここで使う文字列は<ref id="index_format" name="$index_format" >のものと似ていますが、printf()のような文字列を使えます。
</p>
<p>
<verb>
&percnt;b      新着メールの入ったメールボックスの数 *
&percnt;d      削除されたメッセージの数 *
&percnt;h      ローカルホスト名
&percnt;f      今いるメールボックスのフルパス名
&percnt;F      フラグのついたメールの数 *
&percnt;l      (bytesで表した)今のメールボックスのサイズ *
&percnt;L      (bytesで表した)表示されているメッセージのサイズ (つまり今の制限を満たしているもの) *
&percnt;m      メールボックス内のメッセージの数 *
&percnt;M      表示されているメッセージの数 (つまり今の制限を満たしているもの) * 
&percnt;n      メールボックス内の新しいメッセージの数 *
&percnt;o      古い未読メッセージの数
&percnt;p      送信を延期しているメッセージの数 *
&percnt;P      インデックス内で何パーセントの位置にいるか
&percnt;r      <ref id="status_chars" name="$status_chars" >による modified/read-only/won't-write/attach-message インディケータ
&percnt;s      今の並べ替えのモード （<ref id="sort" name="$sort" >）
&percnt;S      今の aux並べ替えのモード （<ref id="sort_aux" name="$sort_aux" >）
&percnt;t      タグ付けされたメッセージの数 *
&percnt;u      未読メッセージの数
&percnt;v      Muttのバージョン
&percnt;V      もし設定されていれば今有効になっている制限(limit)のパターン *
 
&percnt;&gt;X     残りの文字列を右揃し、Xで埋める
&percnt;|X     行末まで Xで埋める
 
* = ゼロで無い場合だけ表示するようにすることができる
</verb>
</p><p>
上のいくつかのものは値がゼロ以外の場合のみ表示するようにすることができます。例えば、フラグのつけられたメッセージの数が
 0以外の場合のみ表示させたいということがあるでしょう。そういう場合は次のような構文を使います。
</p>
<p>
<verb>
&percnt;?&lt;sequence_char&gt;?&lt;optional_string&gt;?  
</verb>
</p><p>
ここで <it>sequence_char</it>は前の表の文字で、<it>optional_string</it>は <it>status_char</it>が0以外の場合に表示させたい文字列です。<it>optional_string</it>は普通のテキスト以外に前の表の文字列を使うことができますが、別の
 <it>optional_string</it>をネストすることはできません。
</p>
<p>
次の例はメールボックス内の新着メッセージがゼロでない場合だけ表示されます。
</p>
<p>
<verb>
        &percnt;?n?&percnt;n new messages.?  
</verb>
</p><p>
また2つの文字列を状態に応じて使い分けることもできます。もし値がゼロの場合は始めの文字列が表示され、ゼロ以外の場合は2番目の文字列が表示されます。次のような構文を使います。
</p>
<p>
<verb>
&percnt;?&lt;sequence_char&gt;?&lt;if_string&gt;&amp;&lt;else_string&gt;?  
</verb>
</p><p>
またこの文字列の前にアンダースコア(_)を接頭辞としてつけることによって、強制的に小文字で出力できるようになります。例えばローカルホスト名を小文字で表示したい場合は
 &percnt;_hを使ってください。
</p>
<sect2>
status_on_top<label id="status_on_top" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
ステータス行を画面の下にではなく一行目に表示します。
</p>
<sect2>
strict_mime<label id="strict_mime" >
<p>
<verb>
Type: boolean 
Default: set
</verb>
</p><p>
（jaパッチの拡張機能）このオプションを解除すると、MIME に従っていないメッセージなど表示できるようになります。具体的には,
 <ref id="charset" name="charset" > の指定がないメッセージを表示します。<ref id="assumed_charset" name="$assumed_charset" >も見てください。さらに、 encoded-word
 と *text の 間の linear-white-space を space に置き換えます。これにより、MIME符号化された
 Subjectフィールドの表示が複数行にわかれることを防ぐことがで きます。
</p>
<sect2>
strict_threads<label id="strict_threads" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
この変数をセットするとメッセージをスレッドで<ref id="sort" name="$sort" >する場合に In-Reply-Toと
 Referencesフィールドだけが使われます。デフォルトではこの変数はセットされていなくて、その場合は同じサブジェクトを持つメッセージも同じスレッドに集められます。ただしこの設定がいつも望ましいわけではなく、例えば個人的なメールボックスでは多くの「hi」というサブジェクトを持った関係のないメッセージが集められることになります。
</p>
<sect2>
suspend<label id="suspend" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
この変数をアンセットすると、ユーザが通常 control-Zに割り当てられている
 <it>susp</it>キーを押してもmuttはサスペンドしません。これは <tt>xterm -e mutt</tt>のようなコマンドで
 muttを xtermの中で動かしているような場合に便利でしょう。
</p>
<sect2>
text_flowed<label id="text_flowed" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされると、muttは text/plain; format=flowedである添付ファイルをつくります。このフォーマットはいくつかのメールソフトで扱いが簡単であり、通常は普通のテキストと同じように見えます。実際にこのフォーマットの機能を使う場合には、エディターでのサポートが必要になります。
</p>
<p>
このオプションがセットされると<ref id="indent_string" name="$indent_string" >は無視されるので注意してください。
</p>
<sect2>
thread_received<label id="thread_received" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされていると、メッセージのスレッドをつくるのにメッセージを受け取った日付ではなく、メッセージを送った日付が使われる。
</p>
<sect2>
thorough_search<label id="thorough_search" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
セクション<ref id="patterns" name="patterns" >で説明した <tt>&tilde;b</tt>と <tt>&tilde;h</tt>サーチオペレータに影響を与えます。セットされていた場合は検索されるメッセージのへッダ、本文、添付ファイルがサーチの前にデコードされます。セットされていない場合はメッセージはフォルダの中に表示された形で検索されます。
</p>
<sect2>
tilde<label id="tilde" >
<p>
<verb>
Type: boolean 
Default: no 
</verb>
</p><p>
この変数がセットされると、内蔵ぺ-ジャーは画面の空白行を画面の下まで(&tilde;)で表します。
</p>
<sect2>
timeout<label id="timeout" >
<p>
<verb>
Type: number 
Default: 600 
</verb>
</p><p>
この変数はタイムアウトして新しいメールをチェックする前にメインメニューでキー入力を待つ時間を秒数でコントロールします。この値が
 0以下の場合は永遠にタイムアウトしません。
</p>
<sect2>
tmpdir<label id="tmpdir" >
<p>
<verb>
Type: path
Default: &quot;&quot; 
</verb>
</p><p>
メッセージの表示や編集のためにつくる一時ファイルを置くディレクトリを設定します。
</p>
<sect2>
to_chars<label id="to_chars" >
<p>
<verb>
Type: string 
Default: &quot; +TCFL&quot; 
</verb>
</p><p>
メッセージの宛先の状態を表示する文字を設定します。1番始めの文字はあなた宛ではないメールの場合に使われます
 (デフォルトはスペースです)。2番目の文字はあなただけがそのメッセージの受取人である場合に使われます。3番目の文字はあなたのアドレスが
 TO へッダフィールドにあるがあなた以外にも受取人がいる場合に使われます
 (デフォルトは T)。4番目の文字はあなたのアドレスが CC へッダフィールドにあるがあなた以外にも受取人がいる場合に使われます
 (デフォルトは C)。5番目の文字はそのメッセージはあなたが送信したことを表します。6番目の文字はあなたが購読しているメーリングリストにあてられたメールを表すものです（デフォルトは
 L）。
</p>
<sect2>
tunnel<label id="tunnel" >
<p>
<verb>
Type: string 
Default: &quot;&quot; 
</verb>
</p><p>
この変数を設定すると socketを開くかわりにコマンドにパイプを開きます。これを使って
 IMAP/POP3サーバへの認証前の接続をどのようにするかを設定することができます。
</p>
<p>
例: 
</p>
<p>
tunnel=&quot;ssh -q mailhost.net /usr/local/libexec/imapd&quot;
 
</p>
<p>
注意: この例がちゃんと作動するにはリモートマシンにパスワードなしで入れなければなりません。
</p>
<sect2>
tree_chars<label id="tree_chars" >
<p>
<verb>
Type: boolean 
Default: unset
</verb>
</p><p>
（jaパッチの拡張機能）vt-100 非互換端末 では ACS 文字を表示できません。このオプションを設定すると、スレッドや添付ファイルのツリーを表示する際に任意の文字を設定することができます。例えば,
 日本語であれば、JIS 0208の罫線を用いることもできます。文字の設定は
 <ref id="tree_llcorner" name="$tree_llcorner" >、<ref id="tree_ulcorner" name="$tree_ulcorner" >、<ref id="tree_ltee" name="$tree_ltee" >、<ref id="tree_hline" name="$tree_hline" >、<ref id="tree_vline" name="$tree_vline" >で行います。ただし、設定ファイルの記述で用いられる文字符号化方式と
 <ref id="charset" name="$charset" > に設定したものを同じにしてください。デフォルトでは <ref id="ascii_chars" name="$ascii_chars" >をセットしたときに使われる文字を使って表示します。設定例：JIS
 X 0208 の罫線を用いた例
</p>
<p>
<verb>
set tree_chars=yes 
set tree_llcorner=&quot;└&quot; 
set tree_ulcorner=&quot;┌&quot; 
set tree_ltee=&quot;│&quot; 
set tree_hline=&quot;─&quot; 
set tree_vline=&quot;│&quot;
</verb>
</p><sect2>
tree_llcorner<label id="tree_llcorner" >
<p>
<verb>
Type: string 
Default: &quot;`&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="tree_chars" name="$tree_chars" >を参照。
</p>
<sect2>
tree_ulcorner<label id="tree_ulcorner" >
<p>
<verb>
Type: string 
Default: &quot;,&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="tree_chars" name="$tree_chars" >を参照。
</p>
<sect2>
tree_ltee<label id="tree_ltee" >
<p>
<verb>
Type: string 
Default: &quot;|&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="tree_chars" name="$tree_chars" >を参照。
</p>
<sect2>
tree_hline<label id="tree_hline" >
<p>
<verb>
Type: string 
Default: &quot;-&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="tree_chars" name="$tree_chars" >を参照。
</p>
<sect2>
tree_vline<label id="tree_vline" >
<p>
<verb>
Type: string 
Default: &quot;|&quot;
</verb>
</p><p>
（jaパッチの拡張機能）<ref id="tree_chars" name="$tree_chars" >を参照。
</p>
<sect2>
use_8bitmime<label id="use_8bitmime" >
<p>
<verb>
Type: boolean 
Default: no
</verb>
</p><p>
<bf>警告</bf>: <tt>-B8BITMIME</tt>フラグをサポートする sendmail (つまりsendmail
 8.8.x)を使っているか、メールを送信できない場合にのみこの変数をセットしてください。
</p>
<p>
これをセットすると 8-bitメッセージを送る場合、<ref id="sendmail" name="$sendmail" >に <tt>-B8BITMIME</tt>フラグをつけて起動し
 ESMTPネゴシエーションができるようにします。
</p>
<sect2>
use_domain<label id="use_domain" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
この変数がセットされていると muttはすべてのローカルアドレス(@hostパートがつかないもの)に<ref id="hostname" name="$hostname" >変数を修飾します。unsetされた場合には修飾しません。
</p>
<sect2>
use_from<label id="use_from" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされるとメッセージを送信するときに From: へッダフィールドがつくられます。unsetされている場合には
 <ref id="my_hdr" name="my_hdr" >コマンドで明示的に設定しない限り From: へッダフィールドがつくられません。
</p>
<sect2>
user_agent<label id="user_agent" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
この変数がセットされていると送信するメッセージに User-Agentへッダがつき、どのバージョンの
 muttがそのメッセージを書くのに使われたかを知らせます。
</p>
<sect2>
visual<label id="visual" >
<p>
<verb>
Type: path
Default: &quot;&quot;
</verb>
</p><p>
内蔵エディタで <tt>&tilde;v</tt>コマンドが与えられたときに実行するビジュアルエディタを指定します。
</p>
<sect2>
wait_key<label id="wait_key" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
<it>shell-escape、</it> <it>pipe-message、</it> <it>pipe-entry、print-message、</it> <it>print-entry</it>コマンドの後で
 Muttがキーを入力するようにたずねるかどうかをコントロールします。
</p>
<p>
また <ref id="auto_view" name="auto_view" >で添付ファイルを見る場合、対応する mailcapの項目に <it>needsterminal</it>フラグがついていて外部プログラムを対話的に使う場合にも使われます。
</p>
<p>
この変数がセットされていると Muttは常にキー入力を求めます。unsetされている場合には外部コマンドがゼロ以外の値を返した場合のみキー入力を待ちます。
</p>
<sect2>
weed<label id="weed" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
セットされているとメッセージを表示、転送、印刷、返信するときにへッダを取り除きます。
</p>
<sect2>
wrap_search<label id="wrap_search" >
<p>
<verb>
Type: boolean 
Default: yes
</verb>
</p><p>
メールボックスの最後で検索を終えるかどうかをコントロールします。
</p>
<p>
この変数がセットされている場合には、検索は最初の(または最後の)メッセージで終わりますが、unsetされた場合には終わりません。
</p>
<sect2>
wrapmargin<label id="wrapmargin" >
<p>
<verb>
Type: number 
Default: 0 
</verb>
</p><p>
muttのページャが文章の右揃えをするときにターミナルの右にどれだけのマージンを残しておくかをコントロールします。
</p>
<sect2>
write_inc<label id="write_inc" >
<p>
<verb>
Type: number 
Default: 10 
</verb>
</p><p>
メールボックスに書き込む際に進行の状況を知らせるために終わったメッセージの数をいくつごとに表示するかを設定します。0の場合にはメールボックスに書き込む前にメッセージがでるだけです。
</p>
<p>
<ref id="read_inc" name="$read_inc" >変数も参照してください。
</p>
<sect2>
write_bcc<label id="write_bcc" >
<p>
<verb>
Type: boolean 
Default: yes 
</verb>
</p><p>
送信用のメッセージを書いているときに Bccへッダを muttが書くかどうかをコントロールします。Eximユーザに便利な機能です。
</p>
<sect1>
Functions<label id="functions" >
<p>
この章ではメニューごとに使うことのできる関数を一覧表にしています。デフォルトでのキーへの割り当てとその関数の説明が関数名の後に書いてあります。これらの関数のキーの割り当ては
 <ref id="bind" name="bind" >コマンドを使って変えることができます。
</p>
<sect2>
generic 
<p>
genericは本当のメニューではなく、ここではぺ-ジャーとエディタ以外のすべてのメニューで共通に使える関数(移動等)をまとめてあります。このセクションの関数のキーの割り当てを変えるとすべてのメニューに影響します。
</p>
<p>
<verb>
bottom-page               L   最後のページに行く 
current-bottom    not bound   スクリーンの最下位置エントリに移動 
current-middle    not bound   スクリーンの中央位置エントリに移動
current-top       not bound   スクリーンの最上位置エントリに移動
enter-command             :   muttrcの命令を入力 
exit                      q   このメニューから抜ける 
first-entry               =   最初のエントリに移動
half-down                  &rsqb;  ページを半分下にスクロール 
half-up                   &lsqb;   ページを半分上にスクロール 
help                       ?  このスクリーン
jump                  number   インデックス番号に飛ぶ
last-entry                 *   最後のエントリに行く 
middle-page                M   ページのまん中に行く 
next-entry                 j   次のエントリに行く 
next-line                  &gt;   一行スクロール・ダウン 
next-page                  z   次ページへ行く
previous-entry             k  前のエントリに行く 
previous-line              &lt;  一行スクロール・アップ 
previous-page              Z  前のページに行く 
refresh                   ^L  画面をクリアして描き直す 
search                     /  正規表現検索
search-next                n  次のマッチを検索 
search-opposite    not bound  逆順にパターンを検索
search-reverse         Esc /  逆順の正規表現検索 
select-entry             RET  このエントリを選ぶ 
shell-escape               !  サブシェルでコマンドを起動 
tag-entry                  t  メッセージにタグを付ける 
tag-prefix                 ;  タグ付メッセージに次の関数を適用 
top-page                   H  ページの最初に行く
</verb>
</p><sect2>
index 
<p>
<verb>
bounce-message            b   メッセージを他のユーザに再送する 
change-folder             c   別のフォルダをオープン 
change-folder-readonly &lt;Esc&gt;c リード・オンリーモードで別のフォルダを開く 
check-traditional-pgp  ESC P   古い pgp をチェックする
clear-flag                W   メッセージのステータス・フラグをクリア
collapse-all           &lt;Esc&gt;V   すべてのスレッドを collapse/uncollapse 
collapse-thread      &lt;Esc&gt;v   このスレッドを collapse/uncollapse 
copy-message              C   メッセージをファイルやメールボックスにコピー 
create-alias              a   メッセージの送信者をエイリアスに 
decode-copy          &lt;Esc&gt;C   text/plainにデコードしてコピー 
decode-save          &lt;Esc&gt;s   text/plainにデコードしてコピー、かつ削除 
delete-message            d   このエントリを削除 
delete-pattern            D   パターンにマッチしたメッセージを削除 
delete-subthread     &lt;Esc&gt;d   サブスレッドのメッセージをすべて削除
delete-thread            ^D   スレッドのメッセージをすべて削除 
display-address           @   送信者のフル・アドレスを表示する 
display-toggle-weed       h   へッダを取り除いてメッセージを表示するかどうかのトグル
display-message    &lt;Return&gt;   メッセージを表示する 
edit                       e   現在のメッセージを編集 
edit-type                 ^E   現在のメッセージの Content-Typeを編集 
exit                      x   このメニューから抜ける 
extract-keys             ^K   PGP公開鍵を取り出す
fetch-mail                G   POPサーバからメールを取ってくる 
flag-message              F  「重要な」フラグのトグル 
forget-passphrase        ^F   メモリーから PGPパスフレーズを消去
forward-message           f   コメント付でメッセージをフォワード 
group-reply               g   すべての受信者にリプライ 
limit                     l   パターンにマッチしたメッセージだけ表示 
list-reply                L   メーリング・リスト宛てにリプライ 
mail                      m   新たなメッセージ作成 
mail-key              ESC k   PGP公開鍵をメールする
next-new              &lt;Tab&gt;   次の新着メッセージへ飛ぶ 
next-subthread       &lt;Esc&gt;n   次のサブスレッドへ飛ぶ 
next-thread              ^N   次のスレッドへ飛ぶ 
next-undeleted            j   削除マークのない次のメッセージ行く 
next-unread       not bound   次の未読メッセージに移動
parent-message           P   スレッド内で親メッセージにジャンプする 
pipe-message             |   メッセージ/添付文書を shellコマンドにパイプする
previous-new     &lt;Esc&gt;&lt;Tab&gt;   前の新着メッセージへ飛ぶ 
previous-page             Z   move to the previous page 
previous-subthread   &lt;Esc&gt;p   前のサブスレッドへ飛ぶ 
previous-thread          ^P   前のスレッドへ飛ぶ 
previous-undeleted        k   削除マークのない最後のメッセージ行く 
previous-unread    not bound   前の未読のメッセージに移動
print-message             p   このエントリを印刷 
query                     Q   外部プログラムにアドレスを問い合わせる
quit                      q   変更をメールボックスにセーブ後終了 
read-subthread       &lt;Esc&gt;r   このサブスレッドを読んだことにする 
read-thread              ^R   このスレッドを読んだことにする 
recall-message            R   書きかけのメッセージを使う 
reply                     r   メッセージにリプライする 
resend-message         ESC e   MIME構造を保存したメッセージの再送 
save-message              s   メッセージや添付文書をファイルにセーブ 
set-flag                  w   メッセージのステータス・フラグをセット 
show-limit           &lt;Esc&gt;l   active limit pattern の現在の値を表示 
show-version              V   Muttのバージョンと日付を表示 
sort-mailbox              o   メッセージをソートする 
sort-reverse              O   メッセージを逆順にソートする 
sync-mailbox              &dollar;   変更をメールボックスにセーブ 
tag-pattern               T   パターンにマッチしたメッセージにタグを付ける 
tag-thread            &lt;Esc&gt;t   このスレッドにタグを付ける 
toggle-new                  N   メッセージの「新着」フラグをトグル
toggle-write               &percnt;   メールボックスを書き戻すかどうかトグル 
undelete-message           u   エントリの削除マークを取る 
undelete-pattern           U   patternにマッチしたmessageの削除マークを取る 
undelete-subthread    &lt;Esc&gt;u   サブスレッドの削除マークをすべて取る 
undelete-thread           ^U   スレッドの削除マークをすべて取る 
untag-pattern             ^T   パターンにマッチしたメッセージのタグを取る 
view-attachments           v   MIMEの添付文書を表示
</verb>
</p><sect2>
pager 
<p>
<verb>
bottom                 not bound   メッセージの最後に飛ぶ 
bounce-message            b   メッセージを他のユーザに再送する 
change-folder             c   別のフォルダをオープン 
change-folder-readonly &lt;Esc&gt;c リード・オンリーモードで別のフォルダを開く 
check-traditional-pgp  ESC P   古い pgp をチェックする
copy-message              C   メッセージをファイルやメールボックスにコピ ー
create-alias              a   メッセージの送信者をエイリアスに加える
decode-copy          &lt;Esc&gt;C   text/plainにデコードしてコピー 
decode-save         &lt;Esc&gt;s   text/plainにデコードしてコピー、かつ削除 
delete-message            d   このエントリを削除 
delete-subthread     &lt;Esc&gt;d   サブスレッドのメッセージをすべて削除 
delete-thread            ^D   スレッドのメッセージをすべて削除
display-address           @   送信者のフル・アドレスを表示する 
display-toggle-weed       h   へッダを取り除いてメッセージを表示するかどうかのトグル
edit                      e   このメッセージを再送信のため編集 
edit-type                ^E   現在のメッセージの Content-Typeを編集 
enter-command             :   muttrcの命令を入力 
exit                      i   メインメニューに戻る 
extract-keys             ^K   PGP公開鍵を取り出す
flag-message              F   「重要な」フラグのトグル 
forget-passphrase        ^F   メモリーから PGPパスフレーズを消去する
forward-message           f   コメント付でメッセージをフォワード 
group-reply               g   すべての受信者にリプライ 
half-down         not bound   ページを半分下にスクロール 
half-up           not bound   ページを半分上にスクロール 
help                      ?   このスクリーン 
list-reply                L   メーリング・リスト宛てにリプライ
mail                      m   新たなメッセージ作成 
mail-key              ESC k   PGP公開鍵をメールする
mark-as-new               N   メッセージの「新着」フラグをトグル 
next-entry                J   次のエントリに行く 
next-line          &lt;Return&gt;   一行スクロール・ダウン 
next-new              &lt;Tab&gt;   次の新着メッセージへ飛ぶ 
next-page           &lt;Space&gt;   次ページへ行く 
next-subthread       &lt;Esc&gt;n   次のサブスレッドへ飛ぶ 
next-thread              ^N   次のスレッドへ飛ぶ 
next-undeleted            j   削除マークのない次のメッセージ行く 
next-unread       not bound   次の未読メッセージへ飛ぶ
parent-message           P   スレッド内で親メッセージにジャンプする 
pipe-message              |   メッセージ/添付文書をpipeでshellコマンドに 
previous-entry            K   前のエントリに行く 
previous-line   &lt;BackSpace&gt;   一行スクロール・アップ 
previous-new      not bound   前の新着メッセージへ飛ぶ 
previous-page             -   前のページに行く 
previous-subthread   &lt;Esc&gt;p   前のサブスレッドへ飛ぶ 
previous-thread          ^P   前のスレッドへ飛ぶ 
previous-undeleted        k   削除マークのない最後のメッセージ行く 
previous-unread   not bound   前の未読メッセージへ飛ぶ
print-message             p   このエントリを印刷 
quit                      Q   変更をメールボックスにセーブ後終了 
read-subthread       &lt;Esc&gt;r   このサブスレッドを読んだことにする 
read-thread              ^R   このスレッドを読んだことにする 
recall-message            R   書きかけのメッセージを使う 
redraw-screen            ^L   画面をクリアして描き直す 
reply                     r   メッセージにリプライする 
save-message              s   メッセージや添付文書をファイルにセーブ 
search                    /   正規表現検索 
search-next               n   次のマッチを検索 
search-opposite   not bound   逆順にパターンを検索 
search-reverse       &lt;Esc&gt;/   逆順の正規表現検索 
search-toggle             &bsol;   検索パターンの色をトグル
shell-escape              !   サブシェルでコマンドを起動 
show-version              V   Muttのバージョンと日付を表示 
skip-quoted               S   引用部テキストをスキップ 
sync-mailbox              &dollar;   メールボックスへの変更を保存 
tag-message               t   メッセージにタグを付ける 
toggle-quoted             T   引用部を表示する/しないのトグル 
top                       ^   メッセージの最初に飛ぶ 
undelete-message          u   エントリの削除マークを取る 
undelete-subthread   &lt;Esc&gt;u   サブスレッドの削除マークをすべて取る 
undelete-thread          ^U   スレッドの削除マークをすべて取る 
view-attachments          v   MIMEの添付文書を表示
</verb>
</p><sect2>
alias 
<p>
<verb>
search                     /   正規表現による検索
search-next                n   次を検索
search-reverse         ESC /   逆方向に正規表現で検索

</verb>
</p><sect2>
query 
<p>
<verb>
create-alias               a   メッセージの送り主からエイリアスを作成 
mail                       m   新しいメッセージを作成
query                      Q   外部プログラムを使ってのアドレスの問い合わせ
query-append               A   今の結果に新しい問い合わせの結果を付け加える
search                     /   正規表現による検索
search-next                n   次を検索
search-opposite    not bound   逆方向に次の検索
search-reverse         ESC /   逆方向に正規表現で検索

</verb>
</p><sect2>
attach 
<p>
<verb>
bounce-message             b   他のユーザーにメッセージを再送する
collapse-parts             v   サブパートの表示のトグル
delete-entry               d    今いる項目を削除する
display-toggle-weed       h   へッダを取り除いてメッセージを表示するかどうかのトグル
edit-type                ^E   現在のメッセージの Content-Typeを編集 
extract-keys              ^K    PGP公開鍵を取り出す
forward-message            f   コメントをつけてメッセージをフォワード
group-reply                g   すべての受信者にリプライ
list-reply                 L   メーリング・リスト宛てにリプライ
pipe-entry                 |   メッセージ/添付文書をpipeでshellコマンドにわたす
print-entry                p   この項目を印刷
reply                      r   メッセージにリプライする
resend-message         ESC e   MIME構造を保存したメッセージの再送 
save-entry                 s   メッセージ/添付文章をファイルに保存
undelete-entry             u   項目の削除マークをとる
view-attach              RET   必要なら mailcapエントリを使って添付ファイルを表示
view-mailcap               m   強制的にmailcapを使って添付文書を読む
view-text                  T    添付文書をテキストとして読む 
</verb>
</p><sect2>
compose 
<p>
<verb>
attach-file                a   このメッセージにファイルを添付する 
attach-message             A   このメッセージにメッセージを添付する 
attach-key             ESC k   PGP公開鍵を添付 
copy-file                  C   メッセージや添付文書をファイルにセーブ 
detach-file                D   このエントリを削除 
display-toggle-weed       h   へッダを取り除いてメッセージを表示するかどうかのトグル
edit-bcc                   b   BCCリストを編集する 
edit-cc                    c   CCリストを編集する 
edit-description           d   この添付文書の内容説明文を編集 
edit-encoding            ^E   添付文書のcontent-trasfer-encodingを編集 
edit-fcc                  f   メッセージをセーブするファイル名を入力 
edit-file               ^Xe   添付するファイルを編集する 
edit-from            &lt;Esc&gt;f   fromフィールドを編集する 
edit-headers              E   メッセージをヘッダとともに編集する
edit                      e   メッセージを編集する 
edit-mime                 m  添付文書をmailcapエントリを使って編集する 
edit-reply-to             r   Reply-Toフィールドを編集する 
edit-subject              s   メッセージのサブジェクトを編集 
edit-to                   t   TOリストを編集する 
edit-type                ^T  添付文書の attachment type を編集 
filter-entry             F   shell のコマンドを使って添付文書を filterに 
forget-passphrase         ^F   メモリから PGPパスフレーズを消去
ispell                     i   メッセージに ispellを実行する 
new-mime                   n   mailcapエントリを使って添付文書を作成する 
pgp-menu                   p   PGPのオプションを表示
pipe-entry                 |   メッセージ/添付文書をpipeでshellコマンドに 
postpone-message           P   このメッセージ「書きかけ」にする 
print-entry                l   このエントリを印刷 
rename-file                R   添付文書をリネーム(移動)する 
send-message               y   メッセージ送信 
tag-entry                  T   メッセージにタグを付ける 
toggle-unlink              u   送信した後ファイルを消すかどうかのトグル 
view-attach         &lt;Return&gt;   必要ならmailcapエントリを使って添付を表示 
write-fcc                  w   フォルダにメッセージを書く 
</verb>
</p><sect2>
postpone 
<p>
<verb>
delete-entry               d   この項目を削除
undelete-entry             u   この項目の削除マークを消す 
</verb>
</p><sect2>
browser 
<p>
<verb>
change-dir                 c   ディレクトリを変更する 
check-new                TAB  新着メールのあるメールボックスをチェックする
enter-mask                 m   ファイル・マスクを入力 
search                     /   正規表現による検索
search-next                n   次を検索
search-reverse         ESC /   正規表現による反対方向の検索
select-new                N   このディレクトリ中の新しいファイルを選択する 
sort                       o   メッセージをソートする 
sort-reverse               O   メッセージを逆順にソートする 
toggle-mailboxes         TAB   メールボックスを見るか、すべてのファイルを見るかのトグルスイッチ
view-file              SPACE   ファイルを見る
subscribe               s いまいる メールボックスを購読(subscribe)する(IMAPのみ) 
unsubscribe                u   いまいるメールボックスを購読からはずす。(unsubscribe)(IMAPのみ) 
toggle-subscribed          T   toggle view all/subscribed mailboxes (IMAP Only)
toggle-subscribed          T   すべてのメールボックスを見るか購読しているもののみ見るかのトグルスイッチ (IMAPのみ)
</verb>
</p><sect2>
pgp 
<p>
<verb>
view-name                  &percnt;   鍵のユーザ IDを見る
verify-key                 c   PGP公開鍵の確認

</verb>
</p><sect2>
editor 
<p>
<verb>
backspace          BackSpace   カーソルの前の文字を消去
backward-char             ^B   カーソルを一文字左に移動
backward-word          ESC b   前の単語にカーソルを移動
bol                       ^A   行頭へジャンプ
buffy-cycle          Space    新着メールのメールボックスの間をまわる。
capitalize-word        ESC c   単語の先頭の文字を大文字にする
complete                 TAB   ファイル名またはエイリアスを補完
complete-query            ^T   問い合わせを使ってアドレスを補完
delete-char               ^D   カーソルの下の文字を消去
downcase-word         ESC l   カーソルのある単語のすべての文字を小文字にする
eol                       ^E   行末にジャンプ
forward-char              ^F   カーソルを一文字右の移動
forward-word           ESC F  カーソルを次の単語へ移動
history-down       not bound   ヒストリリストをスクロールダウン
history-up         not bound   ヒストリリストをスクロールアップ
kill-eol                  ^K   カーソルから行末までの文字を消去
kill-eow               ESC d   カーソルから単語の最後までの文字を削除
kill-line                 ^U   一行すべての文字を消去
kill-word                 ^W   カーソルの前の単語を消去
quote-char                ^V   次にタイプするキーを引用
transpose-chars    not bound   カーソルの下の文字を以前のものと置き換える
upcase-word             ESC u  カーソルのある単語のすべての文字を大文字にする
</verb>
</p><sect>
Miscellany 
<sect1>
Acknowledgements 
<p>
Kari Hurtta <htmlurl url="mailto:kari.hurtta@fmi.fi" name="<kari.hurtta@fmi.fi>">co-developed the original MIME parsing code back
 in the ELM-ME days. 
</p>
<p>
The following people have been very helpful to the development
 of Mutt: 
</p>
<p>
Vikas Agnihotri <htmlurl url="mailto:vikasa@writeme.com" name="<vikasa@writeme.com>">, Francois Berjon <htmlurl url="mailto:Francois.Berjon@aar.alcatel-alsthom.fr" name="<Francois.Berjon@aar.alcatel-alsthom.fr>">, Aric Blumer <htmlurl url="mailto:aric@fore.com" name="<aric@fore.com>">, John Capo <htmlurl url="mailto:jc@irbs.com" name="<jc@irbs.com>">,
 David Champion <htmlurl url="mailto:dgc@uchicago.edu" name="<dgc@uchicago.edu>">, Brendan Cully <htmlurl url="mailto:brendan@kublai.com" name="<brendan@kublai.com>">, Liviu Daia <htmlurl url="mailto:daia@stoilow.imar.ro" name="<daia@stoilow.imar.ro>">, Thomas E. Dickey <htmlurl url="mailto:dickey@herndon4.his.com" name="<dickey@herndon4.his.com>">,
 David DeSimone <htmlurl url="mailto:fox@convex.hp.com" name="<fox@convex.hp.com>">, Nickolay N. Dudorov <htmlurl url="mailto:nnd@wint.itfs.nsk.su" name="<nnd@wint.itfs.nsk.su>">, Ruslan Ermilov <htmlurl url="mailto:ru@freebsd.org" name="<ru@freebsd.org>">, Edmund Grimley
 Evans <htmlurl url="mailto:edmundo@rano.org" name="<edmundo@rano.org>">, Michael Finken <htmlurl url="mailto:finken@conware.de" name="<finken@conware.de>">, Sven Guckes <htmlurl url="mailto:guckes@math.fu-berlin.de" name="<guckes@math.fu-berlin.de>">, Lars Hecking <htmlurl url="mailto:lhecking@nmrc.ie" name="<lhecking@nmrc.ie>">, Mark Holloman
 <htmlurl url="mailto:holloman@nando.net" name="<holloman@nando.net>">, Andreas Holzmann <htmlurl url="mailto:holzmann@fmi.uni-passau.de" name="<holzmann@fmi.uni-passau.de>">, Marco d'Itri <htmlurl url="mailto:md@linux.it" name="<md@linux.it>">, Byrial Jensen<htmlurl url="mailto:byrial@image.dk" name="<byrial@image.dk>">, Byrial Jensen
 <htmlurl url="mailto:byrial@image.dk" name="<byrial@image.dk>">, David Jeske <htmlurl url="mailto:jeske@igcom.net" name="<jeske@igcom.net>">, Christophe Kalt <htmlurl url="mailto:kalt@hugo.int-evry.fr" name="<kalt@hugo.int-evry.fr>">, Tommi Komulainen <htmlurl url="mailto:Tommi.Komulainen@iki.fi" name="<Tommi.Komulainen@iki.fi>">, Felix von Leitner
 (a.k.a ``Fefe'') <htmlurl url="mailto:leitner@math.fu-berlin.de" name="<leitner@math.fu-berlin.de>">, Brandon Long <htmlurl url="mailto:blong@fiction.net" name="<blong@fiction.net>">, <htmlurl url="mailto:jmy@flashback.net" name="<jmy@flashback.net>">, Lars Marowsky-Bree <htmlurl url="mailto:lmb@pointer.in-minden.de" name="<lmb@pointer.in-minden.de>">, Thomas ``Mike''
 Michlmayr <htmlurl url="mailto:mike@cosy.sbg.ac.at" name="<mike@cosy.sbg.ac.at>">, Andrew W. Nosenko <htmlurl url="mailto:awn@bcs.zp.ua" name="<awn@bcs.zp.ua>">, David O'Brien <htmlurl url="mailto:obrien@Nuxi.cs.ucdavis.edu" name="<obrien@Nuxi.cs.ucdavis.edu>">, Clint Olsen <htmlurl url="mailto:olsenc@ichips.intel.com" name="<olsenc@ichips.intel.com>">, Park
 Myeong Seok <htmlurl url="mailto:pms@romance.kaist.ac.kr" name="<pms@romance.kaist.ac.kr>">, Thomas Parmelan <htmlurl url="mailto:tom@ankh.fr.eu.org" name="<tom@ankh.fr.eu.org>">, Ollivier Robert <htmlurl url="mailto:roberto@keltia.freenix.fr" name="<roberto@keltia.freenix.fr>">, Thomas Roessler
 <htmlurl url="mailto:roessler@does-not-exist.org" name="<roessler@does-not-exist.org>">, Roland Rosenfeld <htmlurl url="roland@spinnaker.de" name="<roland@spinnaker.de>">, TAKIZAWA Takashi <htmlurl url="taki@luna.email.ne.jp" name="<taki@luna.email.ne.jp>">, Allain Thivillon <htmlurl url="mailto:Allain.Thivillon@alma.fr" name="<Allain.Thivillon@alma.fr>">, Gero Treuner
 <htmlurl url="mailto:gero@faveve.uni-stuttgart.de" name="<gero@faveve.uni-stuttgart.de>">, Vsevolod Volkov <htmlurl url="mailto:vvv@lucky.net" name="<vvv@lucky.net>">, Ken Weinert <htmlurl url="mailto:kenw@ihs.com" name="<kenw@ihs.com>">
</p>
<sect1>
この文章について
<p>
この文章は SGMLで書かれ、それを <htmlurl url="http://www.sgmltools.org/" name="sgml-tools">パッケージを使って翻訳しています。
</p>


</article>
