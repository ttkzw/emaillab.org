diff -uNr mutt-1.5.14.orig/Makefile.am mutt-1.5.14/Makefile.am
--- mutt-1.5.14.orig/Makefile.am	2006-09-09 00:40:06.000000000 +0900
+++ mutt-1.5.14/Makefile.am	2007-03-04 13:11:37.000000000 +0900
@@ -28,7 +28,7 @@
 	rfc822.c rfc1524.c rfc2047.c rfc2231.c \
 	score.c send.c sendlib.c signal.c sort.c \
 	status.c system.c thread.c charset.c history.c lib.c \
-	muttlib.c editmsg.c mbyte.c \
+	muttlib.c editmsg.c mbyte.c wcwidth.c \
 	url.c ascii.c mutt_idna.c crypt-mod.c crypt-mod.h
 
 mutt_LDADD = @MUTT_LIB_OBJECTS@ @LIBOBJS@ $(LIBIMAP) $(MUTTLIBS) \
diff -uNr mutt-1.5.14.orig/PATCHES mutt-1.5.14/PATCHES
--- mutt-1.5.14.orig/PATCHES	2006-10-30 11:30:55.000000000 +0900
+++ mutt-1.5.14/PATCHES	2007-03-04 13:11:37.000000000 +0900
@@ -0,0 +1 @@
+patch-1.5.14.tt.wcwidth.1
diff -uNr mutt-1.5.14.orig/configure.in mutt-1.5.14/configure.in
--- mutt-1.5.14.orig/configure.in	2006-09-01 16:00:18.000000000 +0900
+++ mutt-1.5.14/configure.in	2007-03-04 13:11:37.000000000 +0900
@@ -1112,7 +1112,7 @@
 if test $wc_funcs = yes; then
         AC_DEFINE(HAVE_WC_FUNCS,1,[ Define if you are using the system's wchar_t functions. ])
 else
-	MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS utf8.o wcwidth.o"
+	MUTT_LIB_OBJECTS="$MUTT_LIB_OBJECTS utf8.o"
 fi
 
 AC_CACHE_CHECK([for nl_langinfo and CODESET], mutt_cv_langinfo_codeset,
diff -uNr mutt-1.5.14.orig/curs_lib.c mutt-1.5.14/curs_lib.c
--- mutt-1.5.14.orig/curs_lib.c	2006-12-08 07:40:19.000000000 +0900
+++ mutt-1.5.14/curs_lib.c	2007-03-04 13:11:37.000000000 +0900
@@ -40,6 +40,8 @@
 #include <langinfo.h>
 #endif
 
+extern const char *TreeUTF8Chars[];
+
 /* not possible to unget more than one char under some curses libs, and it
  * is impossible to unget function keys in SLang, so roll our own input
  * buffering routines.
@@ -664,7 +666,12 @@
       wc = replacement_char ();
     }
     if (arboreal && wc < M_TREE_MAX)
-      w = 1; /* hack */
+    {
+      if (Charset_is_utf8)
+        w = mutt_strwidth ((char *)TreeUTF8Chars[wc]);
+      else
+        w = 1;
+    }
     else
     {
       if (!IsWPrint (wc))
@@ -794,7 +801,7 @@
  * refering to the number of characters cells.
  */
 
-int mutt_strwidth (const char *s)
+int _mutt_strwidth (const char *s, int arboreal)
 {
   wchar_t wc;
   int w;
@@ -813,9 +820,29 @@
       k = (k == (size_t)(-1)) ? 1 : n;
       wc = replacement_char ();
     }
-    if (!IsWPrint (wc))
-      wc = '?';
-    w += wcwidth (wc);
+    if (arboreal && wc < M_TREE_MAX)
+    {
+      if (Charset_is_utf8)
+        w += mutt_strwidth ((char *)TreeUTF8Chars[wc]);
+      else
+        w++;
+    }
+    else {
+      if (!IsWPrint (wc))
+        wc = '?';
+      w += wcwidth (wc);
+    }
   }
   return w;
 }
+
+int mutt_strwidth (const char *s)
+{
+  return _mutt_strwidth (s, 0);
+}
+
+int mutt_strwidth_tree (const char *s)
+{
+  return _mutt_strwidth (s, 1);
+}
+
diff -uNr mutt-1.5.14.orig/init.h mutt-1.5.14/init.h
--- mutt-1.5.14.orig/init.h	2006-11-21 02:49:08.000000000 +0900
+++ mutt-1.5.14/init.h	2007-03-04 13:11:37.000000000 +0900
@@ -336,6 +336,18 @@
   ** \fIcheck_new\fP is \fIunset\fP, no check for new mail is performed
   ** while the mailbox is open.
   */
+  { "cjk_width",	DT_BOOL, R_NONE, OPTCJKWIDTH, 0 },
+  /*
+  ** .pp
+  ** When this option is set, characters in the East Asian Ambiguous (A)
+  ** category as defined in Unicode Technical Report #11 have a column 
+  ** width of 2. Othrwise, they have a column width of 1.
+  ** This variant might be useful for users of CJK legacy encodings 
+  ** who want to migrate to UCS without changing the traditional terminal
+  ** character-width behaviour.
+  ** .pp
+  ** \fBNote:\fP this option only affects in UTF-8 encoding.
+  */
   { "collapse_unread",	DT_BOOL, R_NONE, OPTCOLLAPSEUNREAD, 1 },
   /*
   ** .pp
diff -uNr mutt-1.5.14.orig/mbyte.c mutt-1.5.14/mbyte.c
--- mutt-1.5.14.orig/mbyte.c	2006-07-18 10:19:27.000000000 +0900
+++ mutt-1.5.14/mbyte.c	2007-03-04 13:13:03.000000000 +0900
@@ -17,7 +17,7 @@
  */
 
 /*
- * Japanese support by TAKIZAWA Takashi <taki@luna.email.ne.jp>.
+ * CJK support by TAKIZAWA Takashi <taki@luna.email.ne.jp>.
  */
 
 #if HAVE_CONFIG_H
@@ -37,8 +37,8 @@
 #endif
 
 int Charset_is_utf8 = 0;
+static int charset_is_cjk = 0;
 #ifndef HAVE_WC_FUNCS
-static int charset_is_ja = 0;
 static iconv_t charset_to_utf8 = (iconv_t)(-1);
 static iconv_t charset_from_utf8 = (iconv_t)(-1);
 #endif
@@ -50,8 +50,8 @@
   mutt_canonical_charset (buffer, sizeof (buffer), charset);
 
   Charset_is_utf8 = 0;
+  charset_is_cjk = 0;
 #ifndef HAVE_WC_FUNCS
-  charset_is_ja = 0;
   if (charset_to_utf8 != (iconv_t)(-1))
   {
     iconv_close (charset_to_utf8);
@@ -64,33 +64,79 @@
   }
 #endif
 
-  if (!strcmp(buffer, "utf-8"))
+  if (!ascii_strcasecmp(buffer, "utf-8"))
     Charset_is_utf8 = 1;
-#ifndef HAVE_WC_FUNCS
-  else if (!ascii_strcasecmp(buffer, "euc-jp") || !ascii_strcasecmp(buffer, "shift_jis")
-  	|| !ascii_strcasecmp(buffer, "cp932") || !ascii_strcasecmp(buffer, "eucJP-ms"))
+  else if (!ascii_strcasecmp(buffer, "gb2312") || 
+	!ascii_strcasecmp(buffer, "gb18030") || 
+	!ascii_strcasecmp(buffer, "big5") || 
+	!ascii_strcasecmp(buffer, "euc-tw") || 
+	!ascii_strcasecmp(buffer, "EUC-JP") || 
+	!ascii_strcasecmp(buffer, "eucJP-ms") ||
+	!ascii_strcasecmp(buffer, "Shift_JIS") ||
+	!ascii_strcasecmp(buffer, "cp932") ||
+	!ascii_strcasecmp(buffer, "euc-kr"))
   {
-    charset_is_ja = 1;
+    charset_is_cjk = 1;
+#ifndef HAVE_WC_FUNCS
     charset_to_utf8 = iconv_open ("UTF-8", charset);
     charset_from_utf8 = iconv_open (charset, "UTF-8");
-  }
 #endif
+  }
 
 #ifdef HAVE_BIND_TEXTDOMAIN_CODESET
   bind_textdomain_codeset(PACKAGE, buffer);
 #endif
 }
 
+/*
+ * For systems that don't have wcwidth() which functions correctly, 
+ * we provide our own wcwidth().
+ * Furthermore, this wcwidth() enables change of character-cell width of
+ * the East Asian Ambiguous class by using $cjk_width.
+ * The function which most systems have cannot do it.
+ * Please read the comment of wcwidth.c about the East Asian Ambiguous 
+ * class for details.
+ */
+int wcwidth_ucs(wchar_t ucs);
+int wcwidth_cjk(wchar_t ucs);
+
+int wcwidth (wchar_t wc)
+{
+  if (!Charset_is_utf8)
+  {
+    if (!charset_is_cjk)
+    {
+      /* 8-bit case */
+      if (!wc)
+        return 0;
+      else if ((0 <= wc && wc < 256) && IsPrint (wc))
+        return 1;
+      else
+        return -1;
+    }
+    else
+    {
+      /* CJK */
+      return wcwidth_cjk (wc);
+    }
+  }
+  else {
+    if (option (OPTCJKWIDTH))
+      return wcwidth_cjk (wc);
+    return wcwidth_ucs (wc);
+  }
+}
+
 #ifndef HAVE_WC_FUNCS
 
 /*
  * For systems that don't have them, we provide here our own
- * implementations of wcrtomb(), mbrtowc(), iswprint() and wcwidth().
+ * implementations of wcrtomb(), mbrtowc() and iswprint().
  * Instead of using the locale, as these functions normally would,
  * we use Mutt's Charset variable. We support 3 types of charset:
  * (1) For 8-bit charsets, wchar_t uses the same encoding as char.
  * (2) For UTF-8, wchar_t uses UCS.
- * (3) For stateless Japanese encodings, we use UCS and convert
+ * (3) For stateless CJK encodings, we use UCS and convert
  *     via UTF-8 using iconv.
  * Unfortunately, we can't handle non-stateless encodings.
  */
@@ -249,7 +295,7 @@
 
 int iswprint (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return ((0x20 <= wc && wc < 0x7f) || 0xa0 <= wc);
   else
     return (0 <= wc && wc < 256) ? IsPrint (wc) : 0;
@@ -257,7 +303,7 @@
 
 int iswspace (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return (9 <= wc && wc <= 13) || wc == 32;
   else
     return (0 <= wc && wc < 256) ? isspace (wc) : 0;
@@ -308,7 +354,7 @@
 
 wint_t towupper (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return towupper_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? toupper (wc) : wc;
@@ -316,7 +362,7 @@
 
 wint_t towlower (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return towlower_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? tolower (wc) : wc;
@@ -324,57 +370,12 @@
 
 int iswalnum (wint_t wc)
 {
-  if (Charset_is_utf8 || charset_is_ja)
+  if (Charset_is_utf8 || charset_is_cjk)
     return iswalnum_ucs (wc);
   else
     return (0 <= wc && wc < 256) ? isalnum (wc) : 0;
 }
 
-/*
- * l10n for Japanese:
- *   Symbols, Greek and Cyrillic in JIS X 0208, Japanese Kanji
- *   Character Set, have a column width of 2.
- */
-int wcwidth_ja (wchar_t ucs)
-{
-  if (ucs >= 0x3021)
-    return -1; /* continue with the normal check */
-  /* a rough range for quick check */
-  if ((ucs >= 0x00a1 && ucs <= 0x00fe) || /* Latin-1 Supplement */
-      (ucs >= 0x0391 && ucs <= 0x0451) || /* Greek and Cyrillic */
-      (ucs >= 0x2010 && ucs <= 0x266f) || /* Symbols */
-      (ucs >= 0x3000 && ucs <= 0x3020))   /* CJK Symbols and Punctuation */
-    return 2;
-  else
-    return -1;
-}
-
-int wcwidth_ucs(wchar_t ucs);
-
-int wcwidth (wchar_t wc)
-{
-  if (!Charset_is_utf8)
-  {
-    if (!charset_is_ja)
-    {
-      /* 8-bit case */
-      if (!wc)
-	return 0;
-      else if ((0 <= wc && wc < 256) && IsPrint (wc))
-	return 1;
-      else
-	return -1;
-    }
-    else
-    {
-      /* Japanese */
-      int k = wcwidth_ja (wc);
-      if (k != -1)
-	return k;
-    }
-  }
-  return wcwidth_ucs (wc);
-}
 
 size_t utf8rtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *_ps)
 {
diff -uNr mutt-1.5.14.orig/mbyte.h mutt-1.5.14/mbyte.h
--- mutt-1.5.14.orig/mbyte.h	2005-09-18 05:14:35.000000000 +0900
+++ mutt-1.5.14/mbyte.h	2007-03-04 13:11:37.000000000 +0900
@@ -18,10 +18,9 @@
 int iswalnum (wint_t wc);
 wint_t towupper (wint_t wc);
 wint_t towlower (wint_t wc);
-int wcwidth (wchar_t wc);
 # endif /* !HAVE_WC_FUNCS */
 
-
+int wcwidth (wchar_t wc);
 void mutt_set_charset (char *charset);
 extern int Charset_is_utf8;
 size_t utf8rtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *_ps);
diff -uNr mutt-1.5.14.orig/menu.c mutt-1.5.14/menu.c
--- mutt-1.5.14.orig/menu.c	2007-01-31 04:49:02.000000000 +0900
+++ mutt-1.5.14/menu.c	2007-03-04 13:11:37.000000000 +0900
@@ -36,6 +36,42 @@
 
 extern size_t UngetCount;
 
+static const char TreeAsciiChars[] =
+{
+  0,   /* not used */
+  '`', /* M_TREE_LLCORNER */
+  ',', /* M_TREE_ULCORNER */
+  '|', /* M_TREE_LTEE */
+  '-', /* M_TREE_HLINE */
+  '|', /* M_TREE_VLINE */
+  ' ', /* M_TREE_SPACE */
+  '>', /* M_TREE_RARROW */
+  '*', /* M_TREE_STAR  fake thread indicator */
+  '&', /* M_TREE_HIDDEN */
+  '=', /* M_TREE_EQUALS */
+  '-', /* M_TREE_TTEE */
+  '-', /* M_TREE_BTEE */
+  '?'  /* M_TREE_MISSING */
+};
+
+const char *TreeUTF8Chars[] =
+{
+  "",             /* not used */
+  "\342\224\224", /* M_TREE_LLCORNER  WACS_LLCORNER */
+  "\342\224\214", /* M_TREE_ULCORNER  WACS_ULCORNER */
+  "\342\224\234", /* M_TREE_LTEE      WACS_LTEE */
+  "\342\224\200", /* M_TREE_HLINE     WACS_HLINE */
+  "\342\224\202", /* M_TREE_VLINE     WACS_VLINE */
+  " ",            /* M_TREE_SPACE */
+  ">",            /* M_TREE_RARROW */
+  "*",            /* M_TREE_STAR  fake thread indicator */
+  "&",            /* M_TREE_HIDDEN */
+  "=",            /* M_TREE_EQUALS */
+  "\342\224\254", /* M_TREE_TTEE      WACS_TTEE */
+  "\342\224\264", /* M_TREE_BTEE      WACS_BTEE */
+  '?'             /* M_TREE_MISSING */
+};
+
 static void print_enriched_string (int attr, unsigned char *s, int do_color)
 {
   wchar_t wc;
@@ -50,84 +86,47 @@
     {
       if (do_color)
 	SETCOLOR (MT_COLOR_TREE);
-      while (*s && *s < M_TREE_MAX)
-      {
-	switch (*s)
+      if (option (OPTASCIICHARS))
+	while (*s && *s < M_TREE_MAX)
 	{
-	  case M_TREE_LLCORNER:
-	    if (option (OPTASCIICHARS))
-	      addch ('`');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\224"); /* WACS_LLCORNER */
-	    else
-	      addch (ACS_LLCORNER);
-	    break;
-	  case M_TREE_ULCORNER:
-	    if (option (OPTASCIICHARS))
-	      addch (',');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\214"); /* WACS_ULCORNER */
-	    else
-	      addch (ACS_ULCORNER);
-	    break;
-	  case M_TREE_LTEE:
-	    if (option (OPTASCIICHARS))
-	      addch ('|');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\234"); /* WACS_LTEE */
-	    else
-	      addch (ACS_LTEE);
-	    break;
-	  case M_TREE_HLINE:
-	    if (option (OPTASCIICHARS))
-	      addch ('-');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\200"); /* WACS_HLINE */
-	    else
-	      addch (ACS_HLINE);
-	    break;
-	  case M_TREE_VLINE:
-	    if (option (OPTASCIICHARS))
-	      addch ('|');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\202"); /* WACS_VLINE */
-	    else
-	      addch (ACS_VLINE);
-	    break;
-	  case M_TREE_TTEE:
-	    if (option (OPTASCIICHARS))
-	      addch ('-');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\254"); /* WACS_TTEE */
-	    else
-	      addch (ACS_TTEE);
-	    break;
-	  case M_TREE_BTEE:
-	    if (option (OPTASCIICHARS))
-	      addch ('-');
-	    else if (Charset_is_utf8)
-	      addstr ("\342\224\264"); /* WACS_BTEE */
-	    else
-	      addch (ACS_BTEE);
-	    break;
-	  case M_TREE_SPACE:
-	    addch (' ');
-	    break;
-	  case M_TREE_RARROW:
-	    addch ('>');
-	    break;
-	  case M_TREE_STAR:
-	    addch ('*'); /* fake thread indicator */
-	    break;
-	  case M_TREE_HIDDEN:
-	    addch ('&');
-	    break;
-	  case M_TREE_EQUALS:
-	    addch ('=');
-	    break;
-	  case M_TREE_MISSING:
-	    addch ('?');
-	    break;
+	  addch (TreeAsciiChars[(int)*s]);
+	  s++, n--;
+	}
+      else if (Charset_is_utf8)
+	while (*s && *s < M_TREE_MAX)
+	{
+	  addstr ((char *)TreeUTF8Chars[(int)*s]);
+	  s++, n--;
+	}
+      else
+	while (*s && *s < M_TREE_MAX)
+	{
+	  switch (*s)
+	  {
+	    case M_TREE_LLCORNER:
+	        addch (ACS_LLCORNER);
+	      break;
+	    case M_TREE_ULCORNER:
+	        addch (ACS_ULCORNER);
+	      break;
+	    case M_TREE_LTEE:
+	        addch (ACS_LTEE);
+	      break;
+	    case M_TREE_HLINE:
+	        addch (ACS_HLINE);
+	      break;
+	    case M_TREE_VLINE:
+	        addch (ACS_VLINE);
+	      break;
+	    case M_TREE_TTEE:
+	        addch (ACS_TTEE);
+	      break;
+	    case M_TREE_BTEE:
+	        addch (ACS_BTEE);
+	      break;
+	    default:
+	      addch (TreeAsciiChars[(int)*s]);
+	      break;
 	}
 	s++, n--;
       }
@@ -136,7 +135,7 @@
     else if ((k = mbrtowc (&wc, (char *)s, n, &mbstate)) > 0)
     {
       addnstr ((char *)s, k);
-      s += k, n-= k;
+      s += k, n -= k;
     }
     else
       break;
diff -uNr mutt-1.5.14.orig/mutt.h mutt-1.5.14/mutt.h
--- mutt-1.5.14.orig/mutt.h	2007-01-31 04:49:02.000000000 +0900
+++ mutt-1.5.14/mutt.h	2007-03-04 13:11:37.000000000 +0900
@@ -339,6 +339,7 @@
   OPTBOUNCEDELIVERED,
   OPTBRAILLEFRIENDLY,
   OPTCHECKNEW,
+  OPTCJKWIDTH,
   OPTCOLLAPSEUNREAD,
   OPTCONFIRMAPPEND,
   OPTCONFIRMCREATE,
diff -uNr mutt-1.5.14.orig/muttlib.c mutt-1.5.14/muttlib.c
--- mutt-1.5.14.orig/muttlib.c	2007-01-31 04:49:02.000000000 +0900
+++ mutt-1.5.14/muttlib.c	2007-03-04 13:11:37.000000000 +0900
@@ -1088,7 +1088,7 @@
 	  count -= col; /* how many columns left on this line */
 	  mutt_FormatString (buf, sizeof (buf), src, callback, data, flags);
 	  len = mutt_strlen (buf);
-	  wid = mutt_strwidth (buf);
+	  wid = mutt_strwidth_tree (buf);
 	  if (count > wid)
 	  {
 	    count -= wid; /* how many chars to pad */
@@ -1102,7 +1102,7 @@
 	  memcpy (wptr, buf, len);
 	  wptr += len;
 	  wlen += len;
-	  col += mutt_strwidth (buf);
+	  col += mutt_strwidth_tree (buf);
 	}
 	break; /* skip rest of input */
       }
@@ -1154,7 +1154,7 @@
 	memcpy (wptr, buf, len);
 	wptr += len;
 	wlen += len;
-	col += mutt_strwidth (buf);
+	col += mutt_strwidth_tree (buf);
       }
     }
     else if (*src == '\\')
diff -uNr mutt-1.5.14.orig/protos.h mutt-1.5.14/protos.h
--- mutt-1.5.14.orig/protos.h	2007-01-31 04:49:03.000000000 +0900
+++ mutt-1.5.14/protos.h	2007-03-04 13:11:37.000000000 +0900
@@ -341,6 +341,7 @@
 int mutt_save_message (HEADER *, int, int, int, int *);
 int mutt_search_command (int, int);
 int mutt_strwidth (const char *);
+int mutt_strwidth_tree (const char *);
 int mutt_compose_menu (HEADER *, char *, size_t, HEADER *);
 int mutt_thread_set_flag (HEADER *, int, int, int);
 int mutt_user_is_recipient (HEADER *);
diff -uNr mutt-1.5.14.orig/wcwidth.c mutt-1.5.14/wcwidth.c
--- mutt-1.5.14.orig/wcwidth.c	2005-09-18 05:14:39.000000000 +0900
+++ mutt-1.5.14/wcwidth.c	2007-03-04 13:11:37.000000000 +0900
@@ -1,27 +1,97 @@
 /*
- * This is an implementation of wcwidth() and wcswidth() as defined in
- * "The Single UNIX Specification, Version 2, The Open Group, 1997"
- * <http://www.UNIX-systems.org/online.html>
+ * This is an implementation of wcwidth() and wcswidth() (defined in
+ * IEEE Std 1002.1-2001) for Unicode.
  *
- * Markus Kuhn -- 2000-02-08 -- public domain
+ * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html
+ * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html
+ *
+ * In fixed-width output devices, Latin characters all occupy a single
+ * "cell" position of equal width, whereas ideographic CJK characters
+ * occupy two such cells. Interoperability between terminal-line
+ * applications and (teletype-style) character terminals using the
+ * UTF-8 encoding requires agreement on which character should advance
+ * the cursor by how many cell positions. No established formal
+ * standards exist at present on which Unicode character shall occupy
+ * how many cell positions on character terminals. These routines are
+ * a first attempt of defining such behavior based on simple rules
+ * applied to data provided by the Unicode Consortium.
+ *
+ * For some graphical characters, the Unicode standard explicitly
+ * defines a character-cell width via the definition of the East Asian
+ * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.
+ * In all these cases, there is no ambiguity about which width a
+ * terminal shall use. For characters in the East Asian Ambiguous (A)
+ * class, the width choice depends purely on a preference of backward
+ * compatibility with either historic CJK or Western practice.
+ * Choosing single-width for these characters is easy to justify as
+ * the appropriate long-term solution, as the CJK practice of
+ * displaying these characters as double-width comes from historic
+ * implementation simplicity (8-bit encoded characters were displayed
+ * single-width and 16-bit ones double-width, even for Greek,
+ * Cyrillic, etc.) and not any typographic considerations.
+ *
+ * Much less clear is the choice of width for the Not East Asian
+ * (Neutral) class. Existing practice does not dictate a width for any
+ * of these characters. It would nevertheless make sense
+ * typographically to allocate two character cells to characters such
+ * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
+ * represented adequately with a single-width glyph. The following
+ * routines at present merely assign a single-cell width to all
+ * neutral characters, in the interest of simplicity. This is not
+ * entirely satisfactory and should be reconsidered before
+ * establishing a formal standard in this area. At the moment, the
+ * decision which Not East Asian (Neutral) characters should be
+ * represented by double-width glyphs cannot yet be answered by
+ * applying a simple rule from the Unicode database content. Setting
+ * up a proper standard for the behavior of UTF-8 character terminals
+ * will require a careful analysis not only of each Unicode character,
+ * but also of each presentation form, something the author of these
+ * routines has avoided to do so far.
+ *
+ * http://www.unicode.org/unicode/reports/tr11/
+ *
+ * Markus Kuhn -- 2003-05-20 (Unicode 4.0)
+ *
+ * Permission to use, copy, modify, and distribute this software
+ * for any purpose and without fee is hereby granted. The author
+ * disclaims all warranties with regard to this software.
+ *
+ * Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
  */
 
-/* Adapted for Mutt by Edmund Grimley Evans.
+/* Adapted for Mutt.
  */
 
-#if HAVE_CONFIG_H
-# include "config.h"
-#endif
+#include <wchar.h>
 
-#ifndef HAVE_WC_FUNCS
+struct interval {
+  int first;
+  int last;
+};
 
-#include "mutt.h"
-#include "mbyte.h"
+/* auxiliary function for binary search in interval table */
+static int bisearch(wchar_t ucs, const struct interval *table, int max) {
+  int min = 0;
+  int mid;
+
+  if (ucs < table[0].first || ucs > table[max].last)
+    return 0;
+  while (max >= min) {
+    mid = (min + max) / 2;
+    if (ucs > table[mid].last)
+      min = mid + 1;
+    else if (ucs < table[mid].first)
+      max = mid - 1;
+    else
+      return 1;
+  }
+
+  return 0;
+}
 
-#include <ctype.h>
 
-/* These functions define the column width of an ISO 10646 character
- * as follows:
+/* The following two functions define the column width of an ISO 10646
+ * character as follows:
  *
  *    - The null character (U+0000) has a column width of 0.
  *
@@ -32,8 +102,16 @@
  *      category code Mn or Me in the Unicode database) have a
  *      column width of 0.
  *
+ *    - SOFT HYPHEN (U+00AD) has a column width of 1.
+ *
+ *    - Other format characters (general category code Cf in the Unicode
+ *      database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.
+ *
+ *    - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
+ *      have a column width of 0.
+ *
  *    - Spacing characters in the East Asian Wide (W) or East Asian
- *      FullWidth (F) category as defined in Unicode Technical
+ *      Full-width (F) category as defined in Unicode Technical
  *      Report #11 have a column width of 2.
  *
  *    - All remaining characters (including all printable
@@ -47,94 +125,194 @@
 int wcwidth_ucs(wchar_t ucs)
 {
   /* sorted list of non-overlapping intervals of non-spacing characters */
-  static const struct interval {
-    unsigned short first;
-    unsigned short last;
-  } combining[] = {
-    { 0x0300, 0x034E }, { 0x0360, 0x0362 }, { 0x0483, 0x0486 },
+  /* generated by "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c" */
+  static const struct interval combining[] = {
+    { 0x0300, 0x0357 }, { 0x035D, 0x036F }, { 0x0483, 0x0486 },
     { 0x0488, 0x0489 }, { 0x0591, 0x05A1 }, { 0x05A3, 0x05B9 },
     { 0x05BB, 0x05BD }, { 0x05BF, 0x05BF }, { 0x05C1, 0x05C2 },
-    { 0x05C4, 0x05C4 }, { 0x064B, 0x0655 }, { 0x0670, 0x0670 },
-    { 0x06D6, 0x06E4 }, { 0x06E7, 0x06E8 }, { 0x06EA, 0x06ED },
+    { 0x05C4, 0x05C4 }, { 0x0600, 0x0603 }, { 0x0610, 0x0615 },
+    { 0x064B, 0x0658 }, { 0x0670, 0x0670 }, { 0x06D6, 0x06E4 },
+    { 0x06E7, 0x06E8 }, { 0x06EA, 0x06ED }, { 0x070F, 0x070F },
     { 0x0711, 0x0711 }, { 0x0730, 0x074A }, { 0x07A6, 0x07B0 },
     { 0x0901, 0x0902 }, { 0x093C, 0x093C }, { 0x0941, 0x0948 },
     { 0x094D, 0x094D }, { 0x0951, 0x0954 }, { 0x0962, 0x0963 },
     { 0x0981, 0x0981 }, { 0x09BC, 0x09BC }, { 0x09C1, 0x09C4 },
-    { 0x09CD, 0x09CD }, { 0x09E2, 0x09E3 }, { 0x0A02, 0x0A02 },
+    { 0x09CD, 0x09CD }, { 0x09E2, 0x09E3 }, { 0x0A01, 0x0A02 },
     { 0x0A3C, 0x0A3C }, { 0x0A41, 0x0A42 }, { 0x0A47, 0x0A48 },
     { 0x0A4B, 0x0A4D }, { 0x0A70, 0x0A71 }, { 0x0A81, 0x0A82 },
     { 0x0ABC, 0x0ABC }, { 0x0AC1, 0x0AC5 }, { 0x0AC7, 0x0AC8 },
-    { 0x0ACD, 0x0ACD }, { 0x0B01, 0x0B01 }, { 0x0B3C, 0x0B3C },
-    { 0x0B3F, 0x0B3F }, { 0x0B41, 0x0B43 }, { 0x0B4D, 0x0B4D },
-    { 0x0B56, 0x0B56 }, { 0x0B82, 0x0B82 }, { 0x0BC0, 0x0BC0 },
-    { 0x0BCD, 0x0BCD }, { 0x0C3E, 0x0C40 }, { 0x0C46, 0x0C48 },
-    { 0x0C4A, 0x0C4D }, { 0x0C55, 0x0C56 }, { 0x0CBF, 0x0CBF },
-    { 0x0CC6, 0x0CC6 }, { 0x0CCC, 0x0CCD }, { 0x0D41, 0x0D43 },
-    { 0x0D4D, 0x0D4D }, { 0x0DCA, 0x0DCA }, { 0x0DD2, 0x0DD4 },
-    { 0x0DD6, 0x0DD6 }, { 0x0E31, 0x0E31 }, { 0x0E34, 0x0E3A },
-    { 0x0E47, 0x0E4E }, { 0x0EB1, 0x0EB1 }, { 0x0EB4, 0x0EB9 },
-    { 0x0EBB, 0x0EBC }, { 0x0EC8, 0x0ECD }, { 0x0F18, 0x0F19 },
-    { 0x0F35, 0x0F35 }, { 0x0F37, 0x0F37 }, { 0x0F39, 0x0F39 },
-    { 0x0F71, 0x0F7E }, { 0x0F80, 0x0F84 }, { 0x0F86, 0x0F87 },
-    { 0x0F90, 0x0F97 }, { 0x0F99, 0x0FBC }, { 0x0FC6, 0x0FC6 },
-    { 0x102D, 0x1030 }, { 0x1032, 0x1032 }, { 0x1036, 0x1037 },
-    { 0x1039, 0x1039 }, { 0x1058, 0x1059 }, { 0x17B7, 0x17BD },
-    { 0x17C6, 0x17C6 }, { 0x17C9, 0x17D3 }, { 0x18A9, 0x18A9 },
-    { 0x20D0, 0x20E3 }, { 0x302A, 0x302F }, { 0x3099, 0x309A },
-    { 0xFB1E, 0xFB1E }, { 0xFE20, 0xFE23 }
+    { 0x0ACD, 0x0ACD }, { 0x0AE2, 0x0AE3 }, { 0x0B01, 0x0B01 },
+    { 0x0B3C, 0x0B3C }, { 0x0B3F, 0x0B3F }, { 0x0B41, 0x0B43 },
+    { 0x0B4D, 0x0B4D }, { 0x0B56, 0x0B56 }, { 0x0B82, 0x0B82 },
+    { 0x0BC0, 0x0BC0 }, { 0x0BCD, 0x0BCD }, { 0x0C3E, 0x0C40 },
+    { 0x0C46, 0x0C48 }, { 0x0C4A, 0x0C4D }, { 0x0C55, 0x0C56 },
+    { 0x0CBC, 0x0CBC }, { 0x0CBF, 0x0CBF }, { 0x0CC6, 0x0CC6 },
+    { 0x0CCC, 0x0CCD }, { 0x0D41, 0x0D43 }, { 0x0D4D, 0x0D4D },
+    { 0x0DCA, 0x0DCA }, { 0x0DD2, 0x0DD4 }, { 0x0DD6, 0x0DD6 },
+    { 0x0E31, 0x0E31 }, { 0x0E34, 0x0E3A }, { 0x0E47, 0x0E4E },
+    { 0x0EB1, 0x0EB1 }, { 0x0EB4, 0x0EB9 }, { 0x0EBB, 0x0EBC },
+    { 0x0EC8, 0x0ECD }, { 0x0F18, 0x0F19 }, { 0x0F35, 0x0F35 },
+    { 0x0F37, 0x0F37 }, { 0x0F39, 0x0F39 }, { 0x0F71, 0x0F7E },
+    { 0x0F80, 0x0F84 }, { 0x0F86, 0x0F87 }, { 0x0F90, 0x0F97 },
+    { 0x0F99, 0x0FBC }, { 0x0FC6, 0x0FC6 }, { 0x102D, 0x1030 },
+    { 0x1032, 0x1032 }, { 0x1036, 0x1037 }, { 0x1039, 0x1039 },
+    { 0x1058, 0x1059 }, { 0x1160, 0x11FF }, { 0x1712, 0x1714 },
+    { 0x1732, 0x1734 }, { 0x1752, 0x1753 }, { 0x1772, 0x1773 },
+    { 0x17B4, 0x17B5 }, { 0x17B7, 0x17BD }, { 0x17C6, 0x17C6 },
+    { 0x17C9, 0x17D3 }, { 0x17DD, 0x17DD }, { 0x180B, 0x180D },
+    { 0x18A9, 0x18A9 }, { 0x1920, 0x1922 }, { 0x1927, 0x1928 },
+    { 0x1932, 0x1932 }, { 0x1939, 0x193B }, { 0x200B, 0x200F },
+    { 0x202A, 0x202E }, { 0x2060, 0x2063 }, { 0x206A, 0x206F },
+    { 0x20D0, 0x20EA }, { 0x302A, 0x302F }, { 0x3099, 0x309A },
+    { 0xFB1E, 0xFB1E }, { 0xFE00, 0xFE0F }, { 0xFE20, 0xFE23 },
+    { 0xFEFF, 0xFEFF }, { 0xFFF9, 0xFFFB }, { 0x1D167, 0x1D169 },
+    { 0x1D173, 0x1D182 }, { 0x1D185, 0x1D18B }, { 0x1D1AA, 0x1D1AD },
+    { 0xE0001, 0xE0001 }, { 0xE0020, 0xE007F }, { 0xE0100, 0xE01EF }
   };
-  int min = 0;
-  int max = sizeof(combining) / sizeof(struct interval) - 1;
-  int mid;
 
+  /* test for 8-bit control characters */
   if (ucs == 0)
     return 0;
-
-  /* test for 8-bit control characters */
   if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))
     return -1;
 
-  /* first quick check for Latin-1 etc. characters */
-  if (ucs < combining[0].first)
-    return 1;
-
   /* binary search in table of non-spacing characters */
-  while (max >= min) {
-    mid = (min + max) / 2;
-    if (combining[mid].last < ucs)
-      min = mid + 1;
-    else if (combining[mid].first > ucs)
-      max = mid - 1;
-    else if (combining[mid].first <= ucs && combining[mid].last >= ucs)
+  if (bisearch(ucs, combining,
+	       sizeof(combining) / sizeof(struct interval) - 1))
       return 0;
-  }
 
   /* if we arrive here, ucs is not a combining or C0/C1 control character */
 
-  /* fast test for majority of non-wide scripts */
-  if (ucs < 0x1100)
-    return 1;
-
   return 1 +
-    ((ucs >= 0x1100 && ucs <= 0x115f) || /* Hangul Jamo */
-     (ucs >= 0x2e80 && ucs <= 0xa4cf && (ucs & ~0x0011) != 0x300a &&
+    (ucs >= 0x1100 &&
+     (ucs <= 0x115f ||                    /* Hangul Jamo init. consonants */
+      ucs == 0x2329 || ucs == 0x232a ||
+      (ucs >= 0x2e80 && ucs <= 0xa4cf &&
       ucs != 0x303f) ||                  /* CJK ... Yi */
      (ucs >= 0xac00 && ucs <= 0xd7a3) || /* Hangul Syllables */
      (ucs >= 0xf900 && ucs <= 0xfaff) || /* CJK Compatibility Ideographs */
      (ucs >= 0xfe30 && ucs <= 0xfe6f) || /* CJK Compatibility Forms */
-     (ucs >= 0xff00 && ucs <= 0xff5f) || /* Fullwidth Forms */
-     (ucs >= 0xffe0 && ucs <= 0xffe6));
+      (ucs >= 0xff00 && ucs <= 0xff60) || /* Fullwidth Forms */
+      (ucs >= 0xffe0 && ucs <= 0xffe6) ||
+      (ucs >= 0x20000 && ucs <= 0x2fffd) ||
+      (ucs >= 0x30000 && ucs <= 0x3fffd)));
 }
 
-#endif /* !HAVE_WC_FUNCS */
 
 #if 0 /* original */
-int wcswidth(const wchar_t *pwcs, size_t n)
+int wcswidth_ucs(const wchar_t *pwcs, size_t n)
+{
+  int w, width = 0;
+
+  for (;*pwcs && n-- > 0; pwcs++)
+    if ((w = wcwidth_ucs(*pwcs)) < 0)
+      return -1;
+    else
+      width += w;
+
+  return width;
+}
+#endif
+
+
+/*
+ * The following functions are the same as wcwidth_ucs() and
+ * wcwidth_cjk(), except that spacing characters in the East Asian
+ * Ambiguous (A) category as defined in Unicode Technical Report #11
+ * have a column width of 2. This variant might be useful for users of
+ * CJK legacy encodings who want to migrate to UCS without changing
+ * the traditional terminal character-width behaviour. It is not
+ * otherwise recommended for general use.
+ */
+/*
+ * In addition to the explanation mentioned above,
+ * several characters in the East Asian Narrow (Na) and Not East Asian 
+ * (Neutral) category as defined in Unicode Technical Report #11
+ * actually have a column width of 2 in CJK legacy encodings.
+ */
+int wcwidth_cjk(wchar_t ucs)
+{
+  /* sorted list of non-overlapping intervals of East Asian Ambiguous
+   * characters, generated by "uniset +WIDTH-A -cat=Me -cat=Mn -cat=Cf c" */
+  static const struct interval ambiguous[] = {
+    { 0x00A1, 0x00A1 }, { 0x00A4, 0x00A4 }, { 0x00A7, 0x00A8 },
+    { 0x00AA, 0x00AA }, { 0x00AE, 0x00AE }, { 0x00B0, 0x00B4 },
+    { 0x00B6, 0x00BA }, { 0x00BC, 0x00BF }, { 0x00C6, 0x00C6 },
+    { 0x00D0, 0x00D0 }, { 0x00D7, 0x00D8 }, { 0x00DE, 0x00E1 },
+    { 0x00E6, 0x00E6 }, { 0x00E8, 0x00EA }, { 0x00EC, 0x00ED },
+    { 0x00F0, 0x00F0 }, { 0x00F2, 0x00F3 }, { 0x00F7, 0x00FA },
+    { 0x00FC, 0x00FC }, { 0x00FE, 0x00FE }, { 0x0101, 0x0101 },
+    { 0x0111, 0x0111 }, { 0x0113, 0x0113 }, { 0x011B, 0x011B },
+    { 0x0126, 0x0127 }, { 0x012B, 0x012B }, { 0x0131, 0x0133 },
+    { 0x0138, 0x0138 }, { 0x013F, 0x0142 }, { 0x0144, 0x0144 },
+    { 0x0148, 0x014B }, { 0x014D, 0x014D }, { 0x0152, 0x0153 },
+    { 0x0166, 0x0167 }, { 0x016B, 0x016B }, { 0x01CE, 0x01CE },
+    { 0x01D0, 0x01D0 }, { 0x01D2, 0x01D2 }, { 0x01D4, 0x01D4 },
+    { 0x01D6, 0x01D6 }, { 0x01D8, 0x01D8 }, { 0x01DA, 0x01DA },
+    { 0x01DC, 0x01DC }, { 0x0251, 0x0251 }, { 0x0261, 0x0261 },
+    { 0x02C4, 0x02C4 }, { 0x02C7, 0x02C7 }, { 0x02C9, 0x02CB },
+    { 0x02CD, 0x02CD }, { 0x02D0, 0x02D0 }, { 0x02D8, 0x02DB },
+    { 0x02DD, 0x02DD }, { 0x02DF, 0x02DF }, { 0x0391, 0x03A1 },
+    { 0x03A3, 0x03A9 }, { 0x03B1, 0x03C1 }, { 0x03C3, 0x03C9 },
+    { 0x0401, 0x0401 }, { 0x0410, 0x044F }, { 0x0451, 0x0451 },
+    { 0x2010, 0x2010 }, { 0x2013, 0x2016 }, { 0x2018, 0x2019 },
+    { 0x201C, 0x201D }, { 0x2020, 0x2022 }, { 0x2024, 0x2027 },
+    { 0x2030, 0x2030 }, { 0x2032, 0x2033 }, { 0x2035, 0x2035 },
+    { 0x203B, 0x203B }, { 0x203E, 0x203E }, { 0x2074, 0x2074 },
+    { 0x207F, 0x207F }, { 0x2081, 0x2084 }, { 0x20AC, 0x20AC },
+    { 0x2103, 0x2103 }, { 0x2105, 0x2105 }, { 0x2109, 0x2109 },
+    { 0x2113, 0x2113 }, { 0x2116, 0x2116 }, { 0x2121, 0x2122 },
+    { 0x2126, 0x2126 }, { 0x212B, 0x212B }, { 0x2153, 0x2154 },
+    { 0x215B, 0x215E }, { 0x2160, 0x216B }, { 0x2170, 0x2179 },
+    { 0x2190, 0x2199 }, { 0x21B8, 0x21B9 }, { 0x21D2, 0x21D2 },
+    { 0x21D4, 0x21D4 }, { 0x21E7, 0x21E7 }, { 0x2200, 0x2200 },
+    { 0x2202, 0x2203 }, { 0x2207, 0x2208 }, { 0x220B, 0x220B },
+    { 0x220F, 0x220F }, { 0x2211, 0x2211 }, { 0x2215, 0x2215 },
+    { 0x221A, 0x221A }, { 0x221D, 0x2220 }, { 0x2223, 0x2223 },
+    { 0x2225, 0x2225 }, { 0x2227, 0x222C }, { 0x222E, 0x222E },
+    { 0x2234, 0x2237 }, { 0x223C, 0x223D }, { 0x2248, 0x2248 },
+    { 0x224C, 0x224C }, { 0x2252, 0x2252 }, { 0x2260, 0x2261 },
+    { 0x2264, 0x2267 }, { 0x226A, 0x226B }, { 0x226E, 0x226F },
+    { 0x2282, 0x2283 }, { 0x2286, 0x2287 }, { 0x2295, 0x2295 },
+    { 0x2299, 0x2299 }, { 0x22A5, 0x22A5 }, { 0x22BF, 0x22BF },
+    { 0x2312, 0x2312 }, { 0x2460, 0x24E9 }, { 0x24EB, 0x254B },
+    { 0x2550, 0x2573 }, { 0x2580, 0x258F }, { 0x2592, 0x2595 },
+    { 0x25A0, 0x25A1 }, { 0x25A3, 0x25A9 }, { 0x25B2, 0x25B3 },
+    { 0x25B6, 0x25B7 }, { 0x25BC, 0x25BD }, { 0x25C0, 0x25C1 },
+    { 0x25C6, 0x25C8 }, { 0x25CB, 0x25CB }, { 0x25CE, 0x25D1 },
+    { 0x25E2, 0x25E5 }, { 0x25EF, 0x25EF }, { 0x2605, 0x2606 },
+    { 0x2609, 0x2609 }, { 0x260E, 0x260F }, { 0x2614, 0x2615 },
+    { 0x261C, 0x261C }, { 0x261E, 0x261E }, { 0x2640, 0x2640 },
+    { 0x2642, 0x2642 }, { 0x2660, 0x2661 }, { 0x2663, 0x2665 },
+    { 0x2667, 0x266A }, { 0x266C, 0x266D }, { 0x266F, 0x266F },
+    { 0x273D, 0x273D }, { 0x2776, 0x277F }, { 0xE000, 0xF8FF },
+    { 0xFFFD, 0xFFFD }, { 0xF0000, 0xFFFFD }, { 0x100000, 0x10FFFD }
+  };
+
+  /* For Japanese legacy encodings, the following characters are added. */
+  static const struct interval legacy_ja[] = {
+    { 0x00A2, 0x00A3 }, { 0x00A5, 0x00A6 }, { 0x00AC, 0x00AC },
+    { 0x00AF, 0x00AF }, { 0x2212, 0x2212 }
+  };
+
+  /* binary search in table of non-spacing characters */
+  if (bisearch(ucs, ambiguous,
+	       sizeof(ambiguous) / sizeof(struct interval) - 1))
+    return 2;
+  if (bisearch(ucs, legacy_ja,
+	       sizeof(legacy_ja) / sizeof(struct interval) - 1))
+    return 2;
+
+  return wcwidth_ucs(ucs);
+}
+
+#if 0 /* original */
+int wcswidth_cjk(const wchar_t *pwcs, size_t n)
 {
   int w, width = 0;
 
   for (;*pwcs && n-- > 0; pwcs++)
-    if ((w = wcwidth(*pwcs)) < 0)
+    if ((w = wcwidth_cjk(*pwcs)) < 0)
       return -1;
     else
       width += w;
