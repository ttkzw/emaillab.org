diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Bayes.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Bayes.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Bayes.pm	2006-03-11 04:29:55.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Bayes.pm	2006-03-20 00:35:59.000000000 +0900
@@ -342,10 +342,15 @@
 
   my @rettokens = ();
 
+  if ($self->{'conf'}->{'tokenizer'}) {
+    my $tokenize = $self->{'conf'}->{'tokenizer'}->{'tokenize'};
+    $_ = &$tokenize($_);
+  }
+
   # include quotes, .'s and -'s for URIs, and [$,]'s for Nigerian-scam strings,
   # and ISO-8859-15 alphas.  Do not split on @'s; better results keeping it.
   # Some useful tokens: "$31,000,000" "www.clock-speed.net" "f*ck" "Hits!"
-  tr/-A-Za-z0-9,\@\*\!_'"\$.\241-\377 / /cs;
+  tr/-A-Za-z0-9,\@\*\!_'"\$.\200-\377 / /cs;
 
   # DO split on "..." or "--" or "---"; common formatting error resulting in
   # hapaxes.  Keep the separator itself as a token, though, as long ones can
@@ -411,14 +416,17 @@
     # the domain ".net" appeared in the To header.
     #
     if ($len > MAX_TOKEN_LENGTH && $token !~ /\*/) {
-      if (TOKENIZE_LONG_8BIT_SEQS_AS_TUPLES && $token =~ /[\xa0-\xff]{2}/) {
-	# Matt sez: "Could be asian? Autrijus suggested doing character ngrams,
-	# but I'm doing tuples to keep the dbs small(er)."  Sounds like a plan
-	# to me! (jm)
-	while ($token =~ s/^(..?)//) {
-	  push (@rettokens, "8:$1");
-	}
-	next;
+      if ($token !~ /[\xc0-\xff][\x80-\xbf]{2,}/) {
+        # except normalize_encoding
+        if (TOKENIZE_LONG_8BIT_SEQS_AS_TUPLES && $token =~ /[\xa0-\xff]{2}/) {
+          # Matt sez: "Could be asian? Autrijus suggested doing character ngrams,
+          # but I'm doing tuples to keep the dbs small(er)."  Sounds like a plan
+          # to me! (jm)
+          while ($token =~ s/^(..?)//) {
+            push (@rettokens, "8:$1");
+          }
+          next;
+        }
       }
 
       if (($region == 0 && HDRS_TOKENIZE_LONG_TOKENS_AS_SKIPS)
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Conf.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Conf.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Conf.pm	2006-03-11 04:29:55.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Conf.pm	2006-03-20 00:35:59.000000000 +0900
@@ -838,6 +838,18 @@
     type => $CONF_TYPE_STRING
   });
 
+=item normalize_encoging ( 0 | 1)	(default: 0)
+
+If you set this option, messages are checked after UTF-8 encoding conversion.
+
+=cut
+
+  push (@cmds, {
+    setting => 'normalize_encoding',
+    default => 0,
+    type => $CONF_TYPE_BOOL
+  });
+
 =back
 
 =head2 NETWORK TEST OPTIONS
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/HTML.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/HTML.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/HTML.pm	2006-03-11 04:29:55.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/HTML.pm	2006-03-20 00:35:59.000000000 +0900
@@ -746,7 +746,13 @@
     }
   }
   else {
-    $text =~ s/[ \t\n\r\f\x0b\xa0]+/ /g;
+    if ( $text =~ /[\xc0-\xff][\x80-\xbf][\x80-\xbf]/ ) {
+      # UTF-8 string
+      $text =~ s/[ \t\n\r\f\x0b]+/ /g;
+    }
+    else {
+      $text =~ s/[ \t\n\r\f\x0b\xa0]+/ /g;
+    }
     # trim leading whitespace if previous element was whitespace
     if (@{ $self->{text} } &&
 	defined $self->{text_whitespace} &&
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Message/Node.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Message/Node.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Message/Node.pm	2006-03-11 04:29:53.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Message/Node.pm	2006-03-20 00:35:59.000000000 +0900
@@ -42,6 +42,8 @@
 use Mail::SpamAssassin::HTML;
 use Mail::SpamAssassin::Logger;
 
+our $normalize_supported = ( $] > 5.008004 && eval 'require Encode::Detect::Detector' && eval 'require Encode' );
+
 =item new()
 
 Generates an empty Node object and returns it.  Typically only called
@@ -65,6 +67,7 @@
   if (defined $opts->{'subparse'}) {
     $self->{subparse} = $opts->{'subparse'};
   }
+  $self->{conf} = $opts->{'conf'};
 
   bless($self,$class);
   $self;
@@ -175,7 +178,8 @@
       $self->{'raw_headers'}->{$key} = [];
     }
 
-    push @{ $self->{'headers'}->{$key} },     _decode_header($raw_value);
+    push @{ $self->{'headers'}->{$key} },
+        _decode_header($raw_value, $self->{'conf'}->{'normalize_encoding'});
     push @{ $self->{'raw_headers'}->{$key} }, $raw_value;
 
     return $self->{'headers'}->{$key}->[-1];
@@ -342,6 +346,32 @@
   return 0;
 }
 
+sub _normalize {
+  my ($data, $charset) = @_;
+  return $data unless $normalize_supported;
+  my $detected = Encode::Detect::Detector::detect($data);
+  dbg("detected charset ".($detected || 'none'));
+
+  my $converter;
+
+  if ($charset && ($detected || 'none') !~ /^(?:UTF|EUC|ISO-2022|Shift_JIS|Big5|GB)/i) {
+      dbg("using labeled charset $charset");
+      $converter = Encode::find_encoding($charset);
+  }
+
+  $converter = Encode::find_encoding($detected) unless $converter || !defined($detected);
+
+  return $data unless $converter;
+
+  my $text = $converter->decode($data, 0);
+  dbg("converted from " . $converter->name . " to UTF8");
+  if ( $text =~ /[\xe3-\xef][\x80-\xbf][\x80-\xbf]/ ) {
+    # unfolding CJK strings (U3041-U9FBB)
+    $text =~ s/([\xe3-\xe9][\x80-\xbf][\x80-\xbf])(\r\n|\n)([\xe3-\xe9][\x80-\xbf][\x80-\xbf])/$1$3/g;
+  }
+  return $text;
+}
+
 =item rendered()
 
 render_text() takes the given text/* type MIME part, and attempts to
@@ -360,6 +390,9 @@
 
   if (!exists $self->{rendered}) {
     my $text = $self->decode();
+    if ($self->{'conf'}->{'normalize_encoding'}) {
+      $text = _normalize($text, $self->{charset});
+    }
     my $raw = length($text);
 
     # render text/html always, or any other text|text/plain part as text/html
@@ -391,6 +424,9 @@
     else {
       $self->{rendered_type} = $self->{type};
       $self->{rendered} = $text;
+      if ($self->{'conf'}->{'normalize_encoding'}) {
+        $self->{visible_rendered} = $text;
+      }
     }
   }
 
@@ -478,11 +514,12 @@
 
 # decode a header appropriately.  don't bother adding it to the pod documents.
 sub __decode_header {
-  my ( $encoding, $cte, $data ) = @_;
+  my ( $encoding, $cte, $data, $normalize_encoding ) = @_;
 
+  my $text;
   if ( $cte eq 'B' ) {
     # base 64 encoded
-    return Mail::SpamAssassin::Util::base64_decode($data);
+    $text = Mail::SpamAssassin::Util::base64_decode($data);
   }
   elsif ( $cte eq 'Q' ) {
     # quoted printable
@@ -490,18 +527,22 @@
     # the RFC states that in the encoded text, "_" is equal to "=20"
     $data =~ s/_/=20/g;
 
-    return Mail::SpamAssassin::Util::qp_decode($data);
+    $text = Mail::SpamAssassin::Util::qp_decode($data);
   }
   else {
     # not possible since the input has already been limited to 'B' and 'Q'
     die "message: unknown encoding type '$cte' in RFC2047 header";
   }
+  if ($normalize_encoding) {
+    $text = _normalize($text, $encoding);
+  }
+  return $text;
 }
 
 # Decode base64 and quoted-printable in headers according to RFC2047.
 #
 sub _decode_header {
-  my($header) = @_;
+  my($header, $normalize_encoding) = @_;
 
   return '' unless $header;
 
@@ -509,7 +550,15 @@
   $header =~ s/\n[ \t]+/\n /g;
   $header =~ s/\r?\n//g;
 
-  return $header unless $header =~ /=\?/;
+  unless ($header =~ /=\?/) {
+    if ($normalize_encoding && $header =~ /[\x1b\x80-\xff]/) {
+      # normalize non-MIME-encoded multibyte string
+      return _normalize($header);
+    }
+    else {
+      return $header;
+    }
+  }
 
   # multiple encoded sections must ignore the interim whitespace.
   # to avoid possible FPs with (\s+(?==\?))?, look for the whole RE
@@ -517,7 +566,7 @@
   1 while ($header =~ s/(=\?[\w_-]+\?[bqBQ]\?[^?]+\?=)\s+(=\?[\w_-]+\?[bqBQ]\?[^?]+\?=)/$1$2/g);
 
   $header =~
-    s/=\?([\w_-]+)\?([bqBQ])\?([^?]+)\?=/__decode_header($1, uc($2), $3)/ge;
+    s/=\?([\w_-]+)\?([bqBQ])\?([^?]+)\?=/__decode_header($1, uc($2), $3, $normalize_encoding)/ge;
 
   return $header;
 }
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Message.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Message.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Message.pm	2006-03-11 04:29:55.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Message.pm	2006-03-20 00:35:59.000000000 +0900
@@ -110,6 +110,7 @@
   my($opts) = @_;
   my $message = $opts->{'message'} || \*STDIN;
   my $parsenow = $opts->{'parsenow'} || 0;
+  $self->{conf} = $opts->{'conf'};
 
   # Specifies whether or not to parse message/rfc822 parts into its own tree.
   # If the # > 0, it'll subparse, otherwise it won't.  By default, do one
@@ -654,7 +655,7 @@
   }
 
   # prepare a new tree node
-  my $part_msg = Mail::SpamAssassin::Message::Node->new({ subparse=>$msg->{subparse}-1 });
+  my $part_msg = Mail::SpamAssassin::Message::Node->new({ subparse=>$msg->{subparse}-1, conf=>$self->{conf} });
   my $in_body = 0;
   my $header;
   my $part_array;
@@ -701,7 +702,7 @@
 
       # make sure we start with a new clean node
       $in_body  = 0;
-      $part_msg = Mail::SpamAssassin::Message::Node->new({ subparse=>$msg->{subparse}-1 });
+      $part_msg = Mail::SpamAssassin::Message::Node->new({ subparse=>$msg->{subparse}-1, conf=>$self->{conf} });
       undef $part_array;
       undef $header;
 
@@ -769,6 +770,7 @@
   # 0: content-type, 1: boundary, 2: charset, 3: filename
   my @ct = Mail::SpamAssassin::Util::parse_content_type($part_msg->header('content-type'));
   $part_msg->{'type'} = $ct[0];
+  $part_msg->{'charset'} = $ct[2];
 
   # multipart sections are required to have a boundary set ...  If this
   # one doesn't, assume it's malformed and revert to text/plain
@@ -880,7 +882,13 @@
 
   # whitespace handling (warning: small changes have large effects!)
   $text =~ s/\n+\s*\n+/\f/gs;		# double newlines => form feed
-  $text =~ tr/ \t\n\r\x0b\xa0/ /s;	# whitespace => space
+  if ( $text =~ /[\xc0-\xff][\x80-\xbf][\x80-\xbf]/ ) {
+    # UTF-8 encoding
+    $text =~ tr/ \t\n\r\x0b/ /s;       # whitespace => space
+  }
+  else {
+    $text =~ tr/ \t\n\r\x0b\xa0/ /s;   # whitespace => space
+  }
   $text =~ tr/\f/\n/;			# form feeds => newline
   
   # warn "message: $text";
@@ -940,7 +948,13 @@
 
   # whitespace handling (warning: small changes have large effects!)
   $text =~ s/\n+\s*\n+/\f/gs;		# double newlines => form feed
-  $text =~ tr/ \t\n\r\x0b\xa0/ /s;	# whitespace => space
+  if ( $text =~ /[\xc0-\xff][\x80-\xbf][\x80-\xbf]/ ) {
+    # UTF-8 encoding
+    $text =~ tr/ \t\n\r\x0b/ /s;       # whitespace => space
+  }
+  else {
+    $text =~ tr/ \t\n\r\x0b\xa0/ /s;   # whitespace => space
+  }
   $text =~ tr/\f/\n/;			# form feeds => newline
 
   my @textary = split_into_array_of_short_lines ($text);
@@ -991,7 +1005,13 @@
 
   # whitespace handling (warning: small changes have large effects!)
   $text =~ s/\n+\s*\n+/\f/gs;		# double newlines => form feed
-  $text =~ tr/ \t\n\r\x0b\xa0/ /s;	# whitespace => space
+  if ( $text =~ /[\xc0-\xff][\x80-\xbf][\x80-\xbf]/ ) {
+    # UTF-8 encoding
+    $text =~ tr/ \t\n\r\x0b/ /s;       # whitespace => space
+  }
+  else {
+    $text =~ tr/ \t\n\r\x0b\xa0/ /s;   # whitespace => space
+  }
   $text =~ tr/\f/\n/;			# form feeds => newline
 
   my @textary = split_into_array_of_short_lines ($text);
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Plugin/TokenizerKakasi.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Plugin/TokenizerKakasi.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Plugin/TokenizerKakasi.pm	1970-01-01 09:00:00.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Plugin/TokenizerKakasi.pm	2006-03-20 00:54:08.000000000 +0900
@@ -0,0 +1,78 @@
+# <@LICENSE>
+# Copyright 2004 Apache Software Foundation
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# </@LICENSE>
+
+=head1 NAME
+
+TokenizerKakasi - normalize encoding plugin
+
+=head1 SYNOPSIS
+
+  loadplugin     Mail::SpamAssassin::Plugin::TokenizerKakasi
+
+=head1 DESCRIPTION
+
+To try this plugin, write the above two lines in the synopsis to
+C</etc/mail/spamassassin/plugintest.cf>.
+
+=cut
+
+package Mail::SpamAssassin::Plugin::TokenizerKakasi;
+
+use Mail::SpamAssassin::Plugin;
+use Mail::SpamAssassin::Logger;
+use strict;
+use warnings;
+use bytes;
+use Text::Kakasi;
+
+use vars qw(@ISA);
+@ISA = qw(Mail::SpamAssassin::Plugin);
+
+
+our $kakasi;
+
+# constructor: register the eval rule
+sub new {
+  my $class = shift;
+  my $mailsaobject = shift;
+
+  # some boilerplate...
+  $class = ref($class) || $class;
+  my $self = $class->SUPER::new($mailsaobject);
+  bless ($self, $class);
+
+  $self->{tokenize} = \&tokenize;
+  $self->{main}->{conf}->{tokenizer} = $self;
+
+  $kakasi = Text::Kakasi->new(qw/-iutf8 -outf8 -w/);
+  return $self;
+}
+
+sub tokenize {
+  my ($text) = @_;
+
+  # return if CJK characters are not included (U3000-U9FBB)
+  if ( $text !~ /[\xe2-\xe9][\x80-\xbf][\x80-\xbf]/ ) { return $text; }
+
+#  Text::Kakasi::getopt_argv('kakasi','-ieuc','-w');
+#  my $res = Encode::encode("euc-jp",Encode::decode("utf8",$text));
+#  my $str = Text::Kakasi::do_kakasi($res);
+#  my $utf8= Encode::decode("euc-jp",$str);
+#  return $utf8;
+  return $kakasi->get($text);
+}
+
+1;
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Plugin/TokenizerMeCab.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Plugin/TokenizerMeCab.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Plugin/TokenizerMeCab.pm	1970-01-01 09:00:00.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Plugin/TokenizerMeCab.pm	2006-03-20 00:54:08.000000000 +0900
@@ -0,0 +1,71 @@
+# <@LICENSE>
+# Copyright 2004 Apache Software Foundation
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# </@LICENSE>
+
+=head1 NAME
+
+TokenizerMeCab - normalize encoding plugin
+
+=head1 SYNOPSIS
+
+  loadplugin     Mail::SpamAssassin::Plugin::TokenizerMeCab
+
+=head1 DESCRIPTION
+
+To try this plugin, write the above two lines in the synopsis to
+C</etc/mail/spamassassin/plugintest.cf>.
+
+=cut
+
+package Mail::SpamAssassin::Plugin::TokenizerMeCab;
+
+use Mail::SpamAssassin::Plugin;
+use Mail::SpamAssassin::Logger;
+use strict;
+use warnings;
+use bytes;
+use MeCab;
+
+use vars qw(@ISA);
+@ISA = qw(Mail::SpamAssassin::Plugin);
+
+
+our $mecab = new MeCab::Tagger ("-Owakati");
+
+# constructor: register the eval rule
+sub new {
+  my $class = shift;
+  my $mailsaobject = shift;
+
+  # some boilerplate...
+  $class = ref($class) || $class;
+  my $self = $class->SUPER::new($mailsaobject);
+  bless ($self, $class);
+
+  $self->{tokenize} = \&tokenize;
+  $self->{main}->{conf}->{tokenizer} = $self;
+  return $self;
+}
+
+sub tokenize {
+  my ($text) = @_;
+
+  # return if CJK characters are not included (U3000-U9FBB)
+  if ( $text !~ /[\xe2-\xe9][\x80-\xbf][\x80-\xbf]/ ) { return $text; }
+
+  return $mecab->parse($text);
+}
+
+1;
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Util/DependencyInfo.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Util/DependencyInfo.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin/Util/DependencyInfo.pm	2006-03-11 04:29:53.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin/Util/DependencyInfo.pm	2006-03-20 00:35:59.000000000 +0900
@@ -168,6 +168,12 @@
   desc => 'The "sa-update" script requires this module to access compressed
   update archive files.',
 },
+{
+  module => 'Encode::Detect',
+  version => '0.00',
+  desc => 'If this module is installed, SpamAssassin will detect charsets
+  and convert them into Unicode.',
+},
 );
 
 ###########################################################################
diff -uNr Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin.pm Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin.pm
--- Mail-SpamAssassin-3.1.1.orig/lib/Mail/SpamAssassin.pm	2006-03-11 04:29:55.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/lib/Mail/SpamAssassin.pm	2006-03-20 00:35:59.000000000 +0900
@@ -360,7 +360,8 @@
 
 sub parse {
   my($self, $message, $parsenow) = @_;
-  my $msg = Mail::SpamAssassin::Message->new({message=>$message, parsenow=>$parsenow});
+  $self->init(1);
+  my $msg = Mail::SpamAssassin::Message->new({message=>$message, parsenow=>$parsenow, conf=>$self->{'conf'}});
   return $msg;
 }
 
diff -uNr Mail-SpamAssassin-3.1.1.orig/rules/v310.pre Mail-SpamAssassin-3.1.1/rules/v310.pre
--- Mail-SpamAssassin-3.1.1.orig/rules/v310.pre	2006-03-11 04:30:02.000000000 +0900
+++ Mail-SpamAssassin-3.1.1/rules/v310.pre	2006-03-20 00:37:46.000000000 +0900
@@ -76,3 +76,12 @@
 #
 loadplugin Mail::SpamAssassin::Plugin::ReplaceTags
 
+# TokenizerKakasi
+#
+#loadplugin Mail::SpamAssassin::Plugin::TokenizerKakasi
+
+# TokenizerMeCab
+#
+#loadplugin Mail::SpamAssassin::Plugin::TokenizerMeCab
+
+
