diff -uNr Mail-SpamAssassin-3.1.2.orig/lib/Mail/SpamAssassin/Plugin/Tokenizer/Kakasi.pm Mail-SpamAssassin-3.1.2/lib/Mail/SpamAssassin/Plugin/Tokenizer/Kakasi.pm
--- Mail-SpamAssassin-3.1.2.orig/lib/Mail/SpamAssassin/Plugin/Tokenizer/Kakasi.pm	1970-01-01 09:00:00.000000000 +0900
+++ Mail-SpamAssassin-3.1.2/lib/Mail/SpamAssassin/Plugin/Tokenizer/Kakasi.pm	2006-05-28 01:24:15.000000000 +0900
@@ -0,0 +1,70 @@
+# <@LICENSE>
+# Copyright 2004 Apache Software Foundation
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# </@LICENSE>
+
+=head1 NAME
+
+Tokenizer::Kakasi - Japanese tokenizer with Kakasi.
+
+=head1 SYNOPSIS
+
+loadplugin     Mail::SpamAssassin::Plugin::Tokenizer::Kakasi
+
+=head1 DESCRIPTION
+
+This plugin tokenizes Japanese string with Kakasi.
+Text::Kakasi 2.04 or over is required.
+
+=cut
+
+package Mail::SpamAssassin::Plugin::Tokenizer::Kakasi;
+
+use Mail::SpamAssassin::Plugin::Tokenizer;
+use strict;
+use warnings;
+use bytes;
+use Encode;
+
+use vars qw(@ISA);
+@ISA = qw(Mail::SpamAssassin::Plugin::Tokenizer);
+
+# Have to do this so that RPM doesn't find these as required perl modules
+BEGIN { require Text::Kakasi; }
+our $kakasi;
+our $language = 'ja';
+
+sub new {
+  my $class = shift;
+  my $mailsaobject = shift;
+
+  $class = ref($class) || $class;
+  my $self = $class->SUPER::new($mailsaobject, $language);
+  bless ($self, $class);
+
+  $kakasi = Text::Kakasi->new(qw/-iutf8 -outf8 -w/);
+  return $self;
+}
+
+sub tokenize {
+  my $self = shift;
+  my $text = shift;
+
+  # return if CJK characters are not included (U3000-U9FBB)
+  if ( $text !~ /[\xe2-\xe9][\x80-\xbf]{2}/ ) { return $text; }
+
+  return $kakasi->get($text);
+}
+
+1;
diff -uNr Mail-SpamAssassin-3.1.2.orig/lib/Mail/SpamAssassin/Plugin/Tokenizer/MeCab.pm Mail-SpamAssassin-3.1.2/lib/Mail/SpamAssassin/Plugin/Tokenizer/MeCab.pm
--- Mail-SpamAssassin-3.1.2.orig/lib/Mail/SpamAssassin/Plugin/Tokenizer/MeCab.pm	1970-01-01 09:00:00.000000000 +0900
+++ Mail-SpamAssassin-3.1.2/lib/Mail/SpamAssassin/Plugin/Tokenizer/MeCab.pm	2006-05-28 01:58:50.000000000 +0900
@@ -0,0 +1,68 @@
+# <@LICENSE>
+# Copyright 2004 Apache Software Foundation
+# 
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#     http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# </@LICENSE>
+
+=head1 NAME
+
+Tokenizer::MeCab - Japanese tokenizer with MeCab
+
+=head1 SYNOPSIS
+
+loadplugin     Mail::SpamAssassin::Plugin::Tokenizer::MeCab
+
+=head1 DESCRIPTION
+
+This plugin tokenizes Japanese string with MeCab.
+
+=cut
+
+package Mail::SpamAssassin::Plugin::Tokenizer::MeCab;
+
+use Mail::SpamAssassin::Plugin::Tokenizer;
+use strict;
+use warnings;
+use bytes;
+
+use vars qw(@ISA);
+@ISA = qw(Mail::SpamAssassin::Plugin::Tokenizer);
+
+# Have to do this so that RPM doesn't find these as required perl modules
+BEGIN { require MeCab; }
+our $mecab;
+our $language = 'ja';
+
+sub new {
+  my $class = shift;
+  my $mailsaobject = shift;
+
+  $class = ref($class) || $class;
+  my $self = $class->SUPER::new($mailsaobject, $language);
+  bless ($self, $class);
+
+  $mecab = MeCab::Tagger->new("-Owakati");
+  return $self;
+}
+
+sub tokenize {
+  my $self = shift;
+  my $text = shift;
+
+  # return if CJK characters are not included (U3000-U9FBB)
+  if ( $text !~ /[\xe2-\xe9][\x80-\xbf]{2}/ ) { return $text; }
+
+  return $mecab->parse($text);
+}
+
+1;
